
htcb_fw_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f670  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800f860  0800f860  00010860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd10  0800fd10  000111fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fd10  0800fd10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd18  0800fd18  000111fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd18  0800fd18  00010d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fd1c  0800fd1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800fd20  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002294  20000200  0800ff1c  00011200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002494  0800ff1c  00011494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd40  00000000  00000000  00011225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000536a  00000000  00000000  00030f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  000362d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001641  00000000  00000000  00037f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203e4  00000000  00000000  000395d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025bc8  00000000  00000000  000599bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afefc  00000000  00000000  0007f585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b28  00000000  00000000  0012f4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00137fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000200 	.word	0x20000200
 800020c:	00000000 	.word	0x00000000
 8000210:	0800f848 	.word	0x0800f848

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000204 	.word	0x20000204
 800022c:	0800f848 	.word	0x0800f848

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_fmul>:
 8000e64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e6c:	bf1e      	ittt	ne
 8000e6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e72:	ea92 0f0c 	teqne	r2, ip
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d06f      	beq.n	8000f5c <__aeabi_fmul+0xf8>
 8000e7c:	441a      	add	r2, r3
 8000e7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e8a:	d01e      	beq.n	8000eca <__aeabi_fmul+0x66>
 8000e8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e98:	fba0 3101 	umull	r3, r1, r0, r1
 8000e9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ea4:	bf3e      	ittt	cc
 8000ea6:	0049      	lslcc	r1, r1, #1
 8000ea8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	ea40 0001 	orr.w	r0, r0, r1
 8000eb2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eb6:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb8:	d81d      	bhi.n	8000ef6 <__aeabi_fmul+0x92>
 8000eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ebe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec2:	bf08      	it	eq
 8000ec4:	f020 0001 	biceq.w	r0, r0, #1
 8000ec8:	4770      	bx	lr
 8000eca:	f090 0f00 	teq	r0, #0
 8000ece:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed2:	bf08      	it	eq
 8000ed4:	0249      	lsleq	r1, r1, #9
 8000ed6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ede:	3a7f      	subs	r2, #127	@ 0x7f
 8000ee0:	bfc2      	ittt	gt
 8000ee2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eea:	4770      	bxgt	lr
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	dc5d      	bgt.n	8000fb4 <__aeabi_fmul+0x150>
 8000ef8:	f112 0f19 	cmn.w	r2, #25
 8000efc:	bfdc      	itt	le
 8000efe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f02:	4770      	bxle	lr
 8000f04:	f1c2 0200 	rsb	r2, r2, #0
 8000f08:	0041      	lsls	r1, r0, #1
 8000f0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f0e:	f1c2 0220 	rsb	r2, r2, #32
 8000f12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f1a:	f140 0000 	adc.w	r0, r0, #0
 8000f1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f22:	bf08      	it	eq
 8000f24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f28:	4770      	bx	lr
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fmul+0xce>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fmul+0xe6>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fmul+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	bf18      	it	ne
 8000f66:	ea93 0f0c 	teqne	r3, ip
 8000f6a:	d00a      	beq.n	8000f82 <__aeabi_fmul+0x11e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	d1d8      	bne.n	8000f2a <__aeabi_fmul+0xc6>
 8000f78:	ea80 0001 	eor.w	r0, r0, r1
 8000f7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f80:	4770      	bx	lr
 8000f82:	f090 0f00 	teq	r0, #0
 8000f86:	bf17      	itett	ne
 8000f88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f8c:	4608      	moveq	r0, r1
 8000f8e:	f091 0f00 	teqne	r1, #0
 8000f92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f96:	d014      	beq.n	8000fc2 <__aeabi_fmul+0x15e>
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_fmul+0x13e>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d10f      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fa2:	ea93 0f0c 	teq	r3, ip
 8000fa6:	d103      	bne.n	8000fb0 <__aeabi_fmul+0x14c>
 8000fa8:	024b      	lsls	r3, r1, #9
 8000faa:	bf18      	it	ne
 8000fac:	4608      	movne	r0, r1
 8000fae:	d108      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fb0:	ea80 0001 	eor.w	r0, r0, r1
 8000fb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fc0:	4770      	bx	lr
 8000fc2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fc6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fca:	4770      	bx	lr

08000fcc <__aeabi_fdiv>:
 8000fcc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fd4:	bf1e      	ittt	ne
 8000fd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fda:	ea92 0f0c 	teqne	r2, ip
 8000fde:	ea93 0f0c 	teqne	r3, ip
 8000fe2:	d069      	beq.n	80010b8 <__aeabi_fdiv+0xec>
 8000fe4:	eba2 0203 	sub.w	r2, r2, r3
 8000fe8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fec:	0249      	lsls	r1, r1, #9
 8000fee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ff2:	d037      	beq.n	8001064 <__aeabi_fdiv+0x98>
 8000ff4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ffc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001000:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001004:	428b      	cmp	r3, r1
 8001006:	bf38      	it	cc
 8001008:	005b      	lslcc	r3, r3, #1
 800100a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800100e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001012:	428b      	cmp	r3, r1
 8001014:	bf24      	itt	cs
 8001016:	1a5b      	subcs	r3, r3, r1
 8001018:	ea40 000c 	orrcs.w	r0, r0, ip
 800101c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001020:	bf24      	itt	cs
 8001022:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001026:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800102a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800102e:	bf24      	itt	cs
 8001030:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001034:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001038:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800103c:	bf24      	itt	cs
 800103e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001042:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	bf18      	it	ne
 800104a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800104e:	d1e0      	bne.n	8001012 <__aeabi_fdiv+0x46>
 8001050:	2afd      	cmp	r2, #253	@ 0xfd
 8001052:	f63f af50 	bhi.w	8000ef6 <__aeabi_fmul+0x92>
 8001056:	428b      	cmp	r3, r1
 8001058:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800105c:	bf08      	it	eq
 800105e:	f020 0001 	biceq.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001068:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800106c:	327f      	adds	r2, #127	@ 0x7f
 800106e:	bfc2      	ittt	gt
 8001070:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001074:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001078:	4770      	bxgt	lr
 800107a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	3a01      	subs	r2, #1
 8001084:	e737      	b.n	8000ef6 <__aeabi_fmul+0x92>
 8001086:	f092 0f00 	teq	r2, #0
 800108a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800108e:	bf02      	ittt	eq
 8001090:	0040      	lsleq	r0, r0, #1
 8001092:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001096:	3a01      	subeq	r2, #1
 8001098:	d0f9      	beq.n	800108e <__aeabi_fdiv+0xc2>
 800109a:	ea40 000c 	orr.w	r0, r0, ip
 800109e:	f093 0f00 	teq	r3, #0
 80010a2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010a6:	bf02      	ittt	eq
 80010a8:	0049      	lsleq	r1, r1, #1
 80010aa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010ae:	3b01      	subeq	r3, #1
 80010b0:	d0f9      	beq.n	80010a6 <__aeabi_fdiv+0xda>
 80010b2:	ea41 010c 	orr.w	r1, r1, ip
 80010b6:	e795      	b.n	8000fe4 <__aeabi_fdiv+0x18>
 80010b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010bc:	ea92 0f0c 	teq	r2, ip
 80010c0:	d108      	bne.n	80010d4 <__aeabi_fdiv+0x108>
 80010c2:	0242      	lsls	r2, r0, #9
 80010c4:	f47f af7d 	bne.w	8000fc2 <__aeabi_fmul+0x15e>
 80010c8:	ea93 0f0c 	teq	r3, ip
 80010cc:	f47f af70 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e776      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010d4:	ea93 0f0c 	teq	r3, ip
 80010d8:	d104      	bne.n	80010e4 <__aeabi_fdiv+0x118>
 80010da:	024b      	lsls	r3, r1, #9
 80010dc:	f43f af4c 	beq.w	8000f78 <__aeabi_fmul+0x114>
 80010e0:	4608      	mov	r0, r1
 80010e2:	e76e      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010e4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e8:	bf18      	it	ne
 80010ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010ee:	d1ca      	bne.n	8001086 <__aeabi_fdiv+0xba>
 80010f0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010f4:	f47f af5c 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010f8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010fc:	f47f af3c 	bne.w	8000f78 <__aeabi_fmul+0x114>
 8001100:	e75f      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 8001102:	bf00      	nop

08001104 <__gesf2>:
 8001104:	f04f 3cff 	mov.w	ip, #4294967295
 8001108:	e006      	b.n	8001118 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__lesf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	e002      	b.n	8001118 <__cmpsf2+0x4>
 8001112:	bf00      	nop

08001114 <__cmpsf2>:
 8001114:	f04f 0c01 	mov.w	ip, #1
 8001118:	f84d cd04 	str.w	ip, [sp, #-4]!
 800111c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001120:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001124:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001128:	bf18      	it	ne
 800112a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800112e:	d011      	beq.n	8001154 <__cmpsf2+0x40>
 8001130:	b001      	add	sp, #4
 8001132:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001136:	bf18      	it	ne
 8001138:	ea90 0f01 	teqne	r0, r1
 800113c:	bf58      	it	pl
 800113e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001142:	bf88      	it	hi
 8001144:	17c8      	asrhi	r0, r1, #31
 8001146:	bf38      	it	cc
 8001148:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800114c:	bf18      	it	ne
 800114e:	f040 0001 	orrne.w	r0, r0, #1
 8001152:	4770      	bx	lr
 8001154:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001158:	d102      	bne.n	8001160 <__cmpsf2+0x4c>
 800115a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800115e:	d105      	bne.n	800116c <__cmpsf2+0x58>
 8001160:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001164:	d1e4      	bne.n	8001130 <__cmpsf2+0x1c>
 8001166:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800116a:	d0e1      	beq.n	8001130 <__cmpsf2+0x1c>
 800116c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <__aeabi_cfrcmple>:
 8001174:	4684      	mov	ip, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4661      	mov	r1, ip
 800117a:	e7ff      	b.n	800117c <__aeabi_cfcmpeq>

0800117c <__aeabi_cfcmpeq>:
 800117c:	b50f      	push	{r0, r1, r2, r3, lr}
 800117e:	f7ff ffc9 	bl	8001114 <__cmpsf2>
 8001182:	2800      	cmp	r0, #0
 8001184:	bf48      	it	mi
 8001186:	f110 0f00 	cmnmi.w	r0, #0
 800118a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800118c <__aeabi_fcmpeq>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff fff4 	bl	800117c <__aeabi_cfcmpeq>
 8001194:	bf0c      	ite	eq
 8001196:	2001      	moveq	r0, #1
 8001198:	2000      	movne	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmplt>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff ffea 	bl	800117c <__aeabi_cfcmpeq>
 80011a8:	bf34      	ite	cc
 80011aa:	2001      	movcc	r0, #1
 80011ac:	2000      	movcs	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmple>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffe0 	bl	800117c <__aeabi_cfcmpeq>
 80011bc:	bf94      	ite	ls
 80011be:	2001      	movls	r0, #1
 80011c0:	2000      	movhi	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmpge>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffd2 	bl	8001174 <__aeabi_cfrcmple>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpgt>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffc8 	bl	8001174 <__aeabi_cfrcmple>
 80011e4:	bf34      	ite	cc
 80011e6:	2001      	movcc	r0, #1
 80011e8:	2000      	movcs	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_f2uiz>:
 80011f0:	0042      	lsls	r2, r0, #1
 80011f2:	d20e      	bcs.n	8001212 <__aeabi_f2uiz+0x22>
 80011f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f8:	d30b      	bcc.n	8001212 <__aeabi_f2uiz+0x22>
 80011fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001202:	d409      	bmi.n	8001218 <__aeabi_f2uiz+0x28>
 8001204:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001208:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800120c:	fa23 f002 	lsr.w	r0, r3, r2
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2uiz+0x32>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d102      	bne.n	8001228 <__aeabi_f2uiz+0x38>
 8001222:	f04f 30ff 	mov.w	r0, #4294967295
 8001226:	4770      	bx	lr
 8001228:	f04f 0000 	mov.w	r0, #0
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001240:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <MX_ADC1_Init+0xcc>)
 8001242:	4a2f      	ldr	r2, [pc, #188]	@ (8001300 <MX_ADC1_Init+0xd0>)
 8001244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <MX_ADC1_Init+0xcc>)
 8001248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800124c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800124e:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <MX_ADC1_Init+0xcc>)
 8001250:	2201      	movs	r2, #1
 8001252:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <MX_ADC1_Init+0xcc>)
 8001256:	2200      	movs	r2, #0
 8001258:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125a:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <MX_ADC1_Init+0xcc>)
 800125c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001260:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <MX_ADC1_Init+0xcc>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <MX_ADC1_Init+0xcc>)
 800126a:	2204      	movs	r2, #4
 800126c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126e:	4823      	ldr	r0, [pc, #140]	@ (80012fc <MX_ADC1_Init+0xcc>)
 8001270:	f004 ff72 	bl	8006158 <HAL_ADC_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800127a:	f000 fc07 	bl	8001a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001282:	2301      	movs	r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001286:	2307      	movs	r3, #7
 8001288:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	481b      	ldr	r0, [pc, #108]	@ (80012fc <MX_ADC1_Init+0xcc>)
 8001290:	f005 f946 	bl	8006520 <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800129a:	f000 fbf7 	bl	8001a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800129e:	2301      	movs	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4814      	ldr	r0, [pc, #80]	@ (80012fc <MX_ADC1_Init+0xcc>)
 80012ac:	f005 f938 	bl	8006520 <HAL_ADC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012b6:	f000 fbe9 	bl	8001a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012be:	2303      	movs	r3, #3
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	@ (80012fc <MX_ADC1_Init+0xcc>)
 80012c8:	f005 f92a 	bl	8006520 <HAL_ADC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012d2:	f000 fbdb 	bl	8001a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012d6:	2303      	movs	r3, #3
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012da:	2304      	movs	r3, #4
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_ADC1_Init+0xcc>)
 80012e4:	f005 f91c 	bl	8006520 <HAL_ADC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80012ee:	f000 fbcd 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000021c 	.word	0x2000021c
 8001300:	40012400 	.word	0x40012400

08001304 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a28      	ldr	r2, [pc, #160]	@ (80013c0 <HAL_ADC_MspInit+0xbc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d149      	bne.n	80013b8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <HAL_ADC_MspInit+0xc0>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <HAL_ADC_MspInit+0xc0>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <HAL_ADC_MspInit+0xc0>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <HAL_ADC_MspInit+0xc0>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a20      	ldr	r2, [pc, #128]	@ (80013c4 <HAL_ADC_MspInit+0xc0>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <HAL_ADC_MspInit+0xc0>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001354:	230f      	movs	r3, #15
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	4819      	ldr	r0, [pc, #100]	@ (80013c8 <HAL_ADC_MspInit+0xc4>)
 8001364:	f006 f8c2 	bl	80074ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 800136a:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_ADC_MspInit+0xcc>)
 800136c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 800137c:	2280      	movs	r2, #128	@ 0x80
 800137e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 8001382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 800138a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 8001392:	2220      	movs	r2, #32
 8001394:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800139c:	480b      	ldr	r0, [pc, #44]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 800139e:	f005 fd65 	bl	8006e6c <HAL_DMA_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80013a8:	f000 fb70 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 80013b0:	621a      	str	r2, [r3, #32]
 80013b2:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <HAL_ADC_MspInit+0xc8>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40012400 	.word	0x40012400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800
 80013cc:	2000024c 	.word	0x2000024c
 80013d0:	40020008 	.word	0x40020008

080013d4 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC init function */
void MX_DAC_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_DAC_Init+0x64>)
 80013e4:	4a15      	ldr	r2, [pc, #84]	@ (800143c <MX_DAC_Init+0x68>)
 80013e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013e8:	4813      	ldr	r0, [pc, #76]	@ (8001438 <MX_DAC_Init+0x64>)
 80013ea:	f005 fb72 	bl	8006ad2 <HAL_DAC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80013f4:	f000 fb4a 	bl	8001a8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80013f8:	2304      	movs	r3, #4
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	480c      	ldr	r0, [pc, #48]	@ (8001438 <MX_DAC_Init+0x64>)
 8001408:	f005 fc51 	bl	8006cae <HAL_DAC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001412:	f000 fb3b 	bl	8001a8c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001416:	2314      	movs	r3, #20
 8001418:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	2210      	movs	r2, #16
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_DAC_Init+0x64>)
 8001422:	f005 fc44 	bl	8006cae <HAL_DAC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 800142c:	f000 fb2e 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000290 	.word	0x20000290
 800143c:	40007400 	.word	0x40007400

08001440 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a3c      	ldr	r2, [pc, #240]	@ (800154c <HAL_DAC_MspInit+0x10c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d171      	bne.n	8001544 <HAL_DAC_MspInit+0x104>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001460:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <HAL_DAC_MspInit+0x110>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	4a3a      	ldr	r2, [pc, #232]	@ (8001550 <HAL_DAC_MspInit+0x110>)
 8001466:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800146a:	61d3      	str	r3, [r2, #28]
 800146c:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <HAL_DAC_MspInit+0x110>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <HAL_DAC_MspInit+0x110>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a34      	ldr	r2, [pc, #208]	@ (8001550 <HAL_DAC_MspInit+0x110>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <HAL_DAC_MspInit+0x110>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001490:	2330      	movs	r3, #48	@ 0x30
 8001492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	482d      	ldr	r0, [pc, #180]	@ (8001554 <HAL_DAC_MspInit+0x114>)
 80014a0:	f006 f824 	bl	80074ec <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 80014a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014a6:	4a2d      	ldr	r2, [pc, #180]	@ (800155c <HAL_DAC_MspInit+0x11c>)
 80014a8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014ac:	2210      	movs	r2, #16
 80014ae:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b0:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014b6:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014b8:	2280      	movs	r2, #128	@ 0x80
 80014ba:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014bc:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c4:	4b24      	ldr	r3, [pc, #144]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ca:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80014cc:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014ce:	2220      	movs	r2, #32
 80014d0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80014d8:	481f      	ldr	r0, [pc, #124]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014da:	f005 fcc7 	bl	8006e6c <HAL_DMA_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_DAC_MspInit+0xa8>
    {
      Error_Handler();
 80014e4:	f000 fad2 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <HAL_DAC_MspInit+0x118>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 80014f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001564 <HAL_DAC_MspInit+0x124>)
 80014f8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 80014fc:	2210      	movs	r2, #16
 80014fe:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 8001508:	2280      	movs	r2, #128	@ 0x80
 800150a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 800150e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001512:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 8001516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 800151e:	2220      	movs	r2, #32
 8001520:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001522:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8001528:	480d      	ldr	r0, [pc, #52]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 800152a:	f005 fc9f 	bl	8006e6c <HAL_DMA_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_DAC_MspInit+0xf8>
    {
      Error_Handler();
 8001534:	f000 faaa 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a09      	ldr	r2, [pc, #36]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	4a08      	ldr	r2, [pc, #32]	@ (8001560 <HAL_DAC_MspInit+0x120>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40007400 	.word	0x40007400
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800
 8001558:	200002a4 	.word	0x200002a4
 800155c:	40020430 	.word	0x40020430
 8001560:	200002e8 	.word	0x200002e8
 8001564:	40020444 	.word	0x40020444

08001568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <MX_DMA_Init+0x90>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <MX_DMA_Init+0x90>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_DMA_Init+0x90>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_DMA_Init+0x90>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <MX_DMA_Init+0x90>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6153      	str	r3, [r2, #20]
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_DMA_Init+0x90>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2105      	movs	r1, #5
 80015a2:	200b      	movs	r0, #11
 80015a4:	f005 fa6b 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015a8:	200b      	movs	r0, #11
 80015aa:	f005 fa84 	bl	8006ab6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	2010      	movs	r0, #16
 80015b4:	f005 fa63 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80015b8:	2010      	movs	r0, #16
 80015ba:	f005 fa7c 	bl	8006ab6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2105      	movs	r1, #5
 80015c2:	2011      	movs	r0, #17
 80015c4:	f005 fa5b 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80015c8:	2011      	movs	r0, #17
 80015ca:	f005 fa74 	bl	8006ab6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2105      	movs	r1, #5
 80015d2:	203a      	movs	r0, #58	@ 0x3a
 80015d4:	f005 fa53 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80015d8:	203a      	movs	r0, #58	@ 0x3a
 80015da:	f005 fa6c 	bl	8006ab6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2105      	movs	r1, #5
 80015e2:	203b      	movs	r0, #59	@ 0x3b
 80015e4:	f005 fa4b 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80015e8:	203b      	movs	r0, #59	@ 0x3b
 80015ea:	f005 fa64 	bl	8006ab6 <HAL_NVIC_EnableIRQ>

}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_FREERTOS_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	2101      	movs	r1, #1
 8001606:	4811      	ldr	r0, [pc, #68]	@ (800164c <MX_FREERTOS_Init+0x50>)
 8001608:	f008 fbf6 	bl	8009df8 <osTimerNew>
 800160c:	4603      	mov	r3, r0
 800160e:	4a10      	ldr	r2, [pc, #64]	@ (8001650 <MX_FREERTOS_Init+0x54>)
 8001610:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001612:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <MX_FREERTOS_Init+0x58>)
 8001614:	2100      	movs	r1, #0
 8001616:	4810      	ldr	r0, [pc, #64]	@ (8001658 <MX_FREERTOS_Init+0x5c>)
 8001618:	f008 fb2c 	bl	8009c74 <osThreadNew>
 800161c:	4603      	mov	r3, r0
 800161e:	4a0f      	ldr	r2, [pc, #60]	@ (800165c <MX_FREERTOS_Init+0x60>)
 8001620:	6013      	str	r3, [r2, #0]

  /* creation of sub_task */
  sub_taskHandle = osThreadNew(subTask, NULL, &sub_task_attributes);
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <MX_FREERTOS_Init+0x64>)
 8001624:	2100      	movs	r1, #0
 8001626:	480f      	ldr	r0, [pc, #60]	@ (8001664 <MX_FREERTOS_Init+0x68>)
 8001628:	f008 fb24 	bl	8009c74 <osThreadNew>
 800162c:	4603      	mov	r3, r0
 800162e:	4a0e      	ldr	r2, [pc, #56]	@ (8001668 <MX_FREERTOS_Init+0x6c>)
 8001630:	6013      	str	r3, [r2, #0]

  /* creation of main_task */
  main_taskHandle = osThreadNew(mainTask, NULL, &main_task_attributes);
 8001632:	4a0e      	ldr	r2, [pc, #56]	@ (800166c <MX_FREERTOS_Init+0x70>)
 8001634:	2100      	movs	r1, #0
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <MX_FREERTOS_Init+0x74>)
 8001638:	f008 fb1c 	bl	8009c74 <osThreadNew>
 800163c:	4603      	mov	r3, r0
 800163e:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <MX_FREERTOS_Init+0x78>)
 8001640:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	0800f968 	.word	0x0800f968
 800164c:	08004e99 	.word	0x08004e99
 8001650:	20000338 	.word	0x20000338
 8001654:	0800f8fc 	.word	0x0800f8fc
 8001658:	08001679 	.word	0x08001679
 800165c:	2000032c 	.word	0x2000032c
 8001660:	0800f920 	.word	0x0800f920
 8001664:	08002151 	.word	0x08002151
 8001668:	20000330 	.word	0x20000330
 800166c:	0800f944 	.word	0x0800f944
 8001670:	08002639 	.word	0x08002639
 8001674:	20000334 	.word	0x20000334

08001678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001680:	2001      	movs	r0, #1
 8001682:	f008 fb89 	bl	8009d98 <osDelay>
 8001686:	e7fb      	b.n	8001680 <StartDefaultTask+0x8>

08001688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0318 	add.w	r3, r7, #24
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800169c:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <MX_GPIO_Init+0x150>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a4d      	ldr	r2, [pc, #308]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b4:	4b48      	ldr	r3, [pc, #288]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a47      	ldr	r2, [pc, #284]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b45      	ldr	r3, [pc, #276]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a41      	ldr	r2, [pc, #260]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b3c      	ldr	r3, [pc, #240]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a3b      	ldr	r2, [pc, #236]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fc:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <MX_GPIO_Init+0x150>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a35      	ldr	r2, [pc, #212]	@ (80017d8 <MX_GPIO_Init+0x150>)
 8001702:	f043 0320 	orr.w	r3, r3, #32
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b33      	ldr	r3, [pc, #204]	@ (80017d8 <MX_GPIO_Init+0x150>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FND3_CLK_Pin|LED_CLK_Pin|FND_nOE_Pin|OUT0_Pin
 8001714:	2200      	movs	r2, #0
 8001716:	f240 711f 	movw	r1, #1823	@ 0x71f
 800171a:	4830      	ldr	r0, [pc, #192]	@ (80017dc <MX_GPIO_Init+0x154>)
 800171c:	f006 f891 	bl	8007842 <HAL_GPIO_WritePin>
                          |OUT1_Pin|OUT2_Pin|FND1_CLK_Pin|FND2_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001720:	2201      	movs	r2, #1
 8001722:	21ff      	movs	r1, #255	@ 0xff
 8001724:	482e      	ldr	r0, [pc, #184]	@ (80017e0 <MX_GPIO_Init+0x158>)
 8001726:	f006 f88c 	bl	8007842 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : FND3_CLK_Pin LED_CLK_Pin FND_nOE_Pin OUT0_Pin
                           OUT1_Pin OUT2_Pin FND1_CLK_Pin FND2_CLK_Pin */
  GPIO_InitStruct.Pin = FND3_CLK_Pin|LED_CLK_Pin|FND_nOE_Pin|OUT0_Pin
 800172a:	f240 731f 	movw	r3, #1823	@ 0x71f
 800172e:	61bb      	str	r3, [r7, #24]
                          |OUT1_Pin|OUT2_Pin|FND1_CLK_Pin|FND2_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2302      	movs	r3, #2
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	4619      	mov	r1, r3
 8001742:	4826      	ldr	r0, [pc, #152]	@ (80017dc <MX_GPIO_Init+0x154>)
 8001744:	f005 fed2 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001748:	2303      	movs	r3, #3
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174c:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <MX_GPIO_Init+0x15c>)
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	4619      	mov	r1, r3
 800175a:	4823      	ldr	r0, [pc, #140]	@ (80017e8 <MX_GPIO_Init+0x160>)
 800175c:	f005 fec6 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_PB_Pin PB_MODE_Pin PB_SET_Pin */
  GPIO_InitStruct.Pin = ENC_PB_Pin|PB_MODE_Pin|PB_SET_Pin;
 8001760:	231c      	movs	r3, #28
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	4619      	mov	r1, r3
 8001772:	481d      	ldr	r0, [pc, #116]	@ (80017e8 <MX_GPIO_Init+0x160>)
 8001774:	f005 feba 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN0_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN0_Pin|IN1_Pin;
 8001778:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4619      	mov	r1, r3
 800178c:	4817      	ldr	r0, [pc, #92]	@ (80017ec <MX_GPIO_Init+0x164>)
 800178e:	f005 fead 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001792:	23ff      	movs	r3, #255	@ 0xff
 8001794:	61bb      	str	r3, [r7, #24]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2302      	movs	r3, #2
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	f107 0318 	add.w	r3, r7, #24
 80017a6:	4619      	mov	r1, r3
 80017a8:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <MX_GPIO_Init+0x158>)
 80017aa:	f005 fe9f 	bl	80074ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	2006      	movs	r0, #6
 80017b4:	f005 f963 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017b8:	2006      	movs	r0, #6
 80017ba:	f005 f97c 	bl	8006ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2105      	movs	r1, #5
 80017c2:	2007      	movs	r0, #7
 80017c4:	f005 f95b 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017c8:	2007      	movs	r0, #7
 80017ca:	f005 f974 	bl	8006ab6 <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	@ 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40011800 	.word	0x40011800
 80017e0:	40011400 	.word	0x40011400
 80017e4:	10110000 	.word	0x10110000
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40010c00 	.word	0x40010c00

080017f0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_I2C1_Init+0x50>)
 80017f6:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <MX_I2C1_Init+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_I2C1_Init+0x50>)
 80017fc:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <MX_I2C1_Init+0x58>)
 80017fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <MX_I2C1_Init+0x50>)
 800180e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001812:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MX_I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <MX_I2C1_Init+0x50>)
 800182e:	f006 f839 	bl	80078a4 <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001838:	f000 f928 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000033c 	.word	0x2000033c
 8001844:	40005400 	.word	0x40005400
 8001848:	000186a0 	.word	0x000186a0

0800184c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a3b      	ldr	r2, [pc, #236]	@ (8001954 <HAL_I2C_MspInit+0x108>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d16f      	bne.n	800194c <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	4b3a      	ldr	r3, [pc, #232]	@ (8001958 <HAL_I2C_MspInit+0x10c>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a39      	ldr	r2, [pc, #228]	@ (8001958 <HAL_I2C_MspInit+0x10c>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <HAL_I2C_MspInit+0x10c>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001884:	23c0      	movs	r3, #192	@ 0xc0
 8001886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001888:	2312      	movs	r3, #18
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	4831      	ldr	r0, [pc, #196]	@ (800195c <HAL_I2C_MspInit+0x110>)
 8001898:	f005 fe28 	bl	80074ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800189c:	4b2e      	ldr	r3, [pc, #184]	@ (8001958 <HAL_I2C_MspInit+0x10c>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001958 <HAL_I2C_MspInit+0x10c>)
 80018a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_I2C_MspInit+0x10c>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80018b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <HAL_I2C_MspInit+0x118>)
 80018b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ba:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018cc:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d2:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018d8:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80018e4:	481e      	ldr	r0, [pc, #120]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018e6:	f005 fac1 	bl	8006e6c <HAL_DMA_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80018f0:	f000 f8cc 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80018fa:	4a19      	ldr	r2, [pc, #100]	@ (8001960 <HAL_I2C_MspInit+0x114>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 8001902:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <HAL_I2C_MspInit+0x120>)
 8001904:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 8001908:	2210      	movs	r2, #16
 800190a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 8001914:	2280      	movs	r2, #128	@ 0x80
 8001916:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001930:	480d      	ldr	r0, [pc, #52]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 8001932:	f005 fa9b 	bl	8006e6c <HAL_DMA_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 800193c:	f000 f8a6 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 8001944:	635a      	str	r2, [r3, #52]	@ 0x34
 8001946:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <HAL_I2C_MspInit+0x11c>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40005400 	.word	0x40005400
 8001958:	40021000 	.word	0x40021000
 800195c:	40010c00 	.word	0x40010c00
 8001960:	20000390 	.word	0x20000390
 8001964:	40020080 	.word	0x40020080
 8001968:	200003d4 	.word	0x200003d4
 800196c:	4002006c 	.word	0x4002006c

08001970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001974:	f004 fbbe 	bl	80060f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001978:	f000 f818 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197c:	f7ff fe84 	bl	8001688 <MX_GPIO_Init>
  MX_DMA_Init();
 8001980:	f7ff fdf2 	bl	8001568 <MX_DMA_Init>
  MX_ADC1_Init();
 8001984:	f7ff fc54 	bl	8001230 <MX_ADC1_Init>
  MX_DAC_Init();
 8001988:	f7ff fd24 	bl	80013d4 <MX_DAC_Init>
  MX_I2C1_Init();
 800198c:	f7ff ff30 	bl	80017f0 <MX_I2C1_Init>
  MX_UART4_Init();
 8001990:	f000 fb40 	bl	8002014 <MX_UART4_Init>
  MX_TIM6_Init();
 8001994:	f000 fa90 	bl	8001eb8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001998:	f000 fac4 	bl	8001f24 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800199c:	f008 f922 	bl	8009be4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80019a0:	f7ff fe2c 	bl	80015fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019a4:	f008 f940 	bl	8009c28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <main+0x38>

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b096      	sub	sp, #88	@ 0x58
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019b6:	2228      	movs	r2, #40	@ 0x28
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00b fe70 	bl	800d6a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e0:	2301      	movs	r3, #1
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80019ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f0:	2301      	movs	r3, #1
 80019f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f4:	2302      	movs	r3, #2
 80019f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f006 ffb1 	bl	8008970 <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001a14:	f000 f83a 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2102      	movs	r1, #2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f007 fa1d 	bl	8008e74 <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a40:	f000 f824 	bl	8001a8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a44:	2302      	movs	r3, #2
 8001a46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a4c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f007 fbcf 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a5c:	f000 f816 	bl	8001a8c <Error_Handler>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3758      	adds	r7, #88	@ 0x58
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a7a:	f004 fb51 	bl	8006120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40012c00 	.word	0x40012c00

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <Error_Handler+0x8>

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_MspInit+0x68>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_MspInit+0x68>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_MspInit+0x68>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_MspInit+0x68>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a11      	ldr	r2, [pc, #68]	@ (8001b00 <HAL_MspInit+0x68>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_MspInit+0x68>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	f06f 0001 	mvn.w	r0, #1
 8001ad6:	f004 ffd2 	bl	8006a7e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_MspInit+0x6c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <HAL_MspInit+0x6c>)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000

08001b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	@ 0x30
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd8 <HAL_InitTick+0xd0>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd8 <HAL_InitTick+0xd0>)
 8001b24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b28:	6193      	str	r3, [r2, #24]
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <HAL_InitTick+0xd0>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b36:	f107 020c 	add.w	r2, r7, #12
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f007 fb09 	bl	8009158 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b46:	f007 faf3 	bl	8009130 <HAL_RCC_GetPCLK2Freq>
 8001b4a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <HAL_InitTick+0xd4>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	0c9b      	lsrs	r3, r3, #18
 8001b56:	3b01      	subs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b5c:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <HAL_InitTick+0xdc>)
 8001b5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b66:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b68:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b80:	4817      	ldr	r0, [pc, #92]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b82:	f007 fbed 	bl	8009360 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d11b      	bne.n	8001bcc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b94:	4812      	ldr	r0, [pc, #72]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b96:	f007 fc8b 	bl	80094b0 <HAL_TIM_Base_Start_IT>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d111      	bne.n	8001bcc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ba8:	2019      	movs	r0, #25
 8001baa:	f004 ff84 	bl	8006ab6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d808      	bhi.n	8001bc6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	2019      	movs	r0, #25
 8001bba:	f004 ff60 	bl	8006a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_InitTick+0xe0>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e002      	b.n	8001bcc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3730      	adds	r7, #48	@ 0x30
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	20000418 	.word	0x20000418
 8001be4:	40012c00 	.word	0x40012c00
 8001be8:	20000028 	.word	0x20000028

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f005 fe25 	bl	8007874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8001c32:	2002      	movs	r0, #2
 8001c34:	f005 fe1e 	bl	8007874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <DMA1_Channel1_IRQHandler+0x10>)
 8001c42:	f005 f9e9 	bl	8007018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000024c 	.word	0x2000024c

08001c50 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <DMA1_Channel6_IRQHandler+0x10>)
 8001c56:	f005 f9df 	bl	8007018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200003d4 	.word	0x200003d4

08001c64 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <DMA1_Channel7_IRQHandler+0x10>)
 8001c6a:	f005 f9d5 	bl	8007018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000390 	.word	0x20000390

08001c78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <TIM1_UP_IRQHandler+0x10>)
 8001c7e:	f007 fc77 	bl	8009570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000418 	.word	0x20000418

08001c8c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <TIM6_IRQHandler+0x10>)
 8001c92:	f007 fc6d 	bl	8009570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000464 	.word	0x20000464

08001ca0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ca4:	4802      	ldr	r0, [pc, #8]	@ (8001cb0 <TIM7_IRQHandler+0x10>)
 8001ca6:	f007 fc63 	bl	8009570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200004ac 	.word	0x200004ac

08001cb4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <DMA2_Channel3_IRQHandler+0x10>)
 8001cba:	f005 f9ad 	bl	8007018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200002a4 	.word	0x200002a4

08001cc8 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <DMA2_Channel4_5_IRQHandler+0x10>)
 8001cce:	f005 f9a3 	bl	8007018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200002e8 	.word	0x200002e8

08001cdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ce4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001ce8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001cf4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001cf8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001cfc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d04:	e000      	b.n	8001d08 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d06:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f9      	beq.n	8001d06 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d12:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <_kill>:

int _kill(int pid, int sig)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d40:	f00b fd14 	bl	800d76c <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2216      	movs	r2, #22
 8001d48:	601a      	str	r2, [r3, #0]
  return -1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_exit>:

void _exit (int status)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffe7 	bl	8001d36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <_exit+0x12>

08001d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d7e:	f3af 8000 	nop.w
 8001d82:	4601      	mov	r1, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf0      	blt.n	8001d7e <_read+0x12>
  }

  return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e009      	b.n	8001dcc <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff8b 	bl	8001cdc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf1      	blt.n	8001db8 <_write+0x12>
  }
  return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_close>:

int _close(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e04:	605a      	str	r2, [r3, #4]
  return 0;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <_isatty>:

int _isatty(int file)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f00b fc7c 	bl	800d76c <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20010000 	.word	0x20010000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	20000460 	.word	0x20000460
 8001ea8:	20002498 	.word	0x20002498

08001eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <MX_TIM6_Init+0x64>)
 8001ec8:	4a15      	ldr	r2, [pc, #84]	@ (8001f20 <MX_TIM6_Init+0x68>)
 8001eca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200 - 1;
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <MX_TIM6_Init+0x64>)
 8001ece:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001ed2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <MX_TIM6_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100- 1;
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <MX_TIM6_Init+0x64>)
 8001edc:	2263      	movs	r2, #99	@ 0x63
 8001ede:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <MX_TIM6_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ee6:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <MX_TIM6_Init+0x64>)
 8001ee8:	f007 fa3a 	bl	8009360 <HAL_TIM_Base_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001ef2:	f7ff fdcb 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <MX_TIM6_Init+0x64>)
 8001f04:	f007 fcce 	bl	80098a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f0e:	f7ff fdbd 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000464 	.word	0x20000464
 8001f20:	40001000 	.word	0x40001000

08001f24 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <MX_TIM7_Init+0x64>)
 8001f34:	4a15      	ldr	r2, [pc, #84]	@ (8001f8c <MX_TIM7_Init+0x68>)
 8001f36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <MX_TIM7_Init+0x64>)
 8001f3a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001f3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_TIM7_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1 ;
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <MX_TIM7_Init+0x64>)
 8001f48:	2263      	movs	r2, #99	@ 0x63
 8001f4a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <MX_TIM7_Init+0x64>)
 8001f4e:	2280      	movs	r2, #128	@ 0x80
 8001f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f52:	480d      	ldr	r0, [pc, #52]	@ (8001f88 <MX_TIM7_Init+0x64>)
 8001f54:	f007 fa04 	bl	8009360 <HAL_TIM_Base_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f5e:	f7ff fd95 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f62:	2320      	movs	r3, #32
 8001f64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4806      	ldr	r0, [pc, #24]	@ (8001f88 <MX_TIM7_Init+0x64>)
 8001f70:	f007 fc98 	bl	80098a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001f7a:	f7ff fd87 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200004ac 	.word	0x200004ac
 8001f8c:	40001400 	.word	0x40001400

08001f90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002008 <HAL_TIM_Base_MspInit+0x78>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d114      	bne.n	8001fcc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a19      	ldr	r2, [pc, #100]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	61d3      	str	r3, [r2, #28]
 8001fae:	4b17      	ldr	r3, [pc, #92]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	2036      	movs	r0, #54	@ 0x36
 8001fc0:	f004 fd5d 	bl	8006a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001fc4:	2036      	movs	r0, #54	@ 0x36
 8001fc6:	f004 fd76 	bl	8006ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001fca:	e018      	b.n	8001ffe <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002010 <HAL_TIM_Base_MspInit+0x80>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d113      	bne.n	8001ffe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	2037      	movs	r0, #55	@ 0x37
 8001ff4:	f004 fd43 	bl	8006a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ff8:	2037      	movs	r0, #55	@ 0x37
 8001ffa:	f004 fd5c 	bl	8006ab6 <HAL_NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40001000 	.word	0x40001000
 800200c:	40021000 	.word	0x40021000
 8002010:	40001400 	.word	0x40001400

08002014 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <MX_UART4_Init+0x4c>)
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <MX_UART4_Init+0x50>)
 800201c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002020:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002024:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002026:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <MX_UART4_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <MX_UART4_Init+0x4c>)
 800203a:	220c      	movs	r2, #12
 800203c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	@ (8002060 <MX_UART4_Init+0x4c>)
 800204c:	f007 fca8 	bl	80099a0 <HAL_UART_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002056:	f7ff fd19 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200004f4 	.word	0x200004f4
 8002064:	40004c00 	.word	0x40004c00

08002068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <HAL_UART_MspInit+0x8c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d131      	bne.n	80020ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002088:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_UART_MspInit+0x90>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	4a1a      	ldr	r2, [pc, #104]	@ (80020f8 <HAL_UART_MspInit+0x90>)
 800208e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002092:	61d3      	str	r3, [r2, #28]
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <HAL_UART_MspInit+0x90>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_UART_MspInit+0x90>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <HAL_UART_MspInit+0x90>)
 80020a6:	f043 0310 	orr.w	r3, r3, #16
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_UART_MspInit+0x90>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4619      	mov	r1, r3
 80020cc:	480b      	ldr	r0, [pc, #44]	@ (80020fc <HAL_UART_MspInit+0x94>)
 80020ce:	f005 fa0d 	bl	80074ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4619      	mov	r1, r3
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <HAL_UART_MspInit+0x94>)
 80020e8:	f005 fa00 	bl	80074ec <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40004c00 	.word	0x40004c00
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40011000 	.word	0x40011000

08002100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002100:	f7ff fed4 	bl	8001eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480b      	ldr	r0, [pc, #44]	@ (8002134 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002106:	490c      	ldr	r1, [pc, #48]	@ (8002138 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002108:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <LoopFillZerobss+0x16>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800211c:	4c09      	ldr	r4, [pc, #36]	@ (8002144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212a:	f00b fb25 	bl	800d778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800212e:	f7ff fc1f 	bl	8001970 <main>
  bx lr
 8002132:	4770      	bx	lr
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800213c:	0800fd20 	.word	0x0800fd20
  ldr r2, =_sbss
 8002140:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002144:	20002494 	.word	0x20002494

08002148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC1_2_IRQHandler>
 800214a:	0000      	movs	r0, r0
 800214c:	0000      	movs	r0, r0
	...

08002150 <subTask>:
float alpha = 0.1f;             // 필터 계수 0.01 ~ 0.1: 부드럽지만 반응 느림 (노이즈 제거에 강함)
float filtered = 0.0f;          // 초기 필터 출력값 반응 빠름, 노이즈도 함께 전달됨
float lpf(float input, float prev_output, float alpha);

void subTask(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
	volatile uint32_t averageAdValue1=0;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
	volatile uint8_t averageCounter=0;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
	float controloutput=0;
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
	float offsetVal=0;
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
	osDelay(2500);  //2.5sec
 800216c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002170:	f007 fe12 	bl	8009d98 <osDelay>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcVal,4);
 8002174:	2204      	movs	r2, #4
 8002176:	49a6      	ldr	r1, [pc, #664]	@ (8002410 <subTask+0x2c0>)
 8002178:	48a6      	ldr	r0, [pc, #664]	@ (8002414 <subTask+0x2c4>)
 800217a:	f004 f8d7 	bl	800632c <HAL_ADC_Start_DMA>

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)&dacVal[0], 1, DAC_ALIGN_12B_R);
 800217e:	2300      	movs	r3, #0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2301      	movs	r3, #1
 8002184:	4aa4      	ldr	r2, [pc, #656]	@ (8002418 <subTask+0x2c8>)
 8002186:	2100      	movs	r1, #0
 8002188:	48a4      	ldr	r0, [pc, #656]	@ (800241c <subTask+0x2cc>)
 800218a:	f004 fcc5 	bl	8006b18 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t*)&dacVal[1], 1, DAC_ALIGN_12B_R);
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2301      	movs	r3, #1
 8002194:	4aa2      	ldr	r2, [pc, #648]	@ (8002420 <subTask+0x2d0>)
 8002196:	2110      	movs	r1, #16
 8002198:	48a0      	ldr	r0, [pc, #640]	@ (800241c <subTask+0x2cc>)
 800219a:	f004 fcbd 	bl	8006b18 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 800219e:	48a1      	ldr	r0, [pc, #644]	@ (8002424 <subTask+0x2d4>)
 80021a0:	f007 f92e 	bl	8009400 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 80021a4:	48a0      	ldr	r0, [pc, #640]	@ (8002428 <subTask+0x2d8>)
 80021a6:	f007 f92b 	bl	8009400 <HAL_TIM_Base_Start>

	for(;;)
	{
		uint16_t compVal1;
		uint16_t compVal2;
		if (IsRunMode == RUN){
 80021aa:	4ba0      	ldr	r3, [pc, #640]	@ (800242c <subTask+0x2dc>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 821d 	bne.w	80025ee <subTask+0x49e>
			if(GetInput(MULTI_TENSION2) == GPIO_PIN_SET){
 80021b4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80021b8:	f003 fdee 	bl	8005d98 <GetInput>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b01      	cmp	r3, #1
 80021c0:	f040 809b 	bne.w	80022fa <subTask+0x1aa>
				//FndDisplay(StepTension,1);
				//DacValue =(StepTension*4096)/24;
				//printf(" MULTI_TENSION2 K_max=%f\r\n",K_max);
				if(averageCounter<8){
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b07      	cmp	r3, #7
 80021ca:	d806      	bhi.n	80021da <subTask+0x8a>
					averageAdValue1 += adcVal[1]; //ad��ȯ
 80021cc:	4b90      	ldr	r3, [pc, #576]	@ (8002410 <subTask+0x2c0>)
 80021ce:	885b      	ldrh	r3, [r3, #2]
 80021d0:	461a      	mov	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e089      	b.n	80022ee <subTask+0x19e>
				}else{
					ConvCalBreakVoltage = averageAdValue1/8;//3.3/4095=0.000805
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fde8 	bl	8000db4 <__aeabi_ui2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a92      	ldr	r2, [pc, #584]	@ (8002430 <subTask+0x2e0>)
 80021e8:	6013      	str	r3, [r2, #0]
					averageAdValue1 = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
					averageCounter  = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
					refVoltage=ConvCalBreakVoltage *0.00854f;
 80021f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002430 <subTask+0x2e0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	498f      	ldr	r1, [pc, #572]	@ (8002434 <subTask+0x2e4>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fe33 	bl	8000e64 <__aeabi_fmul>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	4b8d      	ldr	r3, [pc, #564]	@ (8002438 <subTask+0x2e8>)
 8002204:	601a      	str	r2, [r3, #0]
					compVal1 = refVoltage*10;
 8002206:	4b8c      	ldr	r3, [pc, #560]	@ (8002438 <subTask+0x2e8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	498c      	ldr	r1, [pc, #560]	@ (800243c <subTask+0x2ec>)
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fe29 	bl	8000e64 <__aeabi_fmul>
 8002212:	4603      	mov	r3, r0
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe ffeb 	bl	80011f0 <__aeabi_f2uiz>
 800221a:	4603      	mov	r3, r0
 800221c:	82fb      	strh	r3, [r7, #22]
					compVal2 = K_max*10;
 800221e:	4b88      	ldr	r3, [pc, #544]	@ (8002440 <subTask+0x2f0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4986      	ldr	r1, [pc, #536]	@ (800243c <subTask+0x2ec>)
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fe1d 	bl	8000e64 <__aeabi_fmul>
 800222a:	4603      	mov	r3, r0
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe ffdf 	bl	80011f0 <__aeabi_f2uiz>
 8002232:	4603      	mov	r3, r0
 8002234:	82bb      	strh	r3, [r7, #20]

					if(compVal1 > compVal2){
 8002236:	8afa      	ldrh	r2, [r7, #22]
 8002238:	8abb      	ldrh	r3, [r7, #20]
 800223a:	429a      	cmp	r2, r3
 800223c:	d915      	bls.n	800226a <subTask+0x11a>
						if(compVal1 != (compVal2+1))offsetVal -= 0.1;
 800223e:	8afa      	ldrh	r2, [r7, #22]
 8002240:	8abb      	ldrh	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	429a      	cmp	r2, r3
 8002246:	d029      	beq.n	800229c <subTask+0x14c>
 8002248:	69f8      	ldr	r0, [r7, #28]
 800224a:	f7fe f95d 	bl	8000508 <__aeabi_f2d>
 800224e:	a36c      	add	r3, pc, #432	@ (adr r3, 8002400 <subTask+0x2b0>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fd fff8 	bl	8000248 <__aeabi_dsub>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fca2 	bl	8000ba8 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	61fb      	str	r3, [r7, #28]
 8002268:	e018      	b.n	800229c <subTask+0x14c>
					}else if(compVal1 < compVal2){
 800226a:	8afa      	ldrh	r2, [r7, #22]
 800226c:	8abb      	ldrh	r3, [r7, #20]
 800226e:	429a      	cmp	r2, r3
 8002270:	d214      	bcs.n	800229c <subTask+0x14c>
						if(compVal1 != (compVal2-1))offsetVal += 0.1;
 8002272:	8afa      	ldrh	r2, [r7, #22]
 8002274:	8abb      	ldrh	r3, [r7, #20]
 8002276:	3b01      	subs	r3, #1
 8002278:	429a      	cmp	r2, r3
 800227a:	d00f      	beq.n	800229c <subTask+0x14c>
 800227c:	69f8      	ldr	r0, [r7, #28]
 800227e:	f7fe f943 	bl	8000508 <__aeabi_f2d>
 8002282:	a35f      	add	r3, pc, #380	@ (adr r3, 8002400 <subTask+0x2b0>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fd ffe0 	bl	800024c <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fc88 	bl	8000ba8 <__aeabi_d2f>
 8002298:	4603      	mov	r3, r0
 800229a:	61fb      	str	r3, [r7, #28]
					}
					if(offsetVal>4)offsetVal=4;
 800229c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80022a0:	69f8      	ldr	r0, [r7, #28]
 80022a2:	f7fe ff9b 	bl	80011dc <__aeabi_fcmpgt>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <subTask+0x164>
 80022ac:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e017      	b.n	80022e4 <subTask+0x194>
					else DacValue = (uint32_t) ((K_max+offsetVal)/0.0072);
 80022b4:	4b62      	ldr	r3, [pc, #392]	@ (8002440 <subTask+0x2f0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69f9      	ldr	r1, [r7, #28]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fcca 	bl	8000c54 <__addsf3>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f920 	bl	8000508 <__aeabi_f2d>
 80022c8:	a34f      	add	r3, pc, #316	@ (adr r3, 8002408 <subTask+0x2b8>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fe fa9d 	bl	800080c <__aeabi_ddiv>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fc45 	bl	8000b68 <__aeabi_d2uiz>
 80022de:	4603      	mov	r3, r0
 80022e0:	4a58      	ldr	r2, [pc, #352]	@ (8002444 <subTask+0x2f4>)
 80022e2:	6013      	str	r3, [r2, #0]
					dacVal[0] = DacValue;
 80022e4:	4b57      	ldr	r3, [pc, #348]	@ (8002444 <subTask+0x2f4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002418 <subTask+0x2c8>)
 80022ec:	801a      	strh	r2, [r3, #0]
				}
				averageCounter++;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e165      	b.n	80025c6 <subTask+0x476>
			}else if(GetInput(MULTI_TENSION)== GPIO_PIN_SET){
 80022fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022fe:	f003 fd4b 	bl	8005d98 <GetInput>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 80c4 	bne.w	8002492 <subTask+0x342>
				//FndDisplay(StepTension,1);
				//DacValue =(StepTension*4096)/24;
				//printf(" MULTI_TENSION StepTension=%f\r\n",StepTension);
				if(averageCounter<8)
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b07      	cmp	r3, #7
 8002310:	d806      	bhi.n	8002320 <subTask+0x1d0>
				{
					averageAdValue1 += adcVal[1]; //ad��ȯ
 8002312:	4b3f      	ldr	r3, [pc, #252]	@ (8002410 <subTask+0x2c0>)
 8002314:	885b      	ldrh	r3, [r3, #2]
 8002316:	461a      	mov	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	e0b2      	b.n	8002486 <subTask+0x336>
				}else{
					ConvCalBreakVoltage = averageAdValue1/8;//3.3/4095=0.000805
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fd45 	bl	8000db4 <__aeabi_ui2f>
 800232a:	4603      	mov	r3, r0
 800232c:	4a40      	ldr	r2, [pc, #256]	@ (8002430 <subTask+0x2e0>)
 800232e:	6013      	str	r3, [r2, #0]
					averageAdValue1 = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
					averageCounter  = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
					refVoltage=ConvCalBreakVoltage *0.00854f;
 8002338:	4b3d      	ldr	r3, [pc, #244]	@ (8002430 <subTask+0x2e0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	493d      	ldr	r1, [pc, #244]	@ (8002434 <subTask+0x2e4>)
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fd90 	bl	8000e64 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b3b      	ldr	r3, [pc, #236]	@ (8002438 <subTask+0x2e8>)
 800234a:	601a      	str	r2, [r3, #0]
					compVal1 = refVoltage*10;
 800234c:	4b3a      	ldr	r3, [pc, #232]	@ (8002438 <subTask+0x2e8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	493a      	ldr	r1, [pc, #232]	@ (800243c <subTask+0x2ec>)
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fd86 	bl	8000e64 <__aeabi_fmul>
 8002358:	4603      	mov	r3, r0
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe ff48 	bl	80011f0 <__aeabi_f2uiz>
 8002360:	4603      	mov	r3, r0
 8002362:	82fb      	strh	r3, [r7, #22]
					compVal2 = StepTension*10;
 8002364:	4b38      	ldr	r3, [pc, #224]	@ (8002448 <subTask+0x2f8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4934      	ldr	r1, [pc, #208]	@ (800243c <subTask+0x2ec>)
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fd7a 	bl	8000e64 <__aeabi_fmul>
 8002370:	4603      	mov	r3, r0
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe ff3c 	bl	80011f0 <__aeabi_f2uiz>
 8002378:	4603      	mov	r3, r0
 800237a:	82bb      	strh	r3, [r7, #20]

					if(compVal1 > compVal2){
 800237c:	8afa      	ldrh	r2, [r7, #22]
 800237e:	8abb      	ldrh	r3, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	d915      	bls.n	80023b0 <subTask+0x260>
						if(compVal1 != (compVal2+1))offsetVal -= 0.1;
 8002384:	8afa      	ldrh	r2, [r7, #22]
 8002386:	8abb      	ldrh	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	429a      	cmp	r2, r3
 800238c:	d029      	beq.n	80023e2 <subTask+0x292>
 800238e:	69f8      	ldr	r0, [r7, #28]
 8002390:	f7fe f8ba 	bl	8000508 <__aeabi_f2d>
 8002394:	a31a      	add	r3, pc, #104	@ (adr r3, 8002400 <subTask+0x2b0>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f7fd ff55 	bl	8000248 <__aeabi_dsub>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fbff 	bl	8000ba8 <__aeabi_d2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e018      	b.n	80023e2 <subTask+0x292>
					}else if(compVal1 < compVal2){
 80023b0:	8afa      	ldrh	r2, [r7, #22]
 80023b2:	8abb      	ldrh	r3, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d214      	bcs.n	80023e2 <subTask+0x292>
						if(compVal1 != (compVal2-1))offsetVal += 0.1;
 80023b8:	8afa      	ldrh	r2, [r7, #22]
 80023ba:	8abb      	ldrh	r3, [r7, #20]
 80023bc:	3b01      	subs	r3, #1
 80023be:	429a      	cmp	r2, r3
 80023c0:	d00f      	beq.n	80023e2 <subTask+0x292>
 80023c2:	69f8      	ldr	r0, [r7, #28]
 80023c4:	f7fe f8a0 	bl	8000508 <__aeabi_f2d>
 80023c8:	a30d      	add	r3, pc, #52	@ (adr r3, 8002400 <subTask+0x2b0>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fd ff3d 	bl	800024c <__adddf3>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fbe5 	bl	8000ba8 <__aeabi_d2f>
 80023de:	4603      	mov	r3, r0
 80023e0:	61fb      	str	r3, [r7, #28]
					}
					if(offsetVal>4)offsetVal=4;
 80023e2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80023e6:	69f8      	ldr	r0, [r7, #28]
 80023e8:	f7fe fef8 	bl	80011dc <__aeabi_fcmpgt>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d02c      	beq.n	800244c <subTask+0x2fc>
 80023f2:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	e040      	b.n	800247c <subTask+0x32c>
 80023fa:	bf00      	nop
 80023fc:	f3af 8000 	nop.w
 8002400:	9999999a 	.word	0x9999999a
 8002404:	3fb99999 	.word	0x3fb99999
 8002408:	487fcb92 	.word	0x487fcb92
 800240c:	3f7d7dbf 	.word	0x3f7d7dbf
 8002410:	2000053c 	.word	0x2000053c
 8002414:	2000021c 	.word	0x2000021c
 8002418:	20000004 	.word	0x20000004
 800241c:	20000290 	.word	0x20000290
 8002420:	20000006 	.word	0x20000006
 8002424:	20000464 	.word	0x20000464
 8002428:	200004ac 	.word	0x200004ac
 800242c:	20000548 	.word	0x20000548
 8002430:	20000598 	.word	0x20000598
 8002434:	3c0beb5b 	.word	0x3c0beb5b
 8002438:	20000580 	.word	0x20000580
 800243c:	41200000 	.word	0x41200000
 8002440:	200005b4 	.word	0x200005b4
 8002444:	20000590 	.word	0x20000590
 8002448:	200005b8 	.word	0x200005b8
					else DacValue = (uint32_t) ((StepTension+offsetVal)/0.0072);
 800244c:	4b6e      	ldr	r3, [pc, #440]	@ (8002608 <subTask+0x4b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69f9      	ldr	r1, [r7, #28]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fbfe 	bl	8000c54 <__addsf3>
 8002458:	4603      	mov	r3, r0
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f854 	bl	8000508 <__aeabi_f2d>
 8002460:	a365      	add	r3, pc, #404	@ (adr r3, 80025f8 <subTask+0x4a8>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe f9d1 	bl	800080c <__aeabi_ddiv>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	f7fe fb79 	bl	8000b68 <__aeabi_d2uiz>
 8002476:	4603      	mov	r3, r0
 8002478:	4a64      	ldr	r2, [pc, #400]	@ (800260c <subTask+0x4bc>)
 800247a:	6013      	str	r3, [r2, #0]
					dacVal[0] = DacValue;
 800247c:	4b63      	ldr	r3, [pc, #396]	@ (800260c <subTask+0x4bc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29a      	uxth	r2, r3
 8002482:	4b63      	ldr	r3, [pc, #396]	@ (8002610 <subTask+0x4c0>)
 8002484:	801a      	strh	r2, [r3, #0]
				}
				averageCounter++;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3301      	adds	r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e099      	b.n	80025c6 <subTask+0x476>
			}else{
				if(averageCounter<8){
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b07      	cmp	r3, #7
 8002498:	d806      	bhi.n	80024a8 <subTask+0x358>
					averageAdValue1 += adcVal[1]; //ad��ȯ
 800249a:	4b5e      	ldr	r3, [pc, #376]	@ (8002614 <subTask+0x4c4>)
 800249c:	885b      	ldrh	r3, [r3, #2]
 800249e:	461a      	mov	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	e089      	b.n	80025bc <subTask+0x46c>
				}else{
					ConvCalBreakVoltage = averageAdValue1/8;//3.3/4095=0.000805
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	08db      	lsrs	r3, r3, #3
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fc81 	bl	8000db4 <__aeabi_ui2f>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a58      	ldr	r2, [pc, #352]	@ (8002618 <subTask+0x4c8>)
 80024b6:	6013      	str	r3, [r2, #0]
					averageAdValue1 = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
					averageCounter  = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
					refVoltage=ConvCalBreakVoltage *0.00854f;
 80024c0:	4b55      	ldr	r3, [pc, #340]	@ (8002618 <subTask+0x4c8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4955      	ldr	r1, [pc, #340]	@ (800261c <subTask+0x4cc>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fccc 	bl	8000e64 <__aeabi_fmul>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <subTask+0x4d0>)
 80024d2:	601a      	str	r2, [r3, #0]
					compVal1 = refVoltage*10;
 80024d4:	4b52      	ldr	r3, [pc, #328]	@ (8002620 <subTask+0x4d0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4952      	ldr	r1, [pc, #328]	@ (8002624 <subTask+0x4d4>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fcc2 	bl	8000e64 <__aeabi_fmul>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fe84 	bl	80011f0 <__aeabi_f2uiz>
 80024e8:	4603      	mov	r3, r0
 80024ea:	82fb      	strh	r3, [r7, #22]
					compVal2 = fadcVal*10;
 80024ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002628 <subTask+0x4d8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	494c      	ldr	r1, [pc, #304]	@ (8002624 <subTask+0x4d4>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fcb6 	bl	8000e64 <__aeabi_fmul>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fe78 	bl	80011f0 <__aeabi_f2uiz>
 8002500:	4603      	mov	r3, r0
 8002502:	82bb      	strh	r3, [r7, #20]

					if(compVal1 > compVal2){
 8002504:	8afa      	ldrh	r2, [r7, #22]
 8002506:	8abb      	ldrh	r3, [r7, #20]
 8002508:	429a      	cmp	r2, r3
 800250a:	d915      	bls.n	8002538 <subTask+0x3e8>
						if(compVal1 != (compVal2+1))offsetVal -= 0.1;
 800250c:	8afa      	ldrh	r2, [r7, #22]
 800250e:	8abb      	ldrh	r3, [r7, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	429a      	cmp	r2, r3
 8002514:	d029      	beq.n	800256a <subTask+0x41a>
 8002516:	69f8      	ldr	r0, [r7, #28]
 8002518:	f7fd fff6 	bl	8000508 <__aeabi_f2d>
 800251c:	a338      	add	r3, pc, #224	@ (adr r3, 8002600 <subTask+0x4b0>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fd fe91 	bl	8000248 <__aeabi_dsub>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe fb3b 	bl	8000ba8 <__aeabi_d2f>
 8002532:	4603      	mov	r3, r0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e018      	b.n	800256a <subTask+0x41a>
					}else if(compVal1 < compVal2){
 8002538:	8afa      	ldrh	r2, [r7, #22]
 800253a:	8abb      	ldrh	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	d214      	bcs.n	800256a <subTask+0x41a>
						if(compVal1 != (compVal2-1))offsetVal += 0.1;
 8002540:	8afa      	ldrh	r2, [r7, #22]
 8002542:	8abb      	ldrh	r3, [r7, #20]
 8002544:	3b01      	subs	r3, #1
 8002546:	429a      	cmp	r2, r3
 8002548:	d00f      	beq.n	800256a <subTask+0x41a>
 800254a:	69f8      	ldr	r0, [r7, #28]
 800254c:	f7fd ffdc 	bl	8000508 <__aeabi_f2d>
 8002550:	a32b      	add	r3, pc, #172	@ (adr r3, 8002600 <subTask+0x4b0>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fd fe79 	bl	800024c <__adddf3>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe fb21 	bl	8000ba8 <__aeabi_d2f>
 8002566:	4603      	mov	r3, r0
 8002568:	61fb      	str	r3, [r7, #28]
					}
					if(offsetVal>4)offsetVal=4;
 800256a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800256e:	69f8      	ldr	r0, [r7, #28]
 8002570:	f7fe fe34 	bl	80011dc <__aeabi_fcmpgt>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <subTask+0x432>
 800257a:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	e017      	b.n	80025b2 <subTask+0x462>
					else DacValue = (uint32_t) ((fadcVal+offsetVal)/0.0072);
 8002582:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <subTask+0x4d8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69f9      	ldr	r1, [r7, #28]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fb63 	bl	8000c54 <__addsf3>
 800258e:	4603      	mov	r3, r0
 8002590:	4618      	mov	r0, r3
 8002592:	f7fd ffb9 	bl	8000508 <__aeabi_f2d>
 8002596:	a318      	add	r3, pc, #96	@ (adr r3, 80025f8 <subTask+0x4a8>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f936 	bl	800080c <__aeabi_ddiv>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7fe fade 	bl	8000b68 <__aeabi_d2uiz>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a17      	ldr	r2, [pc, #92]	@ (800260c <subTask+0x4bc>)
 80025b0:	6013      	str	r3, [r2, #0]
					dacVal[0] = DacValue;
 80025b2:	4b16      	ldr	r3, [pc, #88]	@ (800260c <subTask+0x4bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <subTask+0x4c0>)
 80025ba:	801a      	strh	r2, [r3, #0]
				}
				averageCounter++;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	73fb      	strb	r3, [r7, #15]
			}
			fAvrAdc_PotenionVal = ((float)adcVal[3]/1024)*360;
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <subTask+0x4c4>)
 80025c8:	88db      	ldrh	r3, [r3, #6]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fbf2 	bl	8000db4 <__aeabi_ui2f>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fcf8 	bl	8000fcc <__aeabi_fdiv>
 80025dc:	4603      	mov	r3, r0
 80025de:	4913      	ldr	r1, [pc, #76]	@ (800262c <subTask+0x4dc>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fc3f 	bl	8000e64 <__aeabi_fmul>
 80025e6:	4603      	mov	r3, r0
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <subTask+0x4e0>)
 80025ec:	601a      	str	r2, [r3, #0]
		}
		osDelay(10);
 80025ee:	200a      	movs	r0, #10
 80025f0:	f007 fbd2 	bl	8009d98 <osDelay>
	{
 80025f4:	e5d9      	b.n	80021aa <subTask+0x5a>
 80025f6:	bf00      	nop
 80025f8:	487fcb92 	.word	0x487fcb92
 80025fc:	3f7d7dbf 	.word	0x3f7d7dbf
 8002600:	9999999a 	.word	0x9999999a
 8002604:	3fb99999 	.word	0x3fb99999
 8002608:	200005b8 	.word	0x200005b8
 800260c:	20000590 	.word	0x20000590
 8002610:	20000004 	.word	0x20000004
 8002614:	2000053c 	.word	0x2000053c
 8002618:	20000598 	.word	0x20000598
 800261c:	3c0beb5b 	.word	0x3c0beb5b
 8002620:	20000580 	.word	0x20000580
 8002624:	41200000 	.word	0x41200000
 8002628:	200005c0 	.word	0x200005c0
 800262c:	43b40000 	.word	0x43b40000
 8002630:	200005c8 	.word	0x200005c8
 8002634:	00000000 	.word	0x00000000

08002638 <mainTask>:

}


void mainTask(void *argument)
{
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	int16_t scanCounter=0,resetButtonDelayCount=0,offsetCount=0;
 8002640:	2300      	movs	r3, #0
 8002642:	837b      	strh	r3, [r7, #26]
 8002644:	2300      	movs	r3, #0
 8002646:	83fb      	strh	r3, [r7, #30]
 8002648:	2300      	movs	r3, #0
 800264a:	833b      	strh	r3, [r7, #24]
	int8_t i;
	volatile float faverageAdValue0,OffSetValue,SpanPvalue,SpanEvalue;

	IsRunMode=RUN;
 800264c:	4ba0      	ldr	r3, [pc, #640]	@ (80028d0 <mainTask+0x298>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
	osDelay(2500);  //2.5sec
 8002652:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002656:	f007 fb9f 	bl	8009d98 <osDelay>
	HAL_GPIO_WritePin(FND_nOE_GPIO_Port,FND_nOE_Pin, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	2110      	movs	r1, #16
 800265e:	489d      	ldr	r0, [pc, #628]	@ (80028d4 <mainTask+0x29c>)
 8002660:	f005 f8ef 	bl	8007842 <HAL_GPIO_WritePin>
	MX_I2C1_Init();
 8002664:	f7ff f8c4 	bl	80017f0 <MX_I2C1_Init>
	//ResetParameter(0);
	LoadParameter(0);
 8002668:	2000      	movs	r0, #0
 800266a:	f001 ffab 	bl	80045c4 <LoadParameter>
	for(;;)
	{
		PannelLEdFlicker(RUNNING,ON);
 800266e:	2101      	movs	r1, #1
 8002670:	2002      	movs	r0, #2
 8002672:	f003 faa9 	bl	8005bc8 <PannelLEdFlicker>
		keyValue=GetButtonStatus();
 8002676:	f003 fb73 	bl	8005d60 <GetButtonStatus>
 800267a:	4603      	mov	r3, r0
 800267c:	b25a      	sxtb	r2, r3
 800267e:	4b96      	ldr	r3, [pc, #600]	@ (80028d8 <mainTask+0x2a0>)
 8002680:	701a      	strb	r2, [r3, #0]
		//printf(" potension AD value =%ld\n",adcVal[3]);
		if ((keyValue == KEY_RUNEDIT) && ( IsRunMode==RUN) && ( IsKeyStatus==KeyInitStatus) ){
 8002682:	4b95      	ldr	r3, [pc, #596]	@ (80028d8 <mainTask+0x2a0>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b25b      	sxtb	r3, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d118      	bne.n	80026be <mainTask+0x86>
 800268c:	4b90      	ldr	r3, [pc, #576]	@ (80028d0 <mainTask+0x298>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d114      	bne.n	80026be <mainTask+0x86>
 8002694:	4b91      	ldr	r3, [pc, #580]	@ (80028dc <mainTask+0x2a4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d110      	bne.n	80026be <mainTask+0x86>
			//printf(" Mode is Edit\n");
			IsRunMode 		= EDIT;
 800269c:	4b8c      	ldr	r3, [pc, #560]	@ (80028d0 <mainTask+0x298>)
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
			IsKeyStatus 	= KeyDownStatus;
 80026a2:	4b8e      	ldr	r3, [pc, #568]	@ (80028dc <mainTask+0x2a4>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
			IsFndFlicker	=	FLICKER_OFF;
 80026a8:	4b8d      	ldr	r3, [pc, #564]	@ (80028e0 <mainTask+0x2a8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
			FndDisplayString(EDIT);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f003 f812 	bl	80056d8 <FndDisplayString>
			osDelay(500);
 80026b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026b8:	f007 fb6e 	bl	8009d98 <osDelay>
 80026bc:	e100      	b.n	80028c0 <mainTask+0x288>
		}else if ((keyValue == KEY_RUNEDIT) && (IsRunMode==EDIT) && (IsKeyStatus==KeyInitStatus)){
 80026be:	4b86      	ldr	r3, [pc, #536]	@ (80028d8 <mainTask+0x2a0>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d115      	bne.n	80026f4 <mainTask+0xbc>
 80026c8:	4b81      	ldr	r3, [pc, #516]	@ (80028d0 <mainTask+0x298>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d111      	bne.n	80026f4 <mainTask+0xbc>
 80026d0:	4b82      	ldr	r3, [pc, #520]	@ (80028dc <mainTask+0x2a4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <mainTask+0xbc>
			//printf(" Mode is Run\n");
			IsRunMode 	= RUN;
 80026d8:	4b7d      	ldr	r3, [pc, #500]	@ (80028d0 <mainTask+0x298>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
			IsKeyStatus = KeyDownStatus;
 80026de:	4b7f      	ldr	r3, [pc, #508]	@ (80028dc <mainTask+0x2a4>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
			FndDisplayString(RUN);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f002 fff7 	bl	80056d8 <FndDisplayString>
			osDelay(500);
 80026ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026ee:	f007 fb53 	bl	8009d98 <osDelay>
 80026f2:	e0e5      	b.n	80028c0 <mainTask+0x288>
		}else if (keyValue == ENCODER_BUTTON){
 80026f4:	4b78      	ldr	r3, [pc, #480]	@ (80028d8 <mainTask+0x2a0>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 80b0 	bne.w	8002860 <mainTask+0x228>
			FndAllOff();
 8002700:	f003 f9f4 	bl	8005aec <FndAllOff>
			EncoderButtonDelayCount++;
 8002704:	4b77      	ldr	r3, [pc, #476]	@ (80028e4 <mainTask+0x2ac>)
 8002706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270a:	b29b      	uxth	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	b21a      	sxth	r2, r3
 8002712:	4b74      	ldr	r3, [pc, #464]	@ (80028e4 <mainTask+0x2ac>)
 8002714:	801a      	strh	r2, [r3, #0]
			if(EncoderButtonDelayCount>10){
 8002716:	4b73      	ldr	r3, [pc, #460]	@ (80028e4 <mainTask+0x2ac>)
 8002718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271c:	2b0a      	cmp	r3, #10
 800271e:	f340 80cf 	ble.w	80028c0 <mainTask+0x288>
				osDelay(1000);
 8002722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002726:	f007 fb37 	bl	8009d98 <osDelay>
				IsRunMode=CAL_ADJUST;
 800272a:	4b69      	ldr	r3, [pc, #420]	@ (80028d0 <mainTask+0x298>)
 800272c:	2203      	movs	r2, #3
 800272e:	701a      	strb	r2, [r3, #0]
				//printf(" Mode is cal_Adjust\n");

				averageAdValue0 =0;
 8002730:	4b6d      	ldr	r3, [pc, #436]	@ (80028e8 <mainTask+0x2b0>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
				osDelay(200);
 8002736:	20c8      	movs	r0, #200	@ 0xc8
 8002738:	f007 fb2e 	bl	8009d98 <osDelay>
				FndIncrementBar(1);
 800273c:	2001      	movs	r0, #1
 800273e:	f003 f93f 	bl	80059c0 <FndIncrementBar>
				memset(ADarray,0,sizeof(ADarray));
 8002742:	2210      	movs	r2, #16
 8002744:	2100      	movs	r1, #0
 8002746:	4869      	ldr	r0, [pc, #420]	@ (80028ec <mainTask+0x2b4>)
 8002748:	f00a ffaa 	bl	800d6a0 <memset>
				for(i=0;i<ArraySize;i++){
 800274c:	2300      	movs	r3, #0
 800274e:	777b      	strb	r3, [r7, #29]
 8002750:	e00f      	b.n	8002772 <mainTask+0x13a>
					ADarray[i]=adcVal[0]; //ad��ȯ
 8002752:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002756:	4a66      	ldr	r2, [pc, #408]	@ (80028f0 <mainTask+0x2b8>)
 8002758:	8811      	ldrh	r1, [r2, #0]
 800275a:	4a64      	ldr	r2, [pc, #400]	@ (80028ec <mainTask+0x2b4>)
 800275c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					osDelay(10);
 8002760:	200a      	movs	r0, #10
 8002762:	f007 fb19 	bl	8009d98 <osDelay>
				for(i=0;i<ArraySize;i++){
 8002766:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	777b      	strb	r3, [r7, #29]
 8002772:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002776:	2b07      	cmp	r3, #7
 8002778:	ddeb      	ble.n	8002752 <mainTask+0x11a>
				}
				max=ADarray[0];
 800277a:	4b5c      	ldr	r3, [pc, #368]	@ (80028ec <mainTask+0x2b4>)
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	4b5d      	ldr	r3, [pc, #372]	@ (80028f4 <mainTask+0x2bc>)
 8002780:	801a      	strh	r2, [r3, #0]
				min=ADarray[0];
 8002782:	4b5a      	ldr	r3, [pc, #360]	@ (80028ec <mainTask+0x2b4>)
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	4b5c      	ldr	r3, [pc, #368]	@ (80028f8 <mainTask+0x2c0>)
 8002788:	801a      	strh	r2, [r3, #0]
				icnt=0;
 800278a:	4b5c      	ldr	r3, [pc, #368]	@ (80028fc <mainTask+0x2c4>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
				for(i=0;i<ArraySize;i++){
 8002790:	2300      	movs	r3, #0
 8002792:	777b      	strb	r3, [r7, #29]
 8002794:	e038      	b.n	8002808 <mainTask+0x1d0>
					if(ADarray[i]>max){
 8002796:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800279a:	4a54      	ldr	r2, [pc, #336]	@ (80028ec <mainTask+0x2b4>)
 800279c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80027a0:	4b54      	ldr	r3, [pc, #336]	@ (80028f4 <mainTask+0x2bc>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d907      	bls.n	80027b8 <mainTask+0x180>
						max=ADarray[i];
 80027a8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80027ac:	4a4f      	ldr	r2, [pc, #316]	@ (80028ec <mainTask+0x2b4>)
 80027ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80027b2:	4b50      	ldr	r3, [pc, #320]	@ (80028f4 <mainTask+0x2bc>)
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	e021      	b.n	80027fc <mainTask+0x1c4>
					}else if(ADarray[i]<min){
 80027b8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80027bc:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <mainTask+0x2b4>)
 80027be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80027c2:	4b4d      	ldr	r3, [pc, #308]	@ (80028f8 <mainTask+0x2c0>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d207      	bcs.n	80027da <mainTask+0x1a2>
						min=ADarray[i];
 80027ca:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80027ce:	4a47      	ldr	r2, [pc, #284]	@ (80028ec <mainTask+0x2b4>)
 80027d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80027d4:	4b48      	ldr	r3, [pc, #288]	@ (80028f8 <mainTask+0x2c0>)
 80027d6:	801a      	strh	r2, [r3, #0]
 80027d8:	e010      	b.n	80027fc <mainTask+0x1c4>
					}else{
						averageAdValue0+=ADarray[i];
 80027da:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80027de:	4a43      	ldr	r2, [pc, #268]	@ (80028ec <mainTask+0x2b4>)
 80027e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b40      	ldr	r3, [pc, #256]	@ (80028e8 <mainTask+0x2b0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a3e      	ldr	r2, [pc, #248]	@ (80028e8 <mainTask+0x2b0>)
 80027ee:	6013      	str	r3, [r2, #0]
						icnt++;
 80027f0:	4b42      	ldr	r3, [pc, #264]	@ (80028fc <mainTask+0x2c4>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b40      	ldr	r3, [pc, #256]	@ (80028fc <mainTask+0x2c4>)
 80027fa:	701a      	strb	r2, [r3, #0]
				for(i=0;i<ArraySize;i++){
 80027fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	777b      	strb	r3, [r7, #29]
 8002808:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800280c:	2b07      	cmp	r3, #7
 800280e:	ddc2      	ble.n	8002796 <mainTask+0x15e>
					}
				}

				averageAdValue0=averageAdValue0 /icnt;
 8002810:	4b35      	ldr	r3, [pc, #212]	@ (80028e8 <mainTask+0x2b0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a39      	ldr	r2, [pc, #228]	@ (80028fc <mainTask+0x2c4>)
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	fbb3 f3f2 	udiv	r3, r3, r2
 800281c:	4a32      	ldr	r2, [pc, #200]	@ (80028e8 <mainTask+0x2b0>)
 800281e:	6013      	str	r3, [r2, #0]
				LoadCell_OffSetValue=(uint16_t)averageAdValue0;
 8002820:	4b31      	ldr	r3, [pc, #196]	@ (80028e8 <mainTask+0x2b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b36      	ldr	r3, [pc, #216]	@ (8002900 <mainTask+0x2c8>)
 8002828:	801a      	strh	r2, [r3, #0]

				osDelay(200);
 800282a:	20c8      	movs	r0, #200	@ 0xc8
 800282c:	f007 fab4 	bl	8009d98 <osDelay>
				FndIncrementBar(2);
 8002830:	2002      	movs	r0, #2
 8002832:	f003 f8c5 	bl	80059c0 <FndIncrementBar>
				//printf(" LoadCell_OffSetValue=%ld\n",(unsigned long)averageAdValue0);
				DataManager(CmdWriteEeprom,CurrentModel,PAR_LOADCELL_OFFSET);
 8002836:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <mainTask+0x2cc>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	220b      	movs	r2, #11
 800283e:	4619      	mov	r1, r3
 8002840:	2000      	movs	r0, #0
 8002842:	f001 f9f5 	bl	8003c30 <DataManager>

				EncoderButtonDelayCount=0;
 8002846:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <mainTask+0x2ac>)
 8002848:	2200      	movs	r2, #0
 800284a:	801a      	strh	r2, [r3, #0]
				osDelay(200);
 800284c:	20c8      	movs	r0, #200	@ 0xc8
 800284e:	f007 faa3 	bl	8009d98 <osDelay>
				FndIncrementBar(3);
 8002852:	2003      	movs	r0, #3
 8002854:	f003 f8b4 	bl	80059c0 <FndIncrementBar>
				IsRunMode=RUN;
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <mainTask+0x298>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e02f      	b.n	80028c0 <mainTask+0x288>
			}
		}else if (keyValue == KEY_RESET){
 8002860:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <mainTask+0x2a0>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b25b      	sxtb	r3, r3
 8002866:	2b06      	cmp	r3, #6
 8002868:	d125      	bne.n	80028b6 <mainTask+0x27e>
			printf(" Key is Reset\n");
 800286a:	4827      	ldr	r0, [pc, #156]	@ (8002908 <mainTask+0x2d0>)
 800286c:	f00a fe16 	bl	800d49c <puts>
			resetButtonDelayCount++;
 8002870:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002874:	b29b      	uxth	r3, r3
 8002876:	3301      	adds	r3, #1
 8002878:	b29b      	uxth	r3, r3
 800287a:	83fb      	strh	r3, [r7, #30]
			if(resetButtonDelayCount>20){
 800287c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002880:	2b14      	cmp	r3, #20
 8002882:	dd1d      	ble.n	80028c0 <mainTask+0x288>
				//				printf(" Key is Reset Entry\n");
				IsFndFlicker=FLICKER_ON;
 8002884:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <mainTask+0x2a8>)
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
				ResetParameter(CurrentModel);
 800288a:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <mainTask+0x2cc>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	f001 ff8b 	bl	80047ac <ResetParameter>
				LoadParameter(CurrentModel);
 8002896:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <mainTask+0x2cc>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	4618      	mov	r0, r3
 800289e:	f001 fe91 	bl	80045c4 <LoadParameter>
				resetButtonDelayCount=0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	83fb      	strh	r3, [r7, #30]
				osDelay(500);
 80028a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028aa:	f007 fa75 	bl	8009d98 <osDelay>
				IsFndFlicker=FLICKER_OFF;
 80028ae:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <mainTask+0x2a8>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e004      	b.n	80028c0 <mainTask+0x288>
			}
		}else{
			resetButtonDelayCount=0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	83fb      	strh	r3, [r7, #30]
			EncoderButtonDelayCount=0;
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <mainTask+0x2ac>)
 80028bc:	2200      	movs	r2, #0
 80028be:	801a      	strh	r2, [r3, #0]
		}


		/* Flicker On/Off  */
		if(IsFndFlicker == FLICKER_ON){
 80028c0:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <mainTask+0x2a8>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d121      	bne.n	800290c <mainTask+0x2d4>
			FndFlicker(ON);
 80028c8:	2001      	movs	r0, #1
 80028ca:	f003 f959 	bl	8005b80 <FndFlicker>
 80028ce:	e020      	b.n	8002912 <mainTask+0x2da>
 80028d0:	20000548 	.word	0x20000548
 80028d4:	40011800 	.word	0x40011800
 80028d8:	20000584 	.word	0x20000584
 80028dc:	20000546 	.word	0x20000546
 80028e0:	20000545 	.word	0x20000545
 80028e4:	200005f8 	.word	0x200005f8
 80028e8:	200005dc 	.word	0x200005dc
 80028ec:	200005e8 	.word	0x200005e8
 80028f0:	2000053c 	.word	0x2000053c
 80028f4:	200005e2 	.word	0x200005e2
 80028f8:	200005e4 	.word	0x200005e4
 80028fc:	200005e0 	.word	0x200005e0
 8002900:	200005d0 	.word	0x200005d0
 8002904:	200005cc 	.word	0x200005cc
 8002908:	0800f890 	.word	0x0800f890
		}else{
			FndFlicker(OFF);
 800290c:	2000      	movs	r0, #0
 800290e:	f003 f937 	bl	8005b80 <FndFlicker>
		}


		/////////////////////////////////////////////////////////////////////////////////////////////
		if (IsRunMode == RUN){
 8002912:	4ba3      	ldr	r3, [pc, #652]	@ (8002ba0 <mainTask+0x568>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 8236 	bne.w	8002d88 <mainTask+0x750>
			SpanPvalue=(500.0f-100.0f)/(float)(LoadCell_SpanValueHigh-LoadCell_SpanValueLow);  //��ʰ�
 800291c:	4ba1      	ldr	r3, [pc, #644]	@ (8002ba4 <mainTask+0x56c>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	4ba0      	ldr	r3, [pc, #640]	@ (8002ba8 <mainTask+0x570>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fa45 	bl	8000dbc <__aeabi_i2f>
 8002932:	4603      	mov	r3, r0
 8002934:	4619      	mov	r1, r3
 8002936:	489d      	ldr	r0, [pc, #628]	@ (8002bac <mainTask+0x574>)
 8002938:	f7fe fb48 	bl	8000fcc <__aeabi_fdiv>
 800293c:	4603      	mov	r3, r0
 800293e:	60fb      	str	r3, [r7, #12]
			SpanEvalue=100-(LoadCell_SpanValueLow* SpanPvalue);// 100g�� ���� ����
 8002940:	4b99      	ldr	r3, [pc, #612]	@ (8002ba8 <mainTask+0x570>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fa38 	bl	8000dbc <__aeabi_i2f>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f7fe fa86 	bl	8000e64 <__aeabi_fmul>
 8002958:	4603      	mov	r3, r0
 800295a:	4619      	mov	r1, r3
 800295c:	4894      	ldr	r0, [pc, #592]	@ (8002bb0 <mainTask+0x578>)
 800295e:	f7fe f977 	bl	8000c50 <__aeabi_fsub>
 8002962:	4603      	mov	r3, r0
 8002964:	60bb      	str	r3, [r7, #8]

			currentTick= HAL_GetTick();
 8002966:	f003 fbed 	bl	8006144 <HAL_GetTick>
 800296a:	4603      	mov	r3, r0
 800296c:	4a91      	ldr	r2, [pc, #580]	@ (8002bb4 <mainTask+0x57c>)
 800296e:	6013      	str	r3, [r2, #0]
			if(beforeOldTick != currentTick){
 8002970:	4b91      	ldr	r3, [pc, #580]	@ (8002bb8 <mainTask+0x580>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb4 <mainTask+0x57c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d00a      	beq.n	8002992 <mainTask+0x35a>
				deltaTick=currentTick - beforeOldTick;
 800297c:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb4 <mainTask+0x57c>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb8 <mainTask+0x580>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	4a8d      	ldr	r2, [pc, #564]	@ (8002bbc <mainTask+0x584>)
 8002988:	6013      	str	r3, [r2, #0]
				beforeOldTick = currentTick;
 800298a:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb4 <mainTask+0x57c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a8a      	ldr	r2, [pc, #552]	@ (8002bb8 <mainTask+0x580>)
 8002990:	6013      	str	r3, [r2, #0]
				faverageAdValue0=faverageAdValue0-OffSetValue;
			}else{
				faverageAdValue0=0;
			}*/

			analogPinTimer -= deltaTick;
 8002992:	4b8b      	ldr	r3, [pc, #556]	@ (8002bc0 <mainTask+0x588>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	4b88      	ldr	r3, [pc, #544]	@ (8002bbc <mainTask+0x584>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	4b87      	ldr	r3, [pc, #540]	@ (8002bc0 <mainTask+0x588>)
 80029a2:	601a      	str	r2, [r3, #0]
			//printf("beforeOldTick=%ld, beforeOldTick=%ld ,deltaTick=%ld\r\n",beforeOldTick,currentTick,deltaTick);
			//printf("analogPinTimer=%ld \r\n",analogPinTimer); LoadCell_OffSetValue
			if (analogPinTimer <= 0){
 80029a4:	4b86      	ldr	r3, [pc, #536]	@ (8002bc0 <mainTask+0x588>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f300 80c3 	bgt.w	8002b34 <mainTask+0x4fc>
				analogPinTimer += ANALOG_TIMER_INTERVAL;
 80029ae:	4b84      	ldr	r3, [pc, #528]	@ (8002bc0 <mainTask+0x588>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	4a82      	ldr	r2, [pc, #520]	@ (8002bc0 <mainTask+0x588>)
 80029b6:	6013      	str	r3, [r2, #0]
				// sensing loop start!!
				x = adcVal[0]; // �Ƴ��αװ� �б�  LoadCell_OffSetValue
 80029b8:	4b82      	ldr	r3, [pc, #520]	@ (8002bc4 <mainTask+0x58c>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fd81 	bl	80004c4 <__aeabi_ui2d>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4980      	ldr	r1, [pc, #512]	@ (8002bc8 <mainTask+0x590>)
 80029c8:	e9c1 2300 	strd	r2, r3, [r1]
				lambda = 2*PI*fc*dts;
 80029cc:	4b7f      	ldr	r3, [pc, #508]	@ (8002bcc <mainTask+0x594>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe f9f3 	bl	8000dbc <__aeabi_i2f>
 80029d6:	4603      	mov	r3, r0
 80029d8:	497d      	ldr	r1, [pc, #500]	@ (8002bd0 <mainTask+0x598>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fa42 	bl	8000e64 <__aeabi_fmul>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd90 	bl	8000508 <__aeabi_f2d>
 80029e8:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd4 <mainTask+0x59c>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f7fd fde3 	bl	80005b8 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4978      	ldr	r1, [pc, #480]	@ (8002bd8 <mainTask+0x5a0>)
 80029f8:	e9c1 2300 	strd	r2, r3, [r1]
				x_f = (lambda/(1+lambda)*x )+(1/(1+lambda)*x_fold); //���͵� ��
 80029fc:	4b76      	ldr	r3, [pc, #472]	@ (8002bd8 <mainTask+0x5a0>)
 80029fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a02:	4b75      	ldr	r3, [pc, #468]	@ (8002bd8 <mainTask+0x5a0>)
 8002a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	4b73      	ldr	r3, [pc, #460]	@ (8002bdc <mainTask+0x5a4>)
 8002a0e:	f7fd fc1d 	bl	800024c <__adddf3>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4620      	mov	r0, r4
 8002a18:	4629      	mov	r1, r5
 8002a1a:	f7fd fef7 	bl	800080c <__aeabi_ddiv>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <mainTask+0x590>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fdc4 	bl	80005b8 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	4b67      	ldr	r3, [pc, #412]	@ (8002bd8 <mainTask+0x5a0>)
 8002a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	4b66      	ldr	r3, [pc, #408]	@ (8002bdc <mainTask+0x5a4>)
 8002a44:	f7fd fc02 	bl	800024c <__adddf3>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	f04f 0000 	mov.w	r0, #0
 8002a50:	4962      	ldr	r1, [pc, #392]	@ (8002bdc <mainTask+0x5a4>)
 8002a52:	f7fd fedb 	bl	800080c <__aeabi_ddiv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4b60      	ldr	r3, [pc, #384]	@ (8002be0 <mainTask+0x5a8>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fda8 	bl	80005b8 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	4629      	mov	r1, r5
 8002a70:	f7fd fbec 	bl	800024c <__adddf3>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	495a      	ldr	r1, [pc, #360]	@ (8002be4 <mainTask+0x5ac>)
 8002a7a:	e9c1 2300 	strd	r2, r3, [r1]
				x_fold = x_f; // ���� ���� ������ ������Ʈ
 8002a7e:	4b59      	ldr	r3, [pc, #356]	@ (8002be4 <mainTask+0x5ac>)
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	4956      	ldr	r1, [pc, #344]	@ (8002be0 <mainTask+0x5a8>)
 8002a86:	e9c1 2300 	strd	r2, r3, [r1]
				faverageAdValue0=floor(x_f + 0.5 );//
 8002a8a:	4b56      	ldr	r3, [pc, #344]	@ (8002be4 <mainTask+0x5ac>)
 8002a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	4b54      	ldr	r3, [pc, #336]	@ (8002be8 <mainTask+0x5b0>)
 8002a96:	f7fd fbd9 	bl	800024c <__adddf3>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f00c fe51 	bl	800f748 <floor>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f87b 	bl	8000ba8 <__aeabi_d2f>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	617b      	str	r3, [r7, #20]
				faverageAdValue0=(faverageAdValue0*SpanPvalue)+SpanEvalue;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe f9d1 	bl	8000e64 <__aeabi_fmul>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f7fe f8c2 	bl	8000c54 <__addsf3>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	617b      	str	r3, [r7, #20]

				OffSetValue=(LoadCell_OffSetValue*SpanPvalue)+SpanEvalue;
 8002ad4:	4b45      	ldr	r3, [pc, #276]	@ (8002bec <mainTask+0x5b4>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe f96e 	bl	8000dbc <__aeabi_i2f>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f7fe f9bc 	bl	8000e64 <__aeabi_fmul>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f7fe f8ad 	bl	8000c54 <__addsf3>
 8002afa:	4603      	mov	r3, r0
 8002afc:	613b      	str	r3, [r7, #16]
				if((faverageAdValue0-OffSetValue)>=0){
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe f8a3 	bl	8000c50 <__aeabi_fsub>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fb59 	bl	80011c8 <__aeabi_fcmpge>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <mainTask+0x4f6>
					faverageAdValue0=faverageAdValue0-OffSetValue;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe f894 	bl	8000c50 <__aeabi_fsub>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	e002      	b.n	8002b34 <mainTask+0x4fc>
				}else{
					faverageAdValue0=0;
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
			}

			///////////////////////////////////////////////////////////////////////////////////


			if(DisplayMode == SET_VALUE ){ // ��Ʈ ������
 8002b34:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <mainTask+0x5b8>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d16f      	bne.n	8002c1e <mainTask+0x5e6>
				if (keyValue== KEY_SET){
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf4 <mainTask+0x5bc>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b25b      	sxtb	r3, r3
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d10d      	bne.n	8002b64 <mainTask+0x52c>
					FndDisplay (fadcVal*K_p,1); // ������а� ǥ��
 8002b48:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <mainTask+0x5c0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bfc <mainTask+0x5c4>)
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f986 	bl	8000e64 <__aeabi_fmul>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 fa0f 	bl	8004f80 <FndDisplay>
 8002b62:	e0b7      	b.n	8002cd4 <mainTask+0x69c>
				}else{
					if(faverageAdValue0 > 99.9) FndDisplay(faverageAdValue0*AdGain,100);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fcce 	bl	8000508 <__aeabi_f2d>
 8002b6c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002b98 <mainTask+0x560>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd ffb1 	bl	8000ad8 <__aeabi_dcmpgt>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d043      	beq.n	8002c04 <mainTask+0x5cc>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4a20      	ldr	r2, [pc, #128]	@ (8002c00 <mainTask+0x5c8>)
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f96d 	bl	8000e64 <__aeabi_fmul>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2164      	movs	r1, #100	@ 0x64
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 f9f6 	bl	8004f80 <FndDisplay>
 8002b94:	e09e      	b.n	8002cd4 <mainTask+0x69c>
 8002b96:	bf00      	nop
 8002b98:	9999999a 	.word	0x9999999a
 8002b9c:	4058f999 	.word	0x4058f999
 8002ba0:	20000548 	.word	0x20000548
 8002ba4:	200005d4 	.word	0x200005d4
 8002ba8:	200005d2 	.word	0x200005d2
 8002bac:	43c80000 	.word	0x43c80000
 8002bb0:	42c80000 	.word	0x42c80000
 8002bb4:	20000550 	.word	0x20000550
 8002bb8:	20000554 	.word	0x20000554
 8002bbc:	20000558 	.word	0x20000558
 8002bc0:	2000054c 	.word	0x2000054c
 8002bc4:	2000053c 	.word	0x2000053c
 8002bc8:	20000568 	.word	0x20000568
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	40c90fdb 	.word	0x40c90fdb
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	20000560 	.word	0x20000560
 8002bdc:	3ff00000 	.word	0x3ff00000
 8002be0:	20000578 	.word	0x20000578
 8002be4:	20000570 	.word	0x20000570
 8002be8:	3fe00000 	.word	0x3fe00000
 8002bec:	200005d0 	.word	0x200005d0
 8002bf0:	200005cd 	.word	0x200005cd
 8002bf4:	20000584 	.word	0x20000584
 8002bf8:	200005c0 	.word	0x200005c0
 8002bfc:	200005a4 	.word	0x200005a4
 8002c00:	200005bc 	.word	0x200005bc
					else FndDisplay(faverageAdValue0*AdGain,10);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	4aaa      	ldr	r2, [pc, #680]	@ (8002eb0 <mainTask+0x878>)
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f929 	bl	8000e64 <__aeabi_fmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	210a      	movs	r1, #10
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 f9b2 	bl	8004f80 <FndDisplay>
 8002c1c:	e05a      	b.n	8002cd4 <mainTask+0x69c>
				}
			}else{//REAL_VALUE
				if (keyValue == KEY_SET){
 8002c1e:	4ba5      	ldr	r3, [pc, #660]	@ (8002eb4 <mainTask+0x87c>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d125      	bne.n	8002c74 <mainTask+0x63c>
					if(faverageAdValue0 >99.9) FndDisplay((faverageAdValue0*AdGain),100);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fc6c 	bl	8000508 <__aeabi_f2d>
 8002c30:	a39d      	add	r3, pc, #628	@ (adr r3, 8002ea8 <mainTask+0x870>)
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f7fd ff4f 	bl	8000ad8 <__aeabi_dcmpgt>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00c      	beq.n	8002c5a <mainTask+0x622>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	4a9b      	ldr	r2, [pc, #620]	@ (8002eb0 <mainTask+0x878>)
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe f90b 	bl	8000e64 <__aeabi_fmul>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2164      	movs	r1, #100	@ 0x64
 8002c52:	4618      	mov	r0, r3
 8002c54:	f002 f994 	bl	8004f80 <FndDisplay>
 8002c58:	e03c      	b.n	8002cd4 <mainTask+0x69c>
					else FndDisplay((faverageAdValue0* AdGain),10);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	4a94      	ldr	r2, [pc, #592]	@ (8002eb0 <mainTask+0x878>)
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe f8fe 	bl	8000e64 <__aeabi_fmul>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	210a      	movs	r1, #10
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f002 f987 	bl	8004f80 <FndDisplay>
 8002c72:	e02f      	b.n	8002cd4 <mainTask+0x69c>
				}else{
					if(GetInput(MULTI_TENSION)== GPIO_PIN_SET){
 8002c74:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c78:	f003 f88e 	bl	8005d98 <GetInput>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d10d      	bne.n	8002c9e <mainTask+0x666>
						FndDisplay ((StepTension*K_p),1);
 8002c82:	4b8d      	ldr	r3, [pc, #564]	@ (8002eb8 <mainTask+0x880>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a8d      	ldr	r2, [pc, #564]	@ (8002ebc <mainTask+0x884>)
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe f8e9 	bl	8000e64 <__aeabi_fmul>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2101      	movs	r1, #1
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 f972 	bl	8004f80 <FndDisplay>
 8002c9c:	e01a      	b.n	8002cd4 <mainTask+0x69c>
					}
					else if(GetInput(MULTI_TENSION2)== GPIO_PIN_SET){
 8002c9e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002ca2:	f003 f879 	bl	8005d98 <GetInput>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <mainTask+0x682>
						FndDisplay (K_max,1);
 8002cac:	4b84      	ldr	r3, [pc, #528]	@ (8002ec0 <mainTask+0x888>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 f964 	bl	8004f80 <FndDisplay>
 8002cb8:	e00c      	b.n	8002cd4 <mainTask+0x69c>
					}
					else
					{
						FndDisplay ((fadcVal*K_p),1);
 8002cba:	4b82      	ldr	r3, [pc, #520]	@ (8002ec4 <mainTask+0x88c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7f      	ldr	r2, [pc, #508]	@ (8002ebc <mainTask+0x884>)
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe f8cd 	bl	8000e64 <__aeabi_fmul>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 f956 	bl	8004f80 <FndDisplay>
					}
				}
			}

			if(faverageAdValue0<MinValue){ //300
 8002cd4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec8 <mainTask+0x890>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe f86e 	bl	8000dbc <__aeabi_i2f>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f7fe fa78 	bl	80011dc <__aeabi_fcmpgt>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <mainTask+0x6d6>
				PannelLed(DOWN,ON);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f003 f801 	bl	8005cfc <PannelLed>
				PannelLed(UP,OFF);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f002 fffd 	bl	8005cfc <PannelLed>
				SetOutput(WIRE_STATUS,ON);
 8002d02:	2101      	movs	r1, #1
 8002d04:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002d08:	f003 f858 	bl	8005dbc <SetOutput>
 8002d0c:	e029      	b.n	8002d62 <mainTask+0x72a>

			}else if(faverageAdValue0>MaxValue){ //100
 8002d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ecc <mainTask+0x894>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe f851 	bl	8000dbc <__aeabi_i2f>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f7fe fa3d 	bl	80011a0 <__aeabi_fcmplt>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <mainTask+0x710>
				PannelLed(DOWN,OFF);
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f002 ffe4 	bl	8005cfc <PannelLed>
				PannelLed(UP,ON);
 8002d34:	2101      	movs	r1, #1
 8002d36:	2001      	movs	r0, #1
 8002d38:	f002 ffe0 	bl	8005cfc <PannelLed>
				SetOutput(WIRE_STATUS,ON);
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002d42:	f003 f83b 	bl	8005dbc <SetOutput>
 8002d46:	e00c      	b.n	8002d62 <mainTask+0x72a>
			}else{
				PannelLed(DOWN,OFF);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f002 ffd6 	bl	8005cfc <PannelLed>
				PannelLed(UP,OFF);
 8002d50:	2100      	movs	r1, #0
 8002d52:	2001      	movs	r0, #1
 8002d54:	f002 ffd2 	bl	8005cfc <PannelLed>
				SetOutput(WIRE_STATUS,OFF);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002d5e:	f003 f82d 	bl	8005dbc <SetOutput>
			}

			if(fAvrAdc_PotenionVal <= WireCheckAngle){
 8002d62:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed0 <mainTask+0x898>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a5b      	ldr	r2, [pc, #364]	@ (8002ed4 <mainTask+0x89c>)
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe fa21 	bl	80011b4 <__aeabi_fcmple>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <mainTask+0x748>
				CheckWireAlram(OFF);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f003 f83d 	bl	8005df8 <CheckWireAlram>
 8002d7e:	e0d5      	b.n	8002f2c <mainTask+0x8f4>
				//printf("on Wire \n");
			}else{

				CheckWireAlram(ON);
 8002d80:	2001      	movs	r0, #1
 8002d82:	f003 f839 	bl	8005df8 <CheckWireAlram>
 8002d86:	e0d1      	b.n	8002f2c <mainTask+0x8f4>
				//printf("off Wire \n");
			}
			///////////////////////////////////////////////////////////////////////////////////

		}else if(IsRunMode == EDIT){
 8002d88:	4b53      	ldr	r3, [pc, #332]	@ (8002ed8 <mainTask+0x8a0>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	f040 80cd 	bne.w	8002f2c <mainTask+0x8f4>
			FndDispalyParameter(Parameter);
 8002d92:	4b52      	ldr	r3, [pc, #328]	@ (8002edc <mainTask+0x8a4>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f002 fcca 	bl	8005730 <FndDispalyParameter>
			while(1){
				if(keyValue == 0)IsKeyStatus = KeyInitStatus;
 8002d9c:	4b45      	ldr	r3, [pc, #276]	@ (8002eb4 <mainTask+0x87c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <mainTask+0x774>
 8002da6:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee0 <mainTask+0x8a8>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
				keyValue=GetButtonStatus();
 8002dac:	f002 ffd8 	bl	8005d60 <GetButtonStatus>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b25a      	sxtb	r2, r3
 8002db4:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb4 <mainTask+0x87c>)
 8002db6:	701a      	strb	r2, [r3, #0]
				keyDelayCount++;
 8002db8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <mainTask+0x8ac>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b48      	ldr	r3, [pc, #288]	@ (8002ee4 <mainTask+0x8ac>)
 8002dc4:	801a      	strh	r2, [r3, #0]
				displayDelayCount++;
 8002dc6:	4b48      	ldr	r3, [pc, #288]	@ (8002ee8 <mainTask+0x8b0>)
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ee8 <mainTask+0x8b0>)
 8002dd2:	801a      	strh	r2, [r3, #0]
				if(displayDelayCount >10){
 8002dd4:	4b44      	ldr	r3, [pc, #272]	@ (8002ee8 <mainTask+0x8b0>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b0a      	cmp	r3, #10
 8002ddc:	d907      	bls.n	8002dee <mainTask+0x7b6>
					displayDelayCount=0;
 8002dde:	4b42      	ldr	r3, [pc, #264]	@ (8002ee8 <mainTask+0x8b0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	801a      	strh	r2, [r3, #0]
					FndDispalyParameter(Parameter);
 8002de4:	4b3d      	ldr	r3, [pc, #244]	@ (8002edc <mainTask+0x8a4>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fca1 	bl	8005730 <FndDispalyParameter>
				}

				if(CurrentModel !=  BackupModel){
 8002dee:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <mainTask+0x8b4>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef0 <mainTask+0x8b8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d024      	beq.n	8002e48 <mainTask+0x810>
					BackupModel = CurrentModel;
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <mainTask+0x8b4>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef0 <mainTask+0x8b8>)
 8002e06:	701a      	strb	r2, [r3, #0]
					DataManager(CmdWriteEeprom,0,PAR_BackupModel);
 8002e08:	2211      	movs	r2, #17
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f000 ff0f 	bl	8003c30 <DataManager>
					osDelay(500);
 8002e12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e16:	f006 ffbf 	bl	8009d98 <osDelay>
					FndIncrementBar(1);
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f002 fdd0 	bl	80059c0 <FndIncrementBar>
					osDelay(500);
 8002e20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e24:	f006 ffb8 	bl	8009d98 <osDelay>
					FndIncrementBar(2);
 8002e28:	2002      	movs	r0, #2
 8002e2a:	f002 fdc9 	bl	80059c0 <FndIncrementBar>
					osDelay(500);
 8002e2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e32:	f006 ffb1 	bl	8009d98 <osDelay>
					FndIncrementBar(3);
 8002e36:	2003      	movs	r0, #3
 8002e38:	f002 fdc2 	bl	80059c0 <FndIncrementBar>
					LoadParameter(BackupModel);
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef0 <mainTask+0x8b8>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fbbe 	bl	80045c4 <LoadParameter>
				}

				if(keyDelayCount >10){
 8002e48:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <mainTask+0x8ac>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d956      	bls.n	8002f00 <mainTask+0x8c8>
					keyDelayCount=0;
 8002e52:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <mainTask+0x8ac>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	801a      	strh	r2, [r3, #0]
					if ((keyValue == KEY_SET) && (IsKeyStatus==KeyInitStatus)){
 8002e58:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <mainTask+0x87c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b25b      	sxtb	r3, r3
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d19c      	bne.n	8002d9c <mainTask+0x764>
 8002e62:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <mainTask+0x8a8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d198      	bne.n	8002d9c <mainTask+0x764>
						IsRunMode = EDIT_DATA;
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <mainTask+0x8a0>)
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	701a      	strb	r2, [r3, #0]
						IsKeyStatus=KeyDownStatus;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <mainTask+0x8a8>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
						IsEditStatus=EDIT_ON;
 8002e76:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef4 <mainTask+0x8bc>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
						printf(" Key is Entry\n");
 8002e7c:	481e      	ldr	r0, [pc, #120]	@ (8002ef8 <mainTask+0x8c0>)
 8002e7e:	f00a fb0d 	bl	800d49c <puts>
						osDelay(1000);
 8002e82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e86:	f006 ff87 	bl	8009d98 <osDelay>
						encoderCount=0;
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <mainTask+0x8c4>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	801a      	strh	r2, [r3, #0]
						while(1){
							ParamterSet(Parameter);
 8002e90:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <mainTask+0x8a4>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fcdd 	bl	8004854 <ParamterSet>
							if(IsEditStatus == EDIT_OFF)break; //while break;
 8002e9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ef4 <mainTask+0x8bc>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d042      	beq.n	8002f28 <mainTask+0x8f0>
							ParamterSet(Parameter);
 8002ea2:	e7f5      	b.n	8002e90 <mainTask+0x858>
 8002ea4:	f3af 8000 	nop.w
 8002ea8:	9999999a 	.word	0x9999999a
 8002eac:	4058f999 	.word	0x4058f999
 8002eb0:	200005bc 	.word	0x200005bc
 8002eb4:	20000584 	.word	0x20000584
 8002eb8:	200005b8 	.word	0x200005b8
 8002ebc:	200005a4 	.word	0x200005a4
 8002ec0:	200005b4 	.word	0x200005b4
 8002ec4:	200005c0 	.word	0x200005c0
 8002ec8:	200005d8 	.word	0x200005d8
 8002ecc:	200005d6 	.word	0x200005d6
 8002ed0:	200005c8 	.word	0x200005c8
 8002ed4:	200005a0 	.word	0x200005a0
 8002ed8:	20000548 	.word	0x20000548
 8002edc:	20000018 	.word	0x20000018
 8002ee0:	20000546 	.word	0x20000546
 8002ee4:	20000586 	.word	0x20000586
 8002ee8:	20000588 	.word	0x20000588
 8002eec:	200005cc 	.word	0x200005cc
 8002ef0:	200005ce 	.word	0x200005ce
 8002ef4:	20000547 	.word	0x20000547
 8002ef8:	0800f8a0 	.word	0x0800f8a0
 8002efc:	2000058a 	.word	0x2000058a
						}
					}
				}else if (keyValue == KEY_RUNEDIT){
 8002f00:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <mainTask+0x900>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	f47f af48 	bne.w	8002d9c <mainTask+0x764>
					printf(" Mode is Run\n");
 8002f0c:	480b      	ldr	r0, [pc, #44]	@ (8002f3c <mainTask+0x904>)
 8002f0e:	f00a fac5 	bl	800d49c <puts>
					IsKeyStatus = KeyInitStatus;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <mainTask+0x908>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
					IsRunMode=RUN;
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <mainTask+0x90c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
					osDelay(500);
 8002f1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f22:	f006 ff39 	bl	8009d98 <osDelay>
					break;
 8002f26:	e001      	b.n	8002f2c <mainTask+0x8f4>
							if(IsEditStatus == EDIT_OFF)break; //while break;
 8002f28:	bf00      	nop
				if(keyValue == 0)IsKeyStatus = KeyInitStatus;
 8002f2a:	e737      	b.n	8002d9c <mainTask+0x764>
				}

			}
		}
		osDelay(1);
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f006 ff33 	bl	8009d98 <osDelay>
	{
 8002f32:	f7ff bb9c 	b.w	800266e <mainTask+0x36>
 8002f36:	bf00      	nop
 8002f38:	20000584 	.word	0x20000584
 8002f3c:	0800f8b0 	.word	0x0800f8b0
 8002f40:	20000546 	.word	0x20000546
 8002f44:	20000548 	.word	0x20000548

08002f48 <UpDateEncoder>:
    return alpha * input + (1.0f - alpha) * prev_output;
}


void UpDateEncoder(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
	uint8_t MSB = (uint8_t) HAL_GPIO_ReadPin(ENC_A_GPIO_Port,ENC_A_Pin);	//MSB = most significant bit
 8002f4e:	2101      	movs	r1, #1
 8002f50:	48b1      	ldr	r0, [pc, #708]	@ (8003218 <UpDateEncoder+0x2d0>)
 8002f52:	f004 fc5f 	bl	8007814 <HAL_GPIO_ReadPin>
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB = (uint8_t) HAL_GPIO_ReadPin(ENC_B_GPIO_Port,ENC_B_Pin);	//LSB = least significant bit
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	48ae      	ldr	r0, [pc, #696]	@ (8003218 <UpDateEncoder+0x2d0>)
 8002f5e:	f004 fc59 	bl	8007814 <HAL_GPIO_ReadPin>
 8002f62:	4603      	mov	r3, r0
 8002f64:	71bb      	strb	r3, [r7, #6]
	uint8_t encoded = (MSB << 1) | LSB;								//converting the 2 pin value to single number
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	b25a      	sxtb	r2, r3
 8002f6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	717b      	strb	r3, [r7, #5]
	uint8_t sum  = (lastEncoded << 2) | encoded;					//adding it to the previous encoded value
 8002f78:	4ba8      	ldr	r3, [pc, #672]	@ (800321c <UpDateEncoder+0x2d4>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	b25b      	sxtb	r3, r3
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	b25a      	sxtb	r2, r3
 8002f84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	713b      	strb	r3, [r7, #4]
	//printf("UpDateEncoder=%x\n",sum);

	if(sum ==0x0d || sum ==0x04  || sum ==0x02  || sum ==0x0b ){
 8002f8e:	793b      	ldrb	r3, [r7, #4]
 8002f90:	2b0d      	cmp	r3, #13
 8002f92:	d009      	beq.n	8002fa8 <UpDateEncoder+0x60>
 8002f94:	793b      	ldrb	r3, [r7, #4]
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d006      	beq.n	8002fa8 <UpDateEncoder+0x60>
 8002f9a:	793b      	ldrb	r3, [r7, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d003      	beq.n	8002fa8 <UpDateEncoder+0x60>
 8002fa0:	793b      	ldrb	r3, [r7, #4]
 8002fa2:	2b0b      	cmp	r3, #11
 8002fa4:	f040 8306 	bne.w	80035b4 <UpDateEncoder+0x66c>
		//printf("Rotary sw CW  ====>  \r\n");
		OffsetCnt++;
 8002fa8:	4b9d      	ldr	r3, [pc, #628]	@ (8003220 <UpDateEncoder+0x2d8>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	4b9b      	ldr	r3, [pc, #620]	@ (8003220 <UpDateEncoder+0x2d8>)
 8002fb2:	701a      	strb	r2, [r3, #0]
		if(OffsetCnt>3){
 8002fb4:	4b9a      	ldr	r3, [pc, #616]	@ (8003220 <UpDateEncoder+0x2d8>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	f240 82fb 	bls.w	80035b4 <UpDateEncoder+0x66c>
			OffsetCnt=0;
 8002fbe:	4b98      	ldr	r3, [pc, #608]	@ (8003220 <UpDateEncoder+0x2d8>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
			if(IsRunMode == EDIT){
 8002fc4:	4b97      	ldr	r3, [pc, #604]	@ (8003224 <UpDateEncoder+0x2dc>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d116      	bne.n	8002ffa <UpDateEncoder+0xb2>
				Parameter++;
 8002fcc:	4b96      	ldr	r3, [pc, #600]	@ (8003228 <UpDateEncoder+0x2e0>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	4b94      	ldr	r3, [pc, #592]	@ (8003228 <UpDateEncoder+0x2e0>)
 8002fd6:	701a      	strb	r2, [r3, #0]
				if(Parameter < 1) Parameter=16;
 8002fd8:	4b93      	ldr	r3, [pc, #588]	@ (8003228 <UpDateEncoder+0x2e0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <UpDateEncoder+0xa0>
 8002fe0:	4b91      	ldr	r3, [pc, #580]	@ (8003228 <UpDateEncoder+0x2e0>)
 8002fe2:	2210      	movs	r2, #16
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e2e5      	b.n	80035b4 <UpDateEncoder+0x66c>
				else if (Parameter >16)Parameter=1;
 8002fe8:	4b8f      	ldr	r3, [pc, #572]	@ (8003228 <UpDateEncoder+0x2e0>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	f240 82e1 	bls.w	80035b4 <UpDateEncoder+0x66c>
 8002ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8003228 <UpDateEncoder+0x2e0>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e2dc      	b.n	80035b4 <UpDateEncoder+0x66c>
			}else if(IsRunMode == EDIT_DATA){
 8002ffa:	4b8a      	ldr	r3, [pc, #552]	@ (8003224 <UpDateEncoder+0x2dc>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f040 828b 	bne.w	800351a <UpDateEncoder+0x5d2>
				switch(Parameter){
 8003004:	4b88      	ldr	r3, [pc, #544]	@ (8003228 <UpDateEncoder+0x2e0>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	3b01      	subs	r3, #1
 800300a:	2b0f      	cmp	r3, #15
 800300c:	f200 82cf 	bhi.w	80035ae <UpDateEncoder+0x666>
 8003010:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <UpDateEncoder+0xd0>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	080032c9 	.word	0x080032c9
 800301c:	080035af 	.word	0x080035af
 8003020:	08003059 	.word	0x08003059
 8003024:	080030e7 	.word	0x080030e7
 8003028:	08003173 	.word	0x08003173
 800302c:	08003245 	.word	0x08003245
 8003030:	08003287 	.word	0x08003287
 8003034:	080035af 	.word	0x080035af
 8003038:	08003301 	.word	0x08003301
 800303c:	08003323 	.word	0x08003323
 8003040:	08003383 	.word	0x08003383
 8003044:	080033a9 	.word	0x080033a9
 8003048:	08003409 	.word	0x08003409
 800304c:	08003435 	.word	0x08003435
 8003050:	08003461 	.word	0x08003461
 8003054:	080034e1 	.word	0x080034e1
				case PAR_POS: //1
					break;
				case PAR_CHK_ANG:	//2
					break;
				case PAR_P://3
					if(K_p>9.9)K_p=K_p+0.1;
 8003058:	4b74      	ldr	r3, [pc, #464]	@ (800322c <UpDateEncoder+0x2e4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa53 	bl	8000508 <__aeabi_f2d>
 8003062:	a365      	add	r3, pc, #404	@ (adr r3, 80031f8 <UpDateEncoder+0x2b0>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f7fd fd36 	bl	8000ad8 <__aeabi_dcmpgt>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d013      	beq.n	800309a <UpDateEncoder+0x152>
 8003072:	4b6e      	ldr	r3, [pc, #440]	@ (800322c <UpDateEncoder+0x2e4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa46 	bl	8000508 <__aeabi_f2d>
 800307c:	a360      	add	r3, pc, #384	@ (adr r3, 8003200 <UpDateEncoder+0x2b8>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	f7fd f8e3 	bl	800024c <__adddf3>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f7fd fd8b 	bl	8000ba8 <__aeabi_d2f>
 8003092:	4603      	mov	r3, r0
 8003094:	4a65      	ldr	r2, [pc, #404]	@ (800322c <UpDateEncoder+0x2e4>)
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e012      	b.n	80030c0 <UpDateEncoder+0x178>
					else K_p=K_p+0.01;
 800309a:	4b64      	ldr	r3, [pc, #400]	@ (800322c <UpDateEncoder+0x2e4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fa32 	bl	8000508 <__aeabi_f2d>
 80030a4:	a358      	add	r3, pc, #352	@ (adr r3, 8003208 <UpDateEncoder+0x2c0>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd f8cf 	bl	800024c <__adddf3>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fd fd77 	bl	8000ba8 <__aeabi_d2f>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a5b      	ldr	r2, [pc, #364]	@ (800322c <UpDateEncoder+0x2e4>)
 80030be:	6013      	str	r3, [r2, #0]
					if(K_p >99.9)K_p=0;
 80030c0:	4b5a      	ldr	r3, [pc, #360]	@ (800322c <UpDateEncoder+0x2e4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd fa1f 	bl	8000508 <__aeabi_f2d>
 80030ca:	a351      	add	r3, pc, #324	@ (adr r3, 8003210 <UpDateEncoder+0x2c8>)
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f7fd fd02 	bl	8000ad8 <__aeabi_dcmpgt>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d100      	bne.n	80030dc <UpDateEncoder+0x194>
					break;
 80030da:	e26b      	b.n	80035b4 <UpDateEncoder+0x66c>
					if(K_p >99.9)K_p=0;
 80030dc:	4b53      	ldr	r3, [pc, #332]	@ (800322c <UpDateEncoder+0x2e4>)
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
					break;
 80030e4:	e266      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_I:
					if(K_i>9.9)K_i=K_i+0.1;
 80030e6:	4b52      	ldr	r3, [pc, #328]	@ (8003230 <UpDateEncoder+0x2e8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fa0c 	bl	8000508 <__aeabi_f2d>
 80030f0:	a341      	add	r3, pc, #260	@ (adr r3, 80031f8 <UpDateEncoder+0x2b0>)
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	f7fd fcef 	bl	8000ad8 <__aeabi_dcmpgt>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <UpDateEncoder+0x1e0>
 8003100:	4b4b      	ldr	r3, [pc, #300]	@ (8003230 <UpDateEncoder+0x2e8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd f9ff 	bl	8000508 <__aeabi_f2d>
 800310a:	a33d      	add	r3, pc, #244	@ (adr r3, 8003200 <UpDateEncoder+0x2b8>)
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f7fd f89c 	bl	800024c <__adddf3>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f7fd fd44 	bl	8000ba8 <__aeabi_d2f>
 8003120:	4603      	mov	r3, r0
 8003122:	4a43      	ldr	r2, [pc, #268]	@ (8003230 <UpDateEncoder+0x2e8>)
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e012      	b.n	800314e <UpDateEncoder+0x206>
					else K_i=K_i+0.01;
 8003128:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <UpDateEncoder+0x2e8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd f9eb 	bl	8000508 <__aeabi_f2d>
 8003132:	a335      	add	r3, pc, #212	@ (adr r3, 8003208 <UpDateEncoder+0x2c0>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f7fd f888 	bl	800024c <__adddf3>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f7fd fd30 	bl	8000ba8 <__aeabi_d2f>
 8003148:	4603      	mov	r3, r0
 800314a:	4a39      	ldr	r2, [pc, #228]	@ (8003230 <UpDateEncoder+0x2e8>)
 800314c:	6013      	str	r3, [r2, #0]
					if(K_i >99.9)K_i=99.9;
 800314e:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <UpDateEncoder+0x2e8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f9d8 	bl	8000508 <__aeabi_f2d>
 8003158:	a32d      	add	r3, pc, #180	@ (adr r3, 8003210 <UpDateEncoder+0x2c8>)
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f7fd fcbb 	bl	8000ad8 <__aeabi_dcmpgt>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d100      	bne.n	800316a <UpDateEncoder+0x222>
					break;
 8003168:	e224      	b.n	80035b4 <UpDateEncoder+0x66c>
					if(K_i >99.9)K_i=99.9;
 800316a:	4b31      	ldr	r3, [pc, #196]	@ (8003230 <UpDateEncoder+0x2e8>)
 800316c:	4a31      	ldr	r2, [pc, #196]	@ (8003234 <UpDateEncoder+0x2ec>)
 800316e:	601a      	str	r2, [r3, #0]
					break;
 8003170:	e220      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_D:
					if(K_d>9.9)K_d=K_d+0.1;
 8003172:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <UpDateEncoder+0x2f0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd f9c6 	bl	8000508 <__aeabi_f2d>
 800317c:	a31e      	add	r3, pc, #120	@ (adr r3, 80031f8 <UpDateEncoder+0x2b0>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f7fd fca9 	bl	8000ad8 <__aeabi_dcmpgt>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <UpDateEncoder+0x26c>
 800318c:	4b2a      	ldr	r3, [pc, #168]	@ (8003238 <UpDateEncoder+0x2f0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f9b9 	bl	8000508 <__aeabi_f2d>
 8003196:	a31a      	add	r3, pc, #104	@ (adr r3, 8003200 <UpDateEncoder+0x2b8>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f7fd f856 	bl	800024c <__adddf3>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fd fcfe 	bl	8000ba8 <__aeabi_d2f>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <UpDateEncoder+0x2f0>)
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e012      	b.n	80031da <UpDateEncoder+0x292>
					else K_d=K_d+0.01;
 80031b4:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <UpDateEncoder+0x2f0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f9a5 	bl	8000508 <__aeabi_f2d>
 80031be:	a312      	add	r3, pc, #72	@ (adr r3, 8003208 <UpDateEncoder+0x2c0>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f7fd f842 	bl	800024c <__adddf3>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fcea 	bl	8000ba8 <__aeabi_d2f>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <UpDateEncoder+0x2f0>)
 80031d8:	6013      	str	r3, [r2, #0]
					if(K_d >99.9)K_d=99.9;
 80031da:	4b17      	ldr	r3, [pc, #92]	@ (8003238 <UpDateEncoder+0x2f0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f992 	bl	8000508 <__aeabi_f2d>
 80031e4:	a30a      	add	r3, pc, #40	@ (adr r3, 8003210 <UpDateEncoder+0x2c8>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fd fc75 	bl	8000ad8 <__aeabi_dcmpgt>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d123      	bne.n	800323c <UpDateEncoder+0x2f4>
					break;
 80031f4:	e1de      	b.n	80035b4 <UpDateEncoder+0x66c>
 80031f6:	bf00      	nop
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	4023cccc 	.word	0x4023cccc
 8003200:	9999999a 	.word	0x9999999a
 8003204:	3fb99999 	.word	0x3fb99999
 8003208:	47ae147b 	.word	0x47ae147b
 800320c:	3f847ae1 	.word	0x3f847ae1
 8003210:	9999999a 	.word	0x9999999a
 8003214:	4058f999 	.word	0x4058f999
 8003218:	40011000 	.word	0x40011000
 800321c:	2000058c 	.word	0x2000058c
 8003220:	20000594 	.word	0x20000594
 8003224:	20000548 	.word	0x20000548
 8003228:	20000018 	.word	0x20000018
 800322c:	200005a4 	.word	0x200005a4
 8003230:	200005a8 	.word	0x200005a8
 8003234:	42c7cccd 	.word	0x42c7cccd
 8003238:	200005ac 	.word	0x200005ac
					if(K_d >99.9)K_d=99.9;
 800323c:	4b9a      	ldr	r3, [pc, #616]	@ (80034a8 <UpDateEncoder+0x560>)
 800323e:	4a9b      	ldr	r2, [pc, #620]	@ (80034ac <UpDateEncoder+0x564>)
 8003240:	601a      	str	r2, [r3, #0]
					break;
 8003242:	e1b7      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_MAX:
					K_max=K_max+0.1;
 8003244:	4b9a      	ldr	r3, [pc, #616]	@ (80034b0 <UpDateEncoder+0x568>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f95d 	bl	8000508 <__aeabi_f2d>
 800324e:	a394      	add	r3, pc, #592	@ (adr r3, 80034a0 <UpDateEncoder+0x558>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fc fffa 	bl	800024c <__adddf3>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	f7fd fca2 	bl	8000ba8 <__aeabi_d2f>
 8003264:	4603      	mov	r3, r0
 8003266:	4a92      	ldr	r2, [pc, #584]	@ (80034b0 <UpDateEncoder+0x568>)
 8003268:	6013      	str	r3, [r2, #0]
					if(K_max>24.0) K_max=24.0;
 800326a:	4b91      	ldr	r3, [pc, #580]	@ (80034b0 <UpDateEncoder+0x568>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4991      	ldr	r1, [pc, #580]	@ (80034b4 <UpDateEncoder+0x56c>)
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd ffb3 	bl	80011dc <__aeabi_fcmpgt>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d100      	bne.n	800327e <UpDateEncoder+0x336>
					break;
 800327c:	e19a      	b.n	80035b4 <UpDateEncoder+0x66c>
					if(K_max>24.0) K_max=24.0;
 800327e:	4b8c      	ldr	r3, [pc, #560]	@ (80034b0 <UpDateEncoder+0x568>)
 8003280:	4a8c      	ldr	r2, [pc, #560]	@ (80034b4 <UpDateEncoder+0x56c>)
 8003282:	601a      	str	r2, [r3, #0]
					break;
 8003284:	e196      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_MIN:
					K_min=K_min+0.1;
 8003286:	4b8c      	ldr	r3, [pc, #560]	@ (80034b8 <UpDateEncoder+0x570>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd f93c 	bl	8000508 <__aeabi_f2d>
 8003290:	a383      	add	r3, pc, #524	@ (adr r3, 80034a0 <UpDateEncoder+0x558>)
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f7fc ffd9 	bl	800024c <__adddf3>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	f7fd fc81 	bl	8000ba8 <__aeabi_d2f>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a83      	ldr	r2, [pc, #524]	@ (80034b8 <UpDateEncoder+0x570>)
 80032aa:	6013      	str	r3, [r2, #0]
					if(K_min > 24.0) K_min=24.0;
 80032ac:	4b82      	ldr	r3, [pc, #520]	@ (80034b8 <UpDateEncoder+0x570>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4980      	ldr	r1, [pc, #512]	@ (80034b4 <UpDateEncoder+0x56c>)
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd ff92 	bl	80011dc <__aeabi_fcmpgt>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d100      	bne.n	80032c0 <UpDateEncoder+0x378>
					break;
 80032be:	e179      	b.n	80035b4 <UpDateEncoder+0x66c>
					if(K_min > 24.0) K_min=24.0;
 80032c0:	4b7d      	ldr	r3, [pc, #500]	@ (80034b8 <UpDateEncoder+0x570>)
 80032c2:	4a7c      	ldr	r2, [pc, #496]	@ (80034b4 <UpDateEncoder+0x56c>)
 80032c4:	601a      	str	r2, [r3, #0]
					break;
 80032c6:	e175      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_MODEL://Control mode
					if(CurrentModel < 3){
 80032c8:	4b7c      	ldr	r3, [pc, #496]	@ (80034bc <UpDateEncoder+0x574>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d812      	bhi.n	80032f8 <UpDateEncoder+0x3b0>
						if(CurrentModel >= 0){
 80032d2:	4b7a      	ldr	r3, [pc, #488]	@ (80034bc <UpDateEncoder+0x574>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
							CurrentModel = CurrentModel+1;
 80032d6:	4b79      	ldr	r3, [pc, #484]	@ (80034bc <UpDateEncoder+0x574>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	3301      	adds	r3, #1
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b76      	ldr	r3, [pc, #472]	@ (80034bc <UpDateEncoder+0x574>)
 80032e2:	701a      	strb	r2, [r3, #0]
							if(CurrentModel > 2) CurrentModel=2;
 80032e4:	4b75      	ldr	r3, [pc, #468]	@ (80034bc <UpDateEncoder+0x574>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	f240 8161 	bls.w	80035b2 <UpDateEncoder+0x66a>
 80032f0:	4b72      	ldr	r3, [pc, #456]	@ (80034bc <UpDateEncoder+0x574>)
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
							CurrentModel = 0;
						}
					}else{
						CurrentModel = 2;
					}
					break;
 80032f6:	e15c      	b.n	80035b2 <UpDateEncoder+0x66a>
						CurrentModel = 2;
 80032f8:	4b70      	ldr	r3, [pc, #448]	@ (80034bc <UpDateEncoder+0x574>)
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
					break;
 80032fe:	e158      	b.n	80035b2 <UpDateEncoder+0x66a>
				case PAR_DISP://Display Mode
					if(DisplayMode < 3) DisplayMode=DisplayMode+1;
 8003300:	4b6f      	ldr	r3, [pc, #444]	@ (80034c0 <UpDateEncoder+0x578>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d807      	bhi.n	800331a <UpDateEncoder+0x3d2>
 800330a:	4b6d      	ldr	r3, [pc, #436]	@ (80034c0 <UpDateEncoder+0x578>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	3301      	adds	r3, #1
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b6a      	ldr	r3, [pc, #424]	@ (80034c0 <UpDateEncoder+0x578>)
 8003316:	701a      	strb	r2, [r3, #0]
					else DisplayMode=2;

					break;
 8003318:	e14c      	b.n	80035b4 <UpDateEncoder+0x66c>
					else DisplayMode=2;
 800331a:	4b69      	ldr	r3, [pc, #420]	@ (80034c0 <UpDateEncoder+0x578>)
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]
					break;
 8003320:	e148      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_MULTI://Multi Tension
					if(StepTension < 24){
 8003322:	4b68      	ldr	r3, [pc, #416]	@ (80034c4 <UpDateEncoder+0x57c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4963      	ldr	r1, [pc, #396]	@ (80034b4 <UpDateEncoder+0x56c>)
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd ff39 	bl	80011a0 <__aeabi_fcmplt>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d022      	beq.n	800337a <UpDateEncoder+0x432>
						if(StepTension >= 0.0){
 8003334:	4b63      	ldr	r3, [pc, #396]	@ (80034c4 <UpDateEncoder+0x57c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd ff43 	bl	80011c8 <__aeabi_fcmpge>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <UpDateEncoder+0x428>
							StepTension = StepTension+0.1;
 8003348:	4b5e      	ldr	r3, [pc, #376]	@ (80034c4 <UpDateEncoder+0x57c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f8db 	bl	8000508 <__aeabi_f2d>
 8003352:	a353      	add	r3, pc, #332	@ (adr r3, 80034a0 <UpDateEncoder+0x558>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fc ff78 	bl	800024c <__adddf3>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	f7fd fc20 	bl	8000ba8 <__aeabi_d2f>
 8003368:	4603      	mov	r3, r0
 800336a:	4a56      	ldr	r2, [pc, #344]	@ (80034c4 <UpDateEncoder+0x57c>)
 800336c:	6013      	str	r3, [r2, #0]
							StepTension = 0;
						}
					}else{
						StepTension = 24;
					}
					break;
 800336e:	e121      	b.n	80035b4 <UpDateEncoder+0x66c>
							StepTension = 0;
 8003370:	4b54      	ldr	r3, [pc, #336]	@ (80034c4 <UpDateEncoder+0x57c>)
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
					break;
 8003378:	e11c      	b.n	80035b4 <UpDateEncoder+0x66c>
						StepTension = 24;
 800337a:	4b52      	ldr	r3, [pc, #328]	@ (80034c4 <UpDateEncoder+0x57c>)
 800337c:	4a4d      	ldr	r2, [pc, #308]	@ (80034b4 <UpDateEncoder+0x56c>)
 800337e:	601a      	str	r2, [r3, #0]
					break;
 8003380:	e118      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_LOADCELL_OFFSET://
					if(LoadCell_OffSetValue < 100){
 8003382:	4b51      	ldr	r3, [pc, #324]	@ (80034c8 <UpDateEncoder+0x580>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b63      	cmp	r3, #99	@ 0x63
 800338a:	d809      	bhi.n	80033a0 <UpDateEncoder+0x458>
						if(LoadCell_OffSetValue >= 0){
 800338c:	4b4e      	ldr	r3, [pc, #312]	@ (80034c8 <UpDateEncoder+0x580>)
 800338e:	881b      	ldrh	r3, [r3, #0]
							LoadCell_OffSetValue = LoadCell_OffSetValue+1;
 8003390:	4b4d      	ldr	r3, [pc, #308]	@ (80034c8 <UpDateEncoder+0x580>)
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b4b      	ldr	r3, [pc, #300]	@ (80034c8 <UpDateEncoder+0x580>)
 800339c:	801a      	strh	r2, [r3, #0]
							LoadCell_OffSetValue = 0;
						}
					}else{
						LoadCell_OffSetValue = 100;
					}
					break;
 800339e:	e109      	b.n	80035b4 <UpDateEncoder+0x66c>
						LoadCell_OffSetValue = 100;
 80033a0:	4b49      	ldr	r3, [pc, #292]	@ (80034c8 <UpDateEncoder+0x580>)
 80033a2:	2264      	movs	r2, #100	@ 0x64
 80033a4:	801a      	strh	r2, [r3, #0]
					break;
 80033a6:	e105      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_ADGAIN://
					if(AdGain < 10){
 80033a8:	4b48      	ldr	r3, [pc, #288]	@ (80034cc <UpDateEncoder+0x584>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4948      	ldr	r1, [pc, #288]	@ (80034d0 <UpDateEncoder+0x588>)
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fef6 	bl	80011a0 <__aeabi_fcmplt>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d022      	beq.n	8003400 <UpDateEncoder+0x4b8>
						if(AdGain>= 0.0){
 80033ba:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <UpDateEncoder+0x584>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd ff00 	bl	80011c8 <__aeabi_fcmpge>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d013      	beq.n	80033f6 <UpDateEncoder+0x4ae>
							AdGain=AdGain+0.1;
 80033ce:	4b3f      	ldr	r3, [pc, #252]	@ (80034cc <UpDateEncoder+0x584>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f898 	bl	8000508 <__aeabi_f2d>
 80033d8:	a331      	add	r3, pc, #196	@ (adr r3, 80034a0 <UpDateEncoder+0x558>)
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	f7fc ff35 	bl	800024c <__adddf3>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	f7fd fbdd 	bl	8000ba8 <__aeabi_d2f>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4a36      	ldr	r2, [pc, #216]	@ (80034cc <UpDateEncoder+0x584>)
 80033f2:	6013      	str	r3, [r2, #0]
							AdGain=0;
						}
					}else{
						AdGain=10;
					}
					break;
 80033f4:	e0de      	b.n	80035b4 <UpDateEncoder+0x66c>
							AdGain=0;
 80033f6:	4b35      	ldr	r3, [pc, #212]	@ (80034cc <UpDateEncoder+0x584>)
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
					break;
 80033fe:	e0d9      	b.n	80035b4 <UpDateEncoder+0x66c>
						AdGain=10;
 8003400:	4b32      	ldr	r3, [pc, #200]	@ (80034cc <UpDateEncoder+0x584>)
 8003402:	4a33      	ldr	r2, [pc, #204]	@ (80034d0 <UpDateEncoder+0x588>)
 8003404:	601a      	str	r2, [r3, #0]
					break;
 8003406:	e0d5      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_PLIMIT://
					if(MaxValue < 999){
 8003408:	4b32      	ldr	r3, [pc, #200]	@ (80034d4 <UpDateEncoder+0x58c>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8003412:	4293      	cmp	r3, r2
 8003414:	d809      	bhi.n	800342a <UpDateEncoder+0x4e2>
						if(MaxValue>= 0){
 8003416:	4b2f      	ldr	r3, [pc, #188]	@ (80034d4 <UpDateEncoder+0x58c>)
 8003418:	881b      	ldrh	r3, [r3, #0]
							MaxValue=MaxValue+1;
 800341a:	4b2e      	ldr	r3, [pc, #184]	@ (80034d4 <UpDateEncoder+0x58c>)
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	3301      	adds	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b2b      	ldr	r3, [pc, #172]	@ (80034d4 <UpDateEncoder+0x58c>)
 8003426:	801a      	strh	r2, [r3, #0]
							MaxValue=0;
						}
					}else{
						MaxValue=999;
					}
					break;
 8003428:	e0c4      	b.n	80035b4 <UpDateEncoder+0x66c>
						MaxValue=999;
 800342a:	4b2a      	ldr	r3, [pc, #168]	@ (80034d4 <UpDateEncoder+0x58c>)
 800342c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003430:	801a      	strh	r2, [r3, #0]
					break;
 8003432:	e0bf      	b.n	80035b4 <UpDateEncoder+0x66c>
				case PAR_MLIMIT://
					if(MinValue < 999){
 8003434:	4b28      	ldr	r3, [pc, #160]	@ (80034d8 <UpDateEncoder+0x590>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f240 32e6 	movw	r2, #998	@ 0x3e6
 800343e:	4293      	cmp	r3, r2
 8003440:	d809      	bhi.n	8003456 <UpDateEncoder+0x50e>
						if(MinValue>= 0){
 8003442:	4b25      	ldr	r3, [pc, #148]	@ (80034d8 <UpDateEncoder+0x590>)
 8003444:	881b      	ldrh	r3, [r3, #0]
							MinValue=MinValue+1;
 8003446:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <UpDateEncoder+0x590>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	3301      	adds	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	4b21      	ldr	r3, [pc, #132]	@ (80034d8 <UpDateEncoder+0x590>)
 8003452:	801a      	strh	r2, [r3, #0]
							MinValue=0;
						}
					}else{
						MinValue=999;
					}
					break;
 8003454:	e0ae      	b.n	80035b4 <UpDateEncoder+0x66c>
						MinValue=999;
 8003456:	4b20      	ldr	r3, [pc, #128]	@ (80034d8 <UpDateEncoder+0x590>)
 8003458:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800345c:	801a      	strh	r2, [r3, #0]
					break;
 800345e:	e0a9      	b.n	80035b4 <UpDateEncoder+0x66c>

				case PAR_LOADCELL_SPAN_L://
					if(LoadCell_SpanValueLow < 1500){
 8003460:	4b1e      	ldr	r3, [pc, #120]	@ (80034dc <UpDateEncoder+0x594>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f240 52db 	movw	r2, #1499	@ 0x5db
 800346a:	4293      	cmp	r3, r2
 800346c:	d810      	bhi.n	8003490 <UpDateEncoder+0x548>
						if(LoadCell_SpanValueLow> 0){
 800346e:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <UpDateEncoder+0x594>)
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <UpDateEncoder+0x540>
							LoadCell_SpanValueLow=LoadCell_SpanValueLow+1;
 8003478:	4b18      	ldr	r3, [pc, #96]	@ (80034dc <UpDateEncoder+0x594>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	3301      	adds	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	4b16      	ldr	r3, [pc, #88]	@ (80034dc <UpDateEncoder+0x594>)
 8003484:	801a      	strh	r2, [r3, #0]
							LoadCell_SpanValueLow=0;
						}
					}else{
						LoadCell_SpanValueLow=1500;
					}
					break;
 8003486:	e095      	b.n	80035b4 <UpDateEncoder+0x66c>
							LoadCell_SpanValueLow=0;
 8003488:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <UpDateEncoder+0x594>)
 800348a:	2200      	movs	r2, #0
 800348c:	801a      	strh	r2, [r3, #0]
					break;
 800348e:	e091      	b.n	80035b4 <UpDateEncoder+0x66c>
						LoadCell_SpanValueLow=1500;
 8003490:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <UpDateEncoder+0x594>)
 8003492:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003496:	801a      	strh	r2, [r3, #0]
					break;
 8003498:	e08c      	b.n	80035b4 <UpDateEncoder+0x66c>
 800349a:	bf00      	nop
 800349c:	f3af 8000 	nop.w
 80034a0:	9999999a 	.word	0x9999999a
 80034a4:	3fb99999 	.word	0x3fb99999
 80034a8:	200005ac 	.word	0x200005ac
 80034ac:	42c7cccd 	.word	0x42c7cccd
 80034b0:	200005b4 	.word	0x200005b4
 80034b4:	41c00000 	.word	0x41c00000
 80034b8:	200005b0 	.word	0x200005b0
 80034bc:	200005cc 	.word	0x200005cc
 80034c0:	200005cd 	.word	0x200005cd
 80034c4:	200005b8 	.word	0x200005b8
 80034c8:	200005d0 	.word	0x200005d0
 80034cc:	200005bc 	.word	0x200005bc
 80034d0:	41200000 	.word	0x41200000
 80034d4:	200005d6 	.word	0x200005d6
 80034d8:	200005d8 	.word	0x200005d8
 80034dc:	200005d2 	.word	0x200005d2
				case PAR_LOADCELL_SPAN_H://
					if(LoadCell_SpanValueHigh < 1500){
 80034e0:	4b9f      	ldr	r3, [pc, #636]	@ (8003760 <UpDateEncoder+0x818>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d810      	bhi.n	8003510 <UpDateEncoder+0x5c8>
						if(LoadCell_SpanValueHigh> 0){
 80034ee:	4b9c      	ldr	r3, [pc, #624]	@ (8003760 <UpDateEncoder+0x818>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <UpDateEncoder+0x5c0>
							LoadCell_SpanValueHigh=LoadCell_SpanValueHigh+1;
 80034f8:	4b99      	ldr	r3, [pc, #612]	@ (8003760 <UpDateEncoder+0x818>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3301      	adds	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	4b97      	ldr	r3, [pc, #604]	@ (8003760 <UpDateEncoder+0x818>)
 8003504:	801a      	strh	r2, [r3, #0]
							LoadCell_SpanValueHigh=0;
						}
					}else{
						LoadCell_SpanValueHigh=1500;
					}
					break;
 8003506:	e055      	b.n	80035b4 <UpDateEncoder+0x66c>
							LoadCell_SpanValueHigh=0;
 8003508:	4b95      	ldr	r3, [pc, #596]	@ (8003760 <UpDateEncoder+0x818>)
 800350a:	2200      	movs	r2, #0
 800350c:	801a      	strh	r2, [r3, #0]
					break;
 800350e:	e051      	b.n	80035b4 <UpDateEncoder+0x66c>
						LoadCell_SpanValueHigh=1500;
 8003510:	4b93      	ldr	r3, [pc, #588]	@ (8003760 <UpDateEncoder+0x818>)
 8003512:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003516:	801a      	strh	r2, [r3, #0]
					break;
 8003518:	e04c      	b.n	80035b4 <UpDateEncoder+0x66c>
					//printf(" Display default\n");
					break;
				}//end of switch
			}else{  //Run

				fadcVal=fadcVal+0.1;
 800351a:	4b92      	ldr	r3, [pc, #584]	@ (8003764 <UpDateEncoder+0x81c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fc fff2 	bl	8000508 <__aeabi_f2d>
 8003524:	a388      	add	r3, pc, #544	@ (adr r3, 8003748 <UpDateEncoder+0x800>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f7fc fe8f 	bl	800024c <__adddf3>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	f7fd fb37 	bl	8000ba8 <__aeabi_d2f>
 800353a:	4603      	mov	r3, r0
 800353c:	4a89      	ldr	r2, [pc, #548]	@ (8003764 <UpDateEncoder+0x81c>)
 800353e:	6013      	str	r3, [r2, #0]
				if(fadcVal < 0) fadcVal=0;
 8003540:	4b88      	ldr	r3, [pc, #544]	@ (8003764 <UpDateEncoder+0x81c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f04f 0100 	mov.w	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fe29 	bl	80011a0 <__aeabi_fcmplt>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <UpDateEncoder+0x616>
 8003554:	4b83      	ldr	r3, [pc, #524]	@ (8003764 <UpDateEncoder+0x81c>)
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e00b      	b.n	8003576 <UpDateEncoder+0x62e>
				else if (fadcVal >24)fadcVal=24;
 800355e:	4b81      	ldr	r3, [pc, #516]	@ (8003764 <UpDateEncoder+0x81c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4981      	ldr	r1, [pc, #516]	@ (8003768 <UpDateEncoder+0x820>)
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fe39 	bl	80011dc <__aeabi_fcmpgt>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <UpDateEncoder+0x62e>
 8003570:	4b7c      	ldr	r3, [pc, #496]	@ (8003764 <UpDateEncoder+0x81c>)
 8003572:	4a7d      	ldr	r2, [pc, #500]	@ (8003768 <UpDateEncoder+0x820>)
 8003574:	601a      	str	r2, [r3, #0]
				DataManager(CmdReadVariable,CurrentModel,PAR_fAdcValue);//CompfadcVal�� ���� ����
 8003576:	4b7d      	ldr	r3, [pc, #500]	@ (800376c <UpDateEncoder+0x824>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2212      	movs	r2, #18
 800357e:	4619      	mov	r1, r3
 8003580:	2002      	movs	r0, #2
 8003582:	f000 fb55 	bl	8003c30 <DataManager>
				if(CompfadcVal != fadcVal){
 8003586:	4b7a      	ldr	r3, [pc, #488]	@ (8003770 <UpDateEncoder+0x828>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a76      	ldr	r2, [pc, #472]	@ (8003764 <UpDateEncoder+0x81c>)
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd fdfb 	bl	800118c <__aeabi_fcmpeq>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <UpDateEncoder+0x66c>
					DataManager(CmdWriteEeprom,CurrentModel,PAR_fAdcValue);////�ټǺ������� ����
 800359c:	4b73      	ldr	r3, [pc, #460]	@ (800376c <UpDateEncoder+0x824>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2212      	movs	r2, #18
 80035a4:	4619      	mov	r1, r3
 80035a6:	2000      	movs	r0, #0
 80035a8:	f000 fb42 	bl	8003c30 <DataManager>
 80035ac:	e002      	b.n	80035b4 <UpDateEncoder+0x66c>
					break;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <UpDateEncoder+0x66c>
					break;
 80035b2:	bf00      	nop
				//DacValue=(uint32_t) (fadcVal/0.008);
				//WrEepromFloat(fadcVal,100+(150*CurrentModel));	//�ټǺ���
			}
		}
	}
	if(sum == 0x0e || sum == 0x07 || sum == 0x01 || sum == 0x08){
 80035b4:	793b      	ldrb	r3, [r7, #4]
 80035b6:	2b0e      	cmp	r3, #14
 80035b8:	d009      	beq.n	80035ce <UpDateEncoder+0x686>
 80035ba:	793b      	ldrb	r3, [r7, #4]
 80035bc:	2b07      	cmp	r3, #7
 80035be:	d006      	beq.n	80035ce <UpDateEncoder+0x686>
 80035c0:	793b      	ldrb	r3, [r7, #4]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d003      	beq.n	80035ce <UpDateEncoder+0x686>
 80035c6:	793b      	ldrb	r3, [r7, #4]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	f040 830e 	bne.w	8003bea <UpDateEncoder+0xca2>
		//printf("<========Rotary sw CCW  \r\n");
		OffsetCnt++;
 80035ce:	4b69      	ldr	r3, [pc, #420]	@ (8003774 <UpDateEncoder+0x82c>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b67      	ldr	r3, [pc, #412]	@ (8003774 <UpDateEncoder+0x82c>)
 80035d8:	701a      	strb	r2, [r3, #0]
		if(OffsetCnt>3){
 80035da:	4b66      	ldr	r3, [pc, #408]	@ (8003774 <UpDateEncoder+0x82c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	f240 8303 	bls.w	8003bea <UpDateEncoder+0xca2>
			OffsetCnt=0;
 80035e4:	4b63      	ldr	r3, [pc, #396]	@ (8003774 <UpDateEncoder+0x82c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
			if(IsRunMode == EDIT){
 80035ea:	4b63      	ldr	r3, [pc, #396]	@ (8003778 <UpDateEncoder+0x830>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d116      	bne.n	8003620 <UpDateEncoder+0x6d8>
				Parameter--;
 80035f2:	4b62      	ldr	r3, [pc, #392]	@ (800377c <UpDateEncoder+0x834>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4b60      	ldr	r3, [pc, #384]	@ (800377c <UpDateEncoder+0x834>)
 80035fc:	701a      	strb	r2, [r3, #0]
				if(Parameter < 1) Parameter=16;
 80035fe:	4b5f      	ldr	r3, [pc, #380]	@ (800377c <UpDateEncoder+0x834>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <UpDateEncoder+0x6c6>
 8003606:	4b5d      	ldr	r3, [pc, #372]	@ (800377c <UpDateEncoder+0x834>)
 8003608:	2210      	movs	r2, #16
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e2ed      	b.n	8003bea <UpDateEncoder+0xca2>
				else if (Parameter >16)Parameter=1;
 800360e:	4b5b      	ldr	r3, [pc, #364]	@ (800377c <UpDateEncoder+0x834>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b10      	cmp	r3, #16
 8003614:	f240 82e9 	bls.w	8003bea <UpDateEncoder+0xca2>
 8003618:	4b58      	ldr	r3, [pc, #352]	@ (800377c <UpDateEncoder+0x834>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	e2e4      	b.n	8003bea <UpDateEncoder+0xca2>
			}else if(IsRunMode == EDIT_DATA){
 8003620:	4b55      	ldr	r3, [pc, #340]	@ (8003778 <UpDateEncoder+0x830>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b02      	cmp	r3, #2
 8003626:	f040 8295 	bne.w	8003b54 <UpDateEncoder+0xc0c>

				switch(Parameter){
 800362a:	4b54      	ldr	r3, [pc, #336]	@ (800377c <UpDateEncoder+0x834>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	3b01      	subs	r3, #1
 8003630:	2b0f      	cmp	r3, #15
 8003632:	f200 828b 	bhi.w	8003b4c <UpDateEncoder+0xc04>
 8003636:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <UpDateEncoder+0x6f4>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	080038e3 	.word	0x080038e3
 8003640:	08003be9 	.word	0x08003be9
 8003644:	0800367d 	.word	0x0800367d
 8003648:	08003705 	.word	0x08003705
 800364c:	080037cf 	.word	0x080037cf
 8003650:	08003857 	.word	0x08003857
 8003654:	0800389d 	.word	0x0800389d
 8003658:	08003be9 	.word	0x08003be9
 800365c:	0800391b 	.word	0x0800391b
 8003660:	0800393d 	.word	0x0800393d
 8003664:	0800399d 	.word	0x0800399d
 8003668:	08003a0d 	.word	0x08003a0d
 800366c:	08003a6d 	.word	0x08003a6d
 8003670:	08003aa5 	.word	0x08003aa5
 8003674:	08003add 	.word	0x08003add
 8003678:	08003b15 	.word	0x08003b15
					case PAR_POS: //1
							break;
					case PAR_CHK_ANG:	//2
							break;
					case PAR_P://3
							if(K_p>9.9)K_p=K_p-0.1;
 800367c:	4b40      	ldr	r3, [pc, #256]	@ (8003780 <UpDateEncoder+0x838>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc ff41 	bl	8000508 <__aeabi_f2d>
 8003686:	a332      	add	r3, pc, #200	@ (adr r3, 8003750 <UpDateEncoder+0x808>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fd fa24 	bl	8000ad8 <__aeabi_dcmpgt>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d013      	beq.n	80036be <UpDateEncoder+0x776>
 8003696:	4b3a      	ldr	r3, [pc, #232]	@ (8003780 <UpDateEncoder+0x838>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff34 	bl	8000508 <__aeabi_f2d>
 80036a0:	a329      	add	r3, pc, #164	@ (adr r3, 8003748 <UpDateEncoder+0x800>)
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f7fc fdcf 	bl	8000248 <__aeabi_dsub>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7fd fa79 	bl	8000ba8 <__aeabi_d2f>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4a31      	ldr	r2, [pc, #196]	@ (8003780 <UpDateEncoder+0x838>)
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e012      	b.n	80036e4 <UpDateEncoder+0x79c>
							else K_p=K_p-0.01;
 80036be:	4b30      	ldr	r3, [pc, #192]	@ (8003780 <UpDateEncoder+0x838>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc ff20 	bl	8000508 <__aeabi_f2d>
 80036c8:	a323      	add	r3, pc, #140	@ (adr r3, 8003758 <UpDateEncoder+0x810>)
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f7fc fdbb 	bl	8000248 <__aeabi_dsub>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd fa65 	bl	8000ba8 <__aeabi_d2f>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a27      	ldr	r2, [pc, #156]	@ (8003780 <UpDateEncoder+0x838>)
 80036e2:	6013      	str	r3, [r2, #0]
							if(K_p <0)K_p=0.0;
 80036e4:	4b26      	ldr	r3, [pc, #152]	@ (8003780 <UpDateEncoder+0x838>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fd57 	bl	80011a0 <__aeabi_fcmplt>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d100      	bne.n	80036fa <UpDateEncoder+0x7b2>
							break;
 80036f8:	e277      	b.n	8003bea <UpDateEncoder+0xca2>
							if(K_p <0)K_p=0.0;
 80036fa:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <UpDateEncoder+0x838>)
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
							break;
 8003702:	e272      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_I:
							if(K_i>9.9)K_i=K_i-0.1;
 8003704:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <UpDateEncoder+0x83c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc fefd 	bl	8000508 <__aeabi_f2d>
 800370e:	a310      	add	r3, pc, #64	@ (adr r3, 8003750 <UpDateEncoder+0x808>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f7fd f9e0 	bl	8000ad8 <__aeabi_dcmpgt>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d034      	beq.n	8003788 <UpDateEncoder+0x840>
 800371e:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <UpDateEncoder+0x83c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fc fef0 	bl	8000508 <__aeabi_f2d>
 8003728:	a307      	add	r3, pc, #28	@ (adr r3, 8003748 <UpDateEncoder+0x800>)
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	f7fc fd8b 	bl	8000248 <__aeabi_dsub>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	f7fd fa35 	bl	8000ba8 <__aeabi_d2f>
 800373e:	4603      	mov	r3, r0
 8003740:	4a10      	ldr	r2, [pc, #64]	@ (8003784 <UpDateEncoder+0x83c>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e033      	b.n	80037ae <UpDateEncoder+0x866>
 8003746:	bf00      	nop
 8003748:	9999999a 	.word	0x9999999a
 800374c:	3fb99999 	.word	0x3fb99999
 8003750:	cccccccd 	.word	0xcccccccd
 8003754:	4023cccc 	.word	0x4023cccc
 8003758:	47ae147b 	.word	0x47ae147b
 800375c:	3f847ae1 	.word	0x3f847ae1
 8003760:	200005d4 	.word	0x200005d4
 8003764:	200005c0 	.word	0x200005c0
 8003768:	41c00000 	.word	0x41c00000
 800376c:	200005cc 	.word	0x200005cc
 8003770:	200005c4 	.word	0x200005c4
 8003774:	20000594 	.word	0x20000594
 8003778:	20000548 	.word	0x20000548
 800377c:	20000018 	.word	0x20000018
 8003780:	200005a4 	.word	0x200005a4
 8003784:	200005a8 	.word	0x200005a8
							else K_i=K_i-0.01;
 8003788:	4b97      	ldr	r3, [pc, #604]	@ (80039e8 <UpDateEncoder+0xaa0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc febb 	bl	8000508 <__aeabi_f2d>
 8003792:	a38f      	add	r3, pc, #572	@ (adr r3, 80039d0 <UpDateEncoder+0xa88>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f7fc fd56 	bl	8000248 <__aeabi_dsub>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7fd fa00 	bl	8000ba8 <__aeabi_d2f>
 80037a8:	4603      	mov	r3, r0
 80037aa:	4a8f      	ldr	r2, [pc, #572]	@ (80039e8 <UpDateEncoder+0xaa0>)
 80037ac:	6013      	str	r3, [r2, #0]
							if(K_i <0)K_i=0;
 80037ae:	4b8e      	ldr	r3, [pc, #568]	@ (80039e8 <UpDateEncoder+0xaa0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fcf2 	bl	80011a0 <__aeabi_fcmplt>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d100      	bne.n	80037c4 <UpDateEncoder+0x87c>
							break;
 80037c2:	e212      	b.n	8003bea <UpDateEncoder+0xca2>
							if(K_i <0)K_i=0;
 80037c4:	4b88      	ldr	r3, [pc, #544]	@ (80039e8 <UpDateEncoder+0xaa0>)
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
							break;
 80037cc:	e20d      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_D:
							if(K_d>9.9)K_d=K_d-0.1;
 80037ce:	4b87      	ldr	r3, [pc, #540]	@ (80039ec <UpDateEncoder+0xaa4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc fe98 	bl	8000508 <__aeabi_f2d>
 80037d8:	a37f      	add	r3, pc, #508	@ (adr r3, 80039d8 <UpDateEncoder+0xa90>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f7fd f97b 	bl	8000ad8 <__aeabi_dcmpgt>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d013      	beq.n	8003810 <UpDateEncoder+0x8c8>
 80037e8:	4b80      	ldr	r3, [pc, #512]	@ (80039ec <UpDateEncoder+0xaa4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fc fe8b 	bl	8000508 <__aeabi_f2d>
 80037f2:	a37b      	add	r3, pc, #492	@ (adr r3, 80039e0 <UpDateEncoder+0xa98>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f7fc fd26 	bl	8000248 <__aeabi_dsub>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd f9d0 	bl	8000ba8 <__aeabi_d2f>
 8003808:	4603      	mov	r3, r0
 800380a:	4a78      	ldr	r2, [pc, #480]	@ (80039ec <UpDateEncoder+0xaa4>)
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e012      	b.n	8003836 <UpDateEncoder+0x8ee>
							else K_d=K_d-0.01;
 8003810:	4b76      	ldr	r3, [pc, #472]	@ (80039ec <UpDateEncoder+0xaa4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fe77 	bl	8000508 <__aeabi_f2d>
 800381a:	a36d      	add	r3, pc, #436	@ (adr r3, 80039d0 <UpDateEncoder+0xa88>)
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f7fc fd12 	bl	8000248 <__aeabi_dsub>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f7fd f9bc 	bl	8000ba8 <__aeabi_d2f>
 8003830:	4603      	mov	r3, r0
 8003832:	4a6e      	ldr	r2, [pc, #440]	@ (80039ec <UpDateEncoder+0xaa4>)
 8003834:	6013      	str	r3, [r2, #0]
							if(K_d <0.0)K_d=0;
 8003836:	4b6d      	ldr	r3, [pc, #436]	@ (80039ec <UpDateEncoder+0xaa4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fcae 	bl	80011a0 <__aeabi_fcmplt>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d100      	bne.n	800384c <UpDateEncoder+0x904>
							break;
 800384a:	e1ce      	b.n	8003bea <UpDateEncoder+0xca2>
							if(K_d <0.0)K_d=0;
 800384c:	4b67      	ldr	r3, [pc, #412]	@ (80039ec <UpDateEncoder+0xaa4>)
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
							break;
 8003854:	e1c9      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_MAX:
							K_max=K_max-0.1;
 8003856:	4b66      	ldr	r3, [pc, #408]	@ (80039f0 <UpDateEncoder+0xaa8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe54 	bl	8000508 <__aeabi_f2d>
 8003860:	a35f      	add	r3, pc, #380	@ (adr r3, 80039e0 <UpDateEncoder+0xa98>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc fcef 	bl	8000248 <__aeabi_dsub>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	f7fd f999 	bl	8000ba8 <__aeabi_d2f>
 8003876:	4603      	mov	r3, r0
 8003878:	4a5d      	ldr	r2, [pc, #372]	@ (80039f0 <UpDateEncoder+0xaa8>)
 800387a:	6013      	str	r3, [r2, #0]
							if(K_max < 0.0) K_max=0.0;
 800387c:	4b5c      	ldr	r3, [pc, #368]	@ (80039f0 <UpDateEncoder+0xaa8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fc8b 	bl	80011a0 <__aeabi_fcmplt>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d100      	bne.n	8003892 <UpDateEncoder+0x94a>
							break;
 8003890:	e1ab      	b.n	8003bea <UpDateEncoder+0xca2>
							if(K_max < 0.0) K_max=0.0;
 8003892:	4b57      	ldr	r3, [pc, #348]	@ (80039f0 <UpDateEncoder+0xaa8>)
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
							break;
 800389a:	e1a6      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_MIN:
							K_min=K_min-0.1;
 800389c:	4b55      	ldr	r3, [pc, #340]	@ (80039f4 <UpDateEncoder+0xaac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fe31 	bl	8000508 <__aeabi_f2d>
 80038a6:	a34e      	add	r3, pc, #312	@ (adr r3, 80039e0 <UpDateEncoder+0xa98>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fccc 	bl	8000248 <__aeabi_dsub>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	f7fd f976 	bl	8000ba8 <__aeabi_d2f>
 80038bc:	4603      	mov	r3, r0
 80038be:	4a4d      	ldr	r2, [pc, #308]	@ (80039f4 <UpDateEncoder+0xaac>)
 80038c0:	6013      	str	r3, [r2, #0]
							if(K_min <0.0) K_min=0.0;
 80038c2:	4b4c      	ldr	r3, [pc, #304]	@ (80039f4 <UpDateEncoder+0xaac>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fc68 	bl	80011a0 <__aeabi_fcmplt>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d100      	bne.n	80038d8 <UpDateEncoder+0x990>

							break;
 80038d6:	e188      	b.n	8003bea <UpDateEncoder+0xca2>
							if(K_min <0.0) K_min=0.0;
 80038d8:	4b46      	ldr	r3, [pc, #280]	@ (80039f4 <UpDateEncoder+0xaac>)
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
							break;
 80038e0:	e183      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_MODEL://Control mode
							if(CurrentModel < 3){
 80038e2:	4b45      	ldr	r3, [pc, #276]	@ (80039f8 <UpDateEncoder+0xab0>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d812      	bhi.n	8003912 <UpDateEncoder+0x9ca>
								if(CurrentModel > 0){
 80038ec:	4b42      	ldr	r3, [pc, #264]	@ (80039f8 <UpDateEncoder+0xab0>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <UpDateEncoder+0x9c2>
									CurrentModel = CurrentModel-1;
 80038f6:	4b40      	ldr	r3, [pc, #256]	@ (80039f8 <UpDateEncoder+0xab0>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	4b3d      	ldr	r3, [pc, #244]	@ (80039f8 <UpDateEncoder+0xab0>)
 8003902:	701a      	strb	r2, [r3, #0]
									if(CurrentModel < 0) CurrentModel=0;
 8003904:	4b3c      	ldr	r3, [pc, #240]	@ (80039f8 <UpDateEncoder+0xab0>)
 8003906:	781b      	ldrb	r3, [r3, #0]
									CurrentModel = 0;
								}
							}else{
								CurrentModel = 2;
							}
							break;
 8003908:	e16f      	b.n	8003bea <UpDateEncoder+0xca2>
									CurrentModel = 0;
 800390a:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <UpDateEncoder+0xab0>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
							break;
 8003910:	e16b      	b.n	8003bea <UpDateEncoder+0xca2>
								CurrentModel = 2;
 8003912:	4b39      	ldr	r3, [pc, #228]	@ (80039f8 <UpDateEncoder+0xab0>)
 8003914:	2202      	movs	r2, #2
 8003916:	701a      	strb	r2, [r3, #0]
							break;
 8003918:	e167      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_DISP://Display Mode
							if(DisplayMode > 0) DisplayMode=DisplayMode-1;
 800391a:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <UpDateEncoder+0xab4>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <UpDateEncoder+0x9ec>
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <UpDateEncoder+0xab4>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b2da      	uxtb	r2, r3
 800392e:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <UpDateEncoder+0xab4>)
 8003930:	701a      	strb	r2, [r3, #0]
							else DisplayMode=2;
							break;
 8003932:	e15a      	b.n	8003bea <UpDateEncoder+0xca2>
							else DisplayMode=2;
 8003934:	4b31      	ldr	r3, [pc, #196]	@ (80039fc <UpDateEncoder+0xab4>)
 8003936:	2202      	movs	r2, #2
 8003938:	701a      	strb	r2, [r3, #0]
							break;
 800393a:	e156      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_MULTI://Multi Tension
							if(StepTension <=24.0) {
 800393c:	4b30      	ldr	r3, [pc, #192]	@ (8003a00 <UpDateEncoder+0xab8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4930      	ldr	r1, [pc, #192]	@ (8003a04 <UpDateEncoder+0xabc>)
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fc36 	bl	80011b4 <__aeabi_fcmple>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d022      	beq.n	8003994 <UpDateEncoder+0xa4c>
								if(StepTension >0.0){
 800394e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a00 <UpDateEncoder+0xab8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd fc40 	bl	80011dc <__aeabi_fcmpgt>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d013      	beq.n	800398a <UpDateEncoder+0xa42>
									StepTension = StepTension-0.1;
 8003962:	4b27      	ldr	r3, [pc, #156]	@ (8003a00 <UpDateEncoder+0xab8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc fdce 	bl	8000508 <__aeabi_f2d>
 800396c:	a31c      	add	r3, pc, #112	@ (adr r3, 80039e0 <UpDateEncoder+0xa98>)
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	f7fc fc69 	bl	8000248 <__aeabi_dsub>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	f7fd f913 	bl	8000ba8 <__aeabi_d2f>
 8003982:	4603      	mov	r3, r0
 8003984:	4a1e      	ldr	r2, [pc, #120]	@ (8003a00 <UpDateEncoder+0xab8>)
 8003986:	6013      	str	r3, [r2, #0]
									StepTension=0;
								}
							}else{
								StepTension = 24;
							}
							break;
 8003988:	e12f      	b.n	8003bea <UpDateEncoder+0xca2>
									StepTension=0;
 800398a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <UpDateEncoder+0xab8>)
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
							break;
 8003992:	e12a      	b.n	8003bea <UpDateEncoder+0xca2>
								StepTension = 24;
 8003994:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <UpDateEncoder+0xab8>)
 8003996:	4a1b      	ldr	r2, [pc, #108]	@ (8003a04 <UpDateEncoder+0xabc>)
 8003998:	601a      	str	r2, [r3, #0]
							break;
 800399a:	e126      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_LOADCELL_OFFSET://
							if(LoadCell_OffSetValue <=100){
 800399c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a08 <UpDateEncoder+0xac0>)
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b64      	cmp	r3, #100	@ 0x64
 80039a4:	d810      	bhi.n	80039c8 <UpDateEncoder+0xa80>
								if(LoadCell_OffSetValue> 0){
 80039a6:	4b18      	ldr	r3, [pc, #96]	@ (8003a08 <UpDateEncoder+0xac0>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <UpDateEncoder+0xa78>
									LoadCell_OffSetValue=LoadCell_OffSetValue-1;
 80039b0:	4b15      	ldr	r3, [pc, #84]	@ (8003a08 <UpDateEncoder+0xac0>)
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <UpDateEncoder+0xac0>)
 80039bc:	801a      	strh	r2, [r3, #0]
									LoadCell_OffSetValue=0;
								}
							}else{
								LoadCell_OffSetValue=100;
							}
							break;
 80039be:	e114      	b.n	8003bea <UpDateEncoder+0xca2>
									LoadCell_OffSetValue=0;
 80039c0:	4b11      	ldr	r3, [pc, #68]	@ (8003a08 <UpDateEncoder+0xac0>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	801a      	strh	r2, [r3, #0]
							break;
 80039c6:	e110      	b.n	8003bea <UpDateEncoder+0xca2>
								LoadCell_OffSetValue=100;
 80039c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a08 <UpDateEncoder+0xac0>)
 80039ca:	2264      	movs	r2, #100	@ 0x64
 80039cc:	801a      	strh	r2, [r3, #0]
							break;
 80039ce:	e10c      	b.n	8003bea <UpDateEncoder+0xca2>
 80039d0:	47ae147b 	.word	0x47ae147b
 80039d4:	3f847ae1 	.word	0x3f847ae1
 80039d8:	cccccccd 	.word	0xcccccccd
 80039dc:	4023cccc 	.word	0x4023cccc
 80039e0:	9999999a 	.word	0x9999999a
 80039e4:	3fb99999 	.word	0x3fb99999
 80039e8:	200005a8 	.word	0x200005a8
 80039ec:	200005ac 	.word	0x200005ac
 80039f0:	200005b4 	.word	0x200005b4
 80039f4:	200005b0 	.word	0x200005b0
 80039f8:	200005cc 	.word	0x200005cc
 80039fc:	200005cd 	.word	0x200005cd
 8003a00:	200005b8 	.word	0x200005b8
 8003a04:	41c00000 	.word	0x41c00000
 8003a08:	200005d0 	.word	0x200005d0
					case PAR_ADGAIN://
							if(AdGain <= 10){
 8003a0c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c00 <UpDateEncoder+0xcb8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	497c      	ldr	r1, [pc, #496]	@ (8003c04 <UpDateEncoder+0xcbc>)
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fbce 	bl	80011b4 <__aeabi_fcmple>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d022      	beq.n	8003a64 <UpDateEncoder+0xb1c>
								if(AdGain> 0.0){
 8003a1e:	4b78      	ldr	r3, [pc, #480]	@ (8003c00 <UpDateEncoder+0xcb8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fbd8 	bl	80011dc <__aeabi_fcmpgt>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d013      	beq.n	8003a5a <UpDateEncoder+0xb12>
									AdGain = AdGain-0.1;
 8003a32:	4b73      	ldr	r3, [pc, #460]	@ (8003c00 <UpDateEncoder+0xcb8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fc fd66 	bl	8000508 <__aeabi_f2d>
 8003a3c:	a36e      	add	r3, pc, #440	@ (adr r3, 8003bf8 <UpDateEncoder+0xcb0>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fc fc01 	bl	8000248 <__aeabi_dsub>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f7fd f8ab 	bl	8000ba8 <__aeabi_d2f>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4a6a      	ldr	r2, [pc, #424]	@ (8003c00 <UpDateEncoder+0xcb8>)
 8003a56:	6013      	str	r3, [r2, #0]
									AdGain = 0;
								}
							}else{
								AdGain=10;
							}
							break;
 8003a58:	e0c7      	b.n	8003bea <UpDateEncoder+0xca2>
									AdGain = 0;
 8003a5a:	4b69      	ldr	r3, [pc, #420]	@ (8003c00 <UpDateEncoder+0xcb8>)
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
							break;
 8003a62:	e0c2      	b.n	8003bea <UpDateEncoder+0xca2>
								AdGain=10;
 8003a64:	4b66      	ldr	r3, [pc, #408]	@ (8003c00 <UpDateEncoder+0xcb8>)
 8003a66:	4a67      	ldr	r2, [pc, #412]	@ (8003c04 <UpDateEncoder+0xcbc>)
 8003a68:	601a      	str	r2, [r3, #0]
							break;
 8003a6a:	e0be      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_PLIMIT://
							if(MaxValue <= 999){
 8003a6c:	4b66      	ldr	r3, [pc, #408]	@ (8003c08 <UpDateEncoder+0xcc0>)
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a76:	d210      	bcs.n	8003a9a <UpDateEncoder+0xb52>
								if(MaxValue> 0){
 8003a78:	4b63      	ldr	r3, [pc, #396]	@ (8003c08 <UpDateEncoder+0xcc0>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <UpDateEncoder+0xb4a>
									MaxValue=MaxValue-1;
 8003a82:	4b61      	ldr	r3, [pc, #388]	@ (8003c08 <UpDateEncoder+0xcc0>)
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c08 <UpDateEncoder+0xcc0>)
 8003a8e:	801a      	strh	r2, [r3, #0]
									MaxValue=0;
								}
							}else{
								MaxValue=999;
							}
							break;
 8003a90:	e0ab      	b.n	8003bea <UpDateEncoder+0xca2>
									MaxValue=0;
 8003a92:	4b5d      	ldr	r3, [pc, #372]	@ (8003c08 <UpDateEncoder+0xcc0>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	801a      	strh	r2, [r3, #0]
							break;
 8003a98:	e0a7      	b.n	8003bea <UpDateEncoder+0xca2>
								MaxValue=999;
 8003a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c08 <UpDateEncoder+0xcc0>)
 8003a9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003aa0:	801a      	strh	r2, [r3, #0]
							break;
 8003aa2:	e0a2      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_MLIMIT://
							if(MinValue <= 999){
 8003aa4:	4b59      	ldr	r3, [pc, #356]	@ (8003c0c <UpDateEncoder+0xcc4>)
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003aae:	d210      	bcs.n	8003ad2 <UpDateEncoder+0xb8a>
								if(MinValue> 0){
 8003ab0:	4b56      	ldr	r3, [pc, #344]	@ (8003c0c <UpDateEncoder+0xcc4>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <UpDateEncoder+0xb82>
									MinValue=MinValue-1;
 8003aba:	4b54      	ldr	r3, [pc, #336]	@ (8003c0c <UpDateEncoder+0xcc4>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	4b51      	ldr	r3, [pc, #324]	@ (8003c0c <UpDateEncoder+0xcc4>)
 8003ac6:	801a      	strh	r2, [r3, #0]
									MinValue=0;
								}
							}else{
								MinValue=999;
							}
							break;
 8003ac8:	e08f      	b.n	8003bea <UpDateEncoder+0xca2>
									MinValue=0;
 8003aca:	4b50      	ldr	r3, [pc, #320]	@ (8003c0c <UpDateEncoder+0xcc4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	801a      	strh	r2, [r3, #0]
							break;
 8003ad0:	e08b      	b.n	8003bea <UpDateEncoder+0xca2>
								MinValue=999;
 8003ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8003c0c <UpDateEncoder+0xcc4>)
 8003ad4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ad8:	801a      	strh	r2, [r3, #0]
							break;
 8003ada:	e086      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_LOADCELL_SPAN_L://
							if(LoadCell_SpanValueLow < 1500){
 8003adc:	4b4c      	ldr	r3, [pc, #304]	@ (8003c10 <UpDateEncoder+0xcc8>)
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f240 52db 	movw	r2, #1499	@ 0x5db
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d810      	bhi.n	8003b0c <UpDateEncoder+0xbc4>
								if(LoadCell_SpanValueLow> 0){
 8003aea:	4b49      	ldr	r3, [pc, #292]	@ (8003c10 <UpDateEncoder+0xcc8>)
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <UpDateEncoder+0xbbc>
									LoadCell_SpanValueLow=LoadCell_SpanValueLow-1;
 8003af4:	4b46      	ldr	r3, [pc, #280]	@ (8003c10 <UpDateEncoder+0xcc8>)
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	4b44      	ldr	r3, [pc, #272]	@ (8003c10 <UpDateEncoder+0xcc8>)
 8003b00:	801a      	strh	r2, [r3, #0]
									LoadCell_SpanValueLow=0;
								}
							}else{
								LoadCell_SpanValueLow=0;
							}
							break;
 8003b02:	e072      	b.n	8003bea <UpDateEncoder+0xca2>
									LoadCell_SpanValueLow=0;
 8003b04:	4b42      	ldr	r3, [pc, #264]	@ (8003c10 <UpDateEncoder+0xcc8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	801a      	strh	r2, [r3, #0]
							break;
 8003b0a:	e06e      	b.n	8003bea <UpDateEncoder+0xca2>
								LoadCell_SpanValueLow=0;
 8003b0c:	4b40      	ldr	r3, [pc, #256]	@ (8003c10 <UpDateEncoder+0xcc8>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	801a      	strh	r2, [r3, #0]
							break;
 8003b12:	e06a      	b.n	8003bea <UpDateEncoder+0xca2>
					case PAR_LOADCELL_SPAN_H://
							if(LoadCell_SpanValueHigh < 1500){
 8003b14:	4b3f      	ldr	r3, [pc, #252]	@ (8003c14 <UpDateEncoder+0xccc>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d810      	bhi.n	8003b44 <UpDateEncoder+0xbfc>
								if(LoadCell_SpanValueHigh> 0){
 8003b22:	4b3c      	ldr	r3, [pc, #240]	@ (8003c14 <UpDateEncoder+0xccc>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <UpDateEncoder+0xbf4>
									LoadCell_SpanValueHigh=LoadCell_SpanValueHigh-1;
 8003b2c:	4b39      	ldr	r3, [pc, #228]	@ (8003c14 <UpDateEncoder+0xccc>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	4b37      	ldr	r3, [pc, #220]	@ (8003c14 <UpDateEncoder+0xccc>)
 8003b38:	801a      	strh	r2, [r3, #0]
									LoadCell_SpanValueHigh=0;
								}
							}else{
								LoadCell_SpanValueHigh=0;
							}
							break;
 8003b3a:	e056      	b.n	8003bea <UpDateEncoder+0xca2>
									LoadCell_SpanValueHigh=0;
 8003b3c:	4b35      	ldr	r3, [pc, #212]	@ (8003c14 <UpDateEncoder+0xccc>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	801a      	strh	r2, [r3, #0]
							break;
 8003b42:	e052      	b.n	8003bea <UpDateEncoder+0xca2>
								LoadCell_SpanValueHigh=0;
 8003b44:	4b33      	ldr	r3, [pc, #204]	@ (8003c14 <UpDateEncoder+0xccc>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	801a      	strh	r2, [r3, #0]
							break;
 8003b4a:	e04e      	b.n	8003bea <UpDateEncoder+0xca2>
					default:
							printf(" Display default\n");
 8003b4c:	4832      	ldr	r0, [pc, #200]	@ (8003c18 <UpDateEncoder+0xcd0>)
 8003b4e:	f009 fca5 	bl	800d49c <puts>
						break;
 8003b52:	e04a      	b.n	8003bea <UpDateEncoder+0xca2>
				}//end of switch
			}else{

				fadcVal=fadcVal-0.1;
 8003b54:	4b31      	ldr	r3, [pc, #196]	@ (8003c1c <UpDateEncoder+0xcd4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fc fcd5 	bl	8000508 <__aeabi_f2d>
 8003b5e:	a326      	add	r3, pc, #152	@ (adr r3, 8003bf8 <UpDateEncoder+0xcb0>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc fb70 	bl	8000248 <__aeabi_dsub>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f7fd f81a 	bl	8000ba8 <__aeabi_d2f>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4a29      	ldr	r2, [pc, #164]	@ (8003c1c <UpDateEncoder+0xcd4>)
 8003b78:	6013      	str	r3, [r2, #0]
				if(fadcVal < 0) fadcVal=0;
 8003b7a:	4b28      	ldr	r3, [pc, #160]	@ (8003c1c <UpDateEncoder+0xcd4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd fb0c 	bl	80011a0 <__aeabi_fcmplt>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <UpDateEncoder+0xc50>
 8003b8e:	4b23      	ldr	r3, [pc, #140]	@ (8003c1c <UpDateEncoder+0xcd4>)
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e00b      	b.n	8003bb0 <UpDateEncoder+0xc68>
				else if (fadcVal >24)fadcVal=24.0;
 8003b98:	4b20      	ldr	r3, [pc, #128]	@ (8003c1c <UpDateEncoder+0xcd4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4920      	ldr	r1, [pc, #128]	@ (8003c20 <UpDateEncoder+0xcd8>)
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd fb1c 	bl	80011dc <__aeabi_fcmpgt>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <UpDateEncoder+0xc68>
 8003baa:	4b1c      	ldr	r3, [pc, #112]	@ (8003c1c <UpDateEncoder+0xcd4>)
 8003bac:	4a1c      	ldr	r2, [pc, #112]	@ (8003c20 <UpDateEncoder+0xcd8>)
 8003bae:	601a      	str	r2, [r3, #0]

				DataManager(CmdReadVariable,CurrentModel,PAR_fAdcValue);//CompfadcVal�� ���� ����
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <UpDateEncoder+0xcdc>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2212      	movs	r2, #18
 8003bb8:	4619      	mov	r1, r3
 8003bba:	2002      	movs	r0, #2
 8003bbc:	f000 f838 	bl	8003c30 <DataManager>
				if(CompfadcVal != fadcVal){
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <UpDateEncoder+0xce0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <UpDateEncoder+0xcd4>)
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd fade 	bl	800118c <__aeabi_fcmpeq>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <UpDateEncoder+0xca2>
					DataManager(CmdWriteEeprom,CurrentModel,PAR_fAdcValue);////�ټǺ������� ����
 8003bd6:	4b13      	ldr	r3, [pc, #76]	@ (8003c24 <UpDateEncoder+0xcdc>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2212      	movs	r2, #18
 8003bde:	4619      	mov	r1, r3
 8003be0:	2000      	movs	r0, #0
 8003be2:	f000 f825 	bl	8003c30 <DataManager>
 8003be6:	e000      	b.n	8003bea <UpDateEncoder+0xca2>
							break;
 8003be8:	bf00      	nop
				//WrEepromFloat(fadcVal,100+(150*CurrentModel));
			}
		}

	}
	lastEncoded = encoded;
 8003bea:	4a10      	ldr	r2, [pc, #64]	@ (8003c2c <UpDateEncoder+0xce4>)
 8003bec:	797b      	ldrb	r3, [r7, #5]
 8003bee:	7013      	strb	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	9999999a 	.word	0x9999999a
 8003bfc:	3fb99999 	.word	0x3fb99999
 8003c00:	200005bc 	.word	0x200005bc
 8003c04:	41200000 	.word	0x41200000
 8003c08:	200005d6 	.word	0x200005d6
 8003c0c:	200005d8 	.word	0x200005d8
 8003c10:	200005d2 	.word	0x200005d2
 8003c14:	200005d4 	.word	0x200005d4
 8003c18:	0800f8c0 	.word	0x0800f8c0
 8003c1c:	200005c0 	.word	0x200005c0
 8003c20:	41c00000 	.word	0x41c00000
 8003c24:	200005cc 	.word	0x200005cc
 8003c28:	200005c4 	.word	0x200005c4
 8003c2c:	2000058c 	.word	0x2000058c

08003c30 <DataManager>:




void DataManager(uint8_t WhatCmd,uint8_t modelNumber,uint8_t parameter)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	71bb      	strb	r3, [r7, #6]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	717b      	strb	r3, [r7, #5]
uint16_t memAddress=0,offsetNumber=40;
 8003c42:	2300      	movs	r3, #0
 8003c44:	81fb      	strh	r3, [r7, #14]
 8003c46:	2328      	movs	r3, #40	@ 0x28
 8003c48:	81bb      	strh	r3, [r7, #12]
uint16_t GetValue,SetValue;
	memAddress= offsetNumber *  modelNumber;
 8003c4a:	79bb      	ldrb	r3, [r7, #6]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	89ba      	ldrh	r2, [r7, #12]
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	81fb      	strh	r3, [r7, #14]
	switch(parameter){
 8003c56:	797b      	ldrb	r3, [r7, #5]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	2b11      	cmp	r3, #17
 8003c5c:	f200 849f 	bhi.w	800459e <DataManager+0x96e>
 8003c60:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <DataManager+0x38>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003cb1 	.word	0x08003cb1
 8003c6c:	08003d21 	.word	0x08003d21
 8003c70:	08003da7 	.word	0x08003da7
 8003c74:	08003e29 	.word	0x08003e29
 8003c78:	08003eab 	.word	0x08003eab
 8003c7c:	08003f4d 	.word	0x08003f4d
 8003c80:	08003fcf 	.word	0x08003fcf
 8003c84:	08004051 	.word	0x08004051
 8003c88:	080040d3 	.word	0x080040d3
 8003c8c:	08004145 	.word	0x08004145
 8003c90:	080041e5 	.word	0x080041e5
 8003c94:	08004255 	.word	0x08004255
 8003c98:	080042d7 	.word	0x080042d7
 8003c9c:	08004347 	.word	0x08004347
 8003ca0:	080043b7 	.word	0x080043b7
 8003ca4:	08004427 	.word	0x08004427
 8003ca8:	080044b7 	.word	0x080044b7
 8003cac:	0800450b 	.word	0x0800450b
		case PAR_MODEL: //1
			//printf(" Display PAR_MODEL\n");
			if(WhatCmd == CmdWriteEeprom){
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <DataManager+0xa0>
				SetValue=(uint16_t)CurrentModel;
 8003cb6:	4b9d      	ldr	r3, [pc, #628]	@ (8003f2c <DataManager+0x2fc>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+0,1);
 8003cbe:	89fa      	ldrh	r2, [r7, #14]
 8003cc0:	f107 0108 	add.w	r1, r7, #8
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	489a      	ldr	r0, [pc, #616]	@ (8003f30 <DataManager+0x300>)
 8003cc8:	f002 f93e 	bl	8005f48 <at24_HAL_WriteWords>
				CurrentModel=(uint8_t)GetValue;
				FndDisplay(CurrentModel,10);
			}else{//CmdReadVariable
				FndDisplay(CurrentModel,10);
			}
			break;
 8003ccc:	f000 bc68 	b.w	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d117      	bne.n	8003d06 <DataManager+0xd6>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+0, 1);
 8003cd6:	89fa      	ldrh	r2, [r7, #14]
 8003cd8:	f107 010a 	add.w	r1, r7, #10
 8003cdc:	2301      	movs	r3, #1
 8003cde:	4894      	ldr	r0, [pc, #592]	@ (8003f30 <DataManager+0x300>)
 8003ce0:	f002 f99c 	bl	800601c <at24_HAL_ReadWords>
				CurrentModel=(uint8_t)GetValue;
 8003ce4:	897b      	ldrh	r3, [r7, #10]
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	4b90      	ldr	r3, [pc, #576]	@ (8003f2c <DataManager+0x2fc>)
 8003cea:	701a      	strb	r2, [r3, #0]
				FndDisplay(CurrentModel,10);
 8003cec:	4b8f      	ldr	r3, [pc, #572]	@ (8003f2c <DataManager+0x2fc>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd f85e 	bl	8000db4 <__aeabi_ui2f>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	210a      	movs	r1, #10
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 f93f 	bl	8004f80 <FndDisplay>
			break;
 8003d02:	f000 bc4d 	b.w	80045a0 <DataManager+0x970>
				FndDisplay(CurrentModel,10);
 8003d06:	4b89      	ldr	r3, [pc, #548]	@ (8003f2c <DataManager+0x2fc>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fd f851 	bl	8000db4 <__aeabi_ui2f>
 8003d12:	4603      	mov	r3, r0
 8003d14:	210a      	movs	r1, #10
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 f932 	bl	8004f80 <FndDisplay>
			break;
 8003d1c:	f000 bc40 	b.w	80045a0 <DataManager+0x970>
		case PAR_CHK_ANG://2
			//printf(" Display PAR_CHK_ANG\n");
			if(WhatCmd == CmdWriteEeprom){
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d117      	bne.n	8003d56 <DataManager+0x126>
				SetValue=(uint16_t)(WireCheckAngle * 10);
 8003d26:	4b83      	ldr	r3, [pc, #524]	@ (8003f34 <DataManager+0x304>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4983      	ldr	r1, [pc, #524]	@ (8003f38 <DataManager+0x308>)
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd f899 	bl	8000e64 <__aeabi_fmul>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fd fa5b 	bl	80011f0 <__aeabi_f2uiz>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+1,1);
 8003d40:	89fb      	ldrh	r3, [r7, #14]
 8003d42:	3301      	adds	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	f107 0108 	add.w	r1, r7, #8
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4878      	ldr	r0, [pc, #480]	@ (8003f30 <DataManager+0x300>)
 8003d4e:	f002 f8fb 	bl	8005f48 <at24_HAL_WriteWords>
				WireCheckAngle=(float)GetValue/10;
				FndDisplay(WireCheckAngle,0);
			}else{//CmdReadVariable
				FndDisplay(WireCheckAngle,0);
			}
			break;
 8003d52:	f000 bc25 	b.w	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d11d      	bne.n	8003d98 <DataManager+0x168>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+1, 1);
 8003d5c:	89fb      	ldrh	r3, [r7, #14]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	f107 010a 	add.w	r1, r7, #10
 8003d66:	2301      	movs	r3, #1
 8003d68:	4871      	ldr	r0, [pc, #452]	@ (8003f30 <DataManager+0x300>)
 8003d6a:	f002 f957 	bl	800601c <at24_HAL_ReadWords>
				WireCheckAngle=(float)GetValue/10;
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fd f81f 	bl	8000db4 <__aeabi_ui2f>
 8003d76:	4603      	mov	r3, r0
 8003d78:	496f      	ldr	r1, [pc, #444]	@ (8003f38 <DataManager+0x308>)
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd f926 	bl	8000fcc <__aeabi_fdiv>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b6b      	ldr	r3, [pc, #428]	@ (8003f34 <DataManager+0x304>)
 8003d86:	601a      	str	r2, [r3, #0]
				FndDisplay(WireCheckAngle,0);
 8003d88:	4b6a      	ldr	r3, [pc, #424]	@ (8003f34 <DataManager+0x304>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 f8f6 	bl	8004f80 <FndDisplay>
			break;
 8003d94:	f000 bc04 	b.w	80045a0 <DataManager+0x970>
				FndDisplay(WireCheckAngle,0);
 8003d98:	4b66      	ldr	r3, [pc, #408]	@ (8003f34 <DataManager+0x304>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f8ee 	bl	8004f80 <FndDisplay>
			break;
 8003da4:	e3fc      	b.n	80045a0 <DataManager+0x970>
		case PAR_P://3
			//printf(" Display PAR_P\n");
			if(WhatCmd == CmdWriteEeprom){
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d116      	bne.n	8003dda <DataManager+0x1aa>
				SetValue=(uint16_t)(K_p * 100);
 8003dac:	4b63      	ldr	r3, [pc, #396]	@ (8003f3c <DataManager+0x30c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4963      	ldr	r1, [pc, #396]	@ (8003f40 <DataManager+0x310>)
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd f856 	bl	8000e64 <__aeabi_fmul>
 8003db8:	4603      	mov	r3, r0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd fa18 	bl	80011f0 <__aeabi_f2uiz>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+2,1);
 8003dc6:	89fb      	ldrh	r3, [r7, #14]
 8003dc8:	3302      	adds	r3, #2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	f107 0108 	add.w	r1, r7, #8
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4857      	ldr	r0, [pc, #348]	@ (8003f30 <DataManager+0x300>)
 8003dd4:	f002 f8b8 	bl	8005f48 <at24_HAL_WriteWords>
				K_p=(float)GetValue/100;
				FndDisplay(K_p,2);
			}else{//CmdReadVariable
				FndDisplay(K_p,2);
			}
			break;
 8003dd8:	e3e2      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d11c      	bne.n	8003e1a <DataManager+0x1ea>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+2, 1);
 8003de0:	89fb      	ldrh	r3, [r7, #14]
 8003de2:	3302      	adds	r3, #2
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	f107 010a 	add.w	r1, r7, #10
 8003dea:	2301      	movs	r3, #1
 8003dec:	4850      	ldr	r0, [pc, #320]	@ (8003f30 <DataManager+0x300>)
 8003dee:	f002 f915 	bl	800601c <at24_HAL_ReadWords>
				K_p=(float)GetValue/100;
 8003df2:	897b      	ldrh	r3, [r7, #10]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc ffdd 	bl	8000db4 <__aeabi_ui2f>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4950      	ldr	r1, [pc, #320]	@ (8003f40 <DataManager+0x310>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd f8e4 	bl	8000fcc <__aeabi_fdiv>
 8003e04:	4603      	mov	r3, r0
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b4c      	ldr	r3, [pc, #304]	@ (8003f3c <DataManager+0x30c>)
 8003e0a:	601a      	str	r2, [r3, #0]
				FndDisplay(K_p,2);
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <DataManager+0x30c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 f8b4 	bl	8004f80 <FndDisplay>
			break;
 8003e18:	e3c2      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(K_p,2);
 8003e1a:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <DataManager+0x30c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2102      	movs	r1, #2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 f8ad 	bl	8004f80 <FndDisplay>
			break;
 8003e26:	e3bb      	b.n	80045a0 <DataManager+0x970>
		case PAR_I://4
			//printf(" Display PAR_I\n");
			if(WhatCmd == CmdWriteEeprom){
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <DataManager+0x22c>
				SetValue=(uint16_t)(K_i * 100);
 8003e2e:	4b45      	ldr	r3, [pc, #276]	@ (8003f44 <DataManager+0x314>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4943      	ldr	r1, [pc, #268]	@ (8003f40 <DataManager+0x310>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fd f815 	bl	8000e64 <__aeabi_fmul>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd f9d7 	bl	80011f0 <__aeabi_f2uiz>
 8003e42:	4603      	mov	r3, r0
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+3,1);
 8003e48:	89fb      	ldrh	r3, [r7, #14]
 8003e4a:	3303      	adds	r3, #3
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	f107 0108 	add.w	r1, r7, #8
 8003e52:	2301      	movs	r3, #1
 8003e54:	4836      	ldr	r0, [pc, #216]	@ (8003f30 <DataManager+0x300>)
 8003e56:	f002 f877 	bl	8005f48 <at24_HAL_WriteWords>
				K_i=(float)GetValue/100;
				FndDisplay(K_i,2);
			}else{//CmdReadVariable
				FndDisplay(K_i,2);
			}
			break;
 8003e5a:	e3a1      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d11c      	bne.n	8003e9c <DataManager+0x26c>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+3, 1);
 8003e62:	89fb      	ldrh	r3, [r7, #14]
 8003e64:	3303      	adds	r3, #3
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	f107 010a 	add.w	r1, r7, #10
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4830      	ldr	r0, [pc, #192]	@ (8003f30 <DataManager+0x300>)
 8003e70:	f002 f8d4 	bl	800601c <at24_HAL_ReadWords>
				K_i=(float)GetValue/100;
 8003e74:	897b      	ldrh	r3, [r7, #10]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc ff9c 	bl	8000db4 <__aeabi_ui2f>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4930      	ldr	r1, [pc, #192]	@ (8003f40 <DataManager+0x310>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fd f8a3 	bl	8000fcc <__aeabi_fdiv>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f44 <DataManager+0x314>)
 8003e8c:	601a      	str	r2, [r3, #0]
				FndDisplay(K_i,2);
 8003e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <DataManager+0x314>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 f873 	bl	8004f80 <FndDisplay>
			break;
 8003e9a:	e381      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(K_i,2);
 8003e9c:	4b29      	ldr	r3, [pc, #164]	@ (8003f44 <DataManager+0x314>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 f86c 	bl	8004f80 <FndDisplay>
			break;
 8003ea8:	e37a      	b.n	80045a0 <DataManager+0x970>
		case PAR_D://5
			//printf(" Display PAR_D\n");
			if(WhatCmd == CmdWriteEeprom){
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d116      	bne.n	8003ede <DataManager+0x2ae>
				SetValue=(uint16_t)(K_d * 100);
 8003eb0:	4b25      	ldr	r3, [pc, #148]	@ (8003f48 <DataManager+0x318>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4922      	ldr	r1, [pc, #136]	@ (8003f40 <DataManager+0x310>)
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc ffd4 	bl	8000e64 <__aeabi_fmul>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fd f996 	bl	80011f0 <__aeabi_f2uiz>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+4,1);
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	f107 0108 	add.w	r1, r7, #8
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	4816      	ldr	r0, [pc, #88]	@ (8003f30 <DataManager+0x300>)
 8003ed8:	f002 f836 	bl	8005f48 <at24_HAL_WriteWords>
				K_d=(float)GetValue/100;
				FndDisplay(K_d,2);
			}else{//CmdReadVariable
				FndDisplay(K_d,2);
			}
			break;
 8003edc:	e360      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d11c      	bne.n	8003f1e <DataManager+0x2ee>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+4, 1);
 8003ee4:	89fb      	ldrh	r3, [r7, #14]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	f107 010a 	add.w	r1, r7, #10
 8003eee:	2301      	movs	r3, #1
 8003ef0:	480f      	ldr	r0, [pc, #60]	@ (8003f30 <DataManager+0x300>)
 8003ef2:	f002 f893 	bl	800601c <at24_HAL_ReadWords>
				K_d=(float)GetValue/100;
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc ff5b 	bl	8000db4 <__aeabi_ui2f>
 8003efe:	4603      	mov	r3, r0
 8003f00:	490f      	ldr	r1, [pc, #60]	@ (8003f40 <DataManager+0x310>)
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd f862 	bl	8000fcc <__aeabi_fdiv>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f48 <DataManager+0x318>)
 8003f0e:	601a      	str	r2, [r3, #0]
				FndDisplay(K_d,2);
 8003f10:	4b0d      	ldr	r3, [pc, #52]	@ (8003f48 <DataManager+0x318>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2102      	movs	r1, #2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 f832 	bl	8004f80 <FndDisplay>
			break;
 8003f1c:	e340      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(K_d,2);
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <DataManager+0x318>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2102      	movs	r1, #2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f82b 	bl	8004f80 <FndDisplay>
			break;
 8003f2a:	e339      	b.n	80045a0 <DataManager+0x970>
 8003f2c:	200005cc 	.word	0x200005cc
 8003f30:	2000033c 	.word	0x2000033c
 8003f34:	200005a0 	.word	0x200005a0
 8003f38:	41200000 	.word	0x41200000
 8003f3c:	200005a4 	.word	0x200005a4
 8003f40:	42c80000 	.word	0x42c80000
 8003f44:	200005a8 	.word	0x200005a8
 8003f48:	200005ac 	.word	0x200005ac
		case PAR_MAX://6
			//printf(" Display PAR_MAX\n");
			if(WhatCmd == CmdWriteEeprom){
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <DataManager+0x350>
				SetValue=(uint16_t)(K_max * 10);
 8003f52:	4b9d      	ldr	r3, [pc, #628]	@ (80041c8 <DataManager+0x598>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	499d      	ldr	r1, [pc, #628]	@ (80041cc <DataManager+0x59c>)
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc ff83 	bl	8000e64 <__aeabi_fmul>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd f945 	bl	80011f0 <__aeabi_f2uiz>
 8003f66:	4603      	mov	r3, r0
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+5,1);
 8003f6c:	89fb      	ldrh	r3, [r7, #14]
 8003f6e:	3305      	adds	r3, #5
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	f107 0108 	add.w	r1, r7, #8
 8003f76:	2301      	movs	r3, #1
 8003f78:	4895      	ldr	r0, [pc, #596]	@ (80041d0 <DataManager+0x5a0>)
 8003f7a:	f001 ffe5 	bl	8005f48 <at24_HAL_WriteWords>
				K_max=(float)GetValue/10;
				FndDisplay(K_max,1);
			}else{//CmdReadVariable
				FndDisplay(K_max,1);
			}
			break;
 8003f7e:	e30f      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d11c      	bne.n	8003fc0 <DataManager+0x390>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+5, 1);
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	3305      	adds	r3, #5
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	f107 010a 	add.w	r1, r7, #10
 8003f90:	2301      	movs	r3, #1
 8003f92:	488f      	ldr	r0, [pc, #572]	@ (80041d0 <DataManager+0x5a0>)
 8003f94:	f002 f842 	bl	800601c <at24_HAL_ReadWords>
				K_max=(float)GetValue/10;
 8003f98:	897b      	ldrh	r3, [r7, #10]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc ff0a 	bl	8000db4 <__aeabi_ui2f>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	498a      	ldr	r1, [pc, #552]	@ (80041cc <DataManager+0x59c>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd f811 	bl	8000fcc <__aeabi_fdiv>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b86      	ldr	r3, [pc, #536]	@ (80041c8 <DataManager+0x598>)
 8003fb0:	601a      	str	r2, [r3, #0]
				FndDisplay(K_max,1);
 8003fb2:	4b85      	ldr	r3, [pc, #532]	@ (80041c8 <DataManager+0x598>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 ffe1 	bl	8004f80 <FndDisplay>
			break;
 8003fbe:	e2ef      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(K_max,1);
 8003fc0:	4b81      	ldr	r3, [pc, #516]	@ (80041c8 <DataManager+0x598>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 ffda 	bl	8004f80 <FndDisplay>
			break;
 8003fcc:	e2e8      	b.n	80045a0 <DataManager+0x970>
		case PAR_MIN://7
			//printf(" Display PAR_MIN\n");
			if(WhatCmd == CmdWriteEeprom){
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d116      	bne.n	8004002 <DataManager+0x3d2>
				SetValue=(uint16_t)(K_min * 10);
 8003fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80041d4 <DataManager+0x5a4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	497c      	ldr	r1, [pc, #496]	@ (80041cc <DataManager+0x59c>)
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc ff42 	bl	8000e64 <__aeabi_fmul>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd f904 	bl	80011f0 <__aeabi_f2uiz>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+6,1);
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	3306      	adds	r3, #6
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	f107 0108 	add.w	r1, r7, #8
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	4875      	ldr	r0, [pc, #468]	@ (80041d0 <DataManager+0x5a0>)
 8003ffc:	f001 ffa4 	bl	8005f48 <at24_HAL_WriteWords>
				K_min=(float)GetValue/10;
				FndDisplay(K_min,1);
			}else{//CmdReadVariable
				FndDisplay(K_min,1);
			}
			break;
 8004000:	e2ce      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d11c      	bne.n	8004042 <DataManager+0x412>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+6, 1);
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	3306      	adds	r3, #6
 800400c:	b29a      	uxth	r2, r3
 800400e:	f107 010a 	add.w	r1, r7, #10
 8004012:	2301      	movs	r3, #1
 8004014:	486e      	ldr	r0, [pc, #440]	@ (80041d0 <DataManager+0x5a0>)
 8004016:	f002 f801 	bl	800601c <at24_HAL_ReadWords>
				K_min=(float)GetValue/10;
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc fec9 	bl	8000db4 <__aeabi_ui2f>
 8004022:	4603      	mov	r3, r0
 8004024:	4969      	ldr	r1, [pc, #420]	@ (80041cc <DataManager+0x59c>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc ffd0 	bl	8000fcc <__aeabi_fdiv>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	4b68      	ldr	r3, [pc, #416]	@ (80041d4 <DataManager+0x5a4>)
 8004032:	601a      	str	r2, [r3, #0]
				FndDisplay(K_min,1);
 8004034:	4b67      	ldr	r3, [pc, #412]	@ (80041d4 <DataManager+0x5a4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	4618      	mov	r0, r3
 800403c:	f000 ffa0 	bl	8004f80 <FndDisplay>
			break;
 8004040:	e2ae      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(K_min,1);
 8004042:	4b64      	ldr	r3, [pc, #400]	@ (80041d4 <DataManager+0x5a4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ff99 	bl	8004f80 <FndDisplay>
			break;
 800404e:	e2a7      	b.n	80045a0 <DataManager+0x970>
		case PAR_POS: //8 Bar Postion
			//printf(" Display PAR_POS\n");
			if(WhatCmd == CmdWriteEeprom){
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d116      	bne.n	8004084 <DataManager+0x454>
				SetValue=(uint16_t)(BarAngle * 10);
 8004056:	4b60      	ldr	r3, [pc, #384]	@ (80041d8 <DataManager+0x5a8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	495c      	ldr	r1, [pc, #368]	@ (80041cc <DataManager+0x59c>)
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc ff01 	bl	8000e64 <__aeabi_fmul>
 8004062:	4603      	mov	r3, r0
 8004064:	4618      	mov	r0, r3
 8004066:	f7fd f8c3 	bl	80011f0 <__aeabi_f2uiz>
 800406a:	4603      	mov	r3, r0
 800406c:	b29b      	uxth	r3, r3
 800406e:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+7,1);
 8004070:	89fb      	ldrh	r3, [r7, #14]
 8004072:	3307      	adds	r3, #7
 8004074:	b29a      	uxth	r2, r3
 8004076:	f107 0108 	add.w	r1, r7, #8
 800407a:	2301      	movs	r3, #1
 800407c:	4854      	ldr	r0, [pc, #336]	@ (80041d0 <DataManager+0x5a0>)
 800407e:	f001 ff63 	bl	8005f48 <at24_HAL_WriteWords>
				BarAngle=(float)GetValue/10;
				FndDisplay(BarAngle,0);
			}else{//CmdReadVariable
				FndDisplay(BarAngle,0);
			}
			break;
 8004082:	e28d      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d11c      	bne.n	80040c4 <DataManager+0x494>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+7, 1);
 800408a:	89fb      	ldrh	r3, [r7, #14]
 800408c:	3307      	adds	r3, #7
 800408e:	b29a      	uxth	r2, r3
 8004090:	f107 010a 	add.w	r1, r7, #10
 8004094:	2301      	movs	r3, #1
 8004096:	484e      	ldr	r0, [pc, #312]	@ (80041d0 <DataManager+0x5a0>)
 8004098:	f001 ffc0 	bl	800601c <at24_HAL_ReadWords>
				BarAngle=(float)GetValue/10;
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc fe88 	bl	8000db4 <__aeabi_ui2f>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4949      	ldr	r1, [pc, #292]	@ (80041cc <DataManager+0x59c>)
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fc ff8f 	bl	8000fcc <__aeabi_fdiv>
 80040ae:	4603      	mov	r3, r0
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b49      	ldr	r3, [pc, #292]	@ (80041d8 <DataManager+0x5a8>)
 80040b4:	601a      	str	r2, [r3, #0]
				FndDisplay(BarAngle,0);
 80040b6:	4b48      	ldr	r3, [pc, #288]	@ (80041d8 <DataManager+0x5a8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 ff5f 	bl	8004f80 <FndDisplay>
			break;
 80040c2:	e26d      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(BarAngle,0);
 80040c4:	4b44      	ldr	r3, [pc, #272]	@ (80041d8 <DataManager+0x5a8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 ff58 	bl	8004f80 <FndDisplay>
			break;
 80040d0:	e266      	b.n	80045a0 <DataManager+0x970>
		case PAR_DISP://9 0 tension, 1 volt tension
			//printf(" Display PAR_DISP\n");
			if(WhatCmd == CmdWriteEeprom){
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10d      	bne.n	80040f4 <DataManager+0x4c4>
				SetValue=(uint16_t)DisplayMode;
 80040d8:	4b40      	ldr	r3, [pc, #256]	@ (80041dc <DataManager+0x5ac>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+8,1);
 80040e0:	89fb      	ldrh	r3, [r7, #14]
 80040e2:	3308      	adds	r3, #8
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	f107 0108 	add.w	r1, r7, #8
 80040ea:	2301      	movs	r3, #1
 80040ec:	4838      	ldr	r0, [pc, #224]	@ (80041d0 <DataManager+0x5a0>)
 80040ee:	f001 ff2b 	bl	8005f48 <at24_HAL_WriteWords>
				DisplayMode=(uint8_t)GetValue;
				FndDisplay(DisplayMode,10);
			}else{
				FndDisplay(DisplayMode,10);
			}
			break;
 80040f2:	e255      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d118      	bne.n	800412c <DataManager+0x4fc>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+8, 1);
 80040fa:	89fb      	ldrh	r3, [r7, #14]
 80040fc:	3308      	adds	r3, #8
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f107 010a 	add.w	r1, r7, #10
 8004104:	2301      	movs	r3, #1
 8004106:	4832      	ldr	r0, [pc, #200]	@ (80041d0 <DataManager+0x5a0>)
 8004108:	f001 ff88 	bl	800601c <at24_HAL_ReadWords>
				DisplayMode=(uint8_t)GetValue;
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	4b32      	ldr	r3, [pc, #200]	@ (80041dc <DataManager+0x5ac>)
 8004112:	701a      	strb	r2, [r3, #0]
				FndDisplay(DisplayMode,10);
 8004114:	4b31      	ldr	r3, [pc, #196]	@ (80041dc <DataManager+0x5ac>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fe4a 	bl	8000db4 <__aeabi_ui2f>
 8004120:	4603      	mov	r3, r0
 8004122:	210a      	movs	r1, #10
 8004124:	4618      	mov	r0, r3
 8004126:	f000 ff2b 	bl	8004f80 <FndDisplay>
			break;
 800412a:	e239      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(DisplayMode,10);
 800412c:	4b2b      	ldr	r3, [pc, #172]	@ (80041dc <DataManager+0x5ac>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc fe3e 	bl	8000db4 <__aeabi_ui2f>
 8004138:	4603      	mov	r3, r0
 800413a:	210a      	movs	r1, #10
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ff1f 	bl	8004f80 <FndDisplay>
			break;
 8004142:	e22d      	b.n	80045a0 <DataManager+0x970>
		case PAR_MULTI://10
			//printf(" Display PAR_MULTI\n");
			if(WhatCmd == CmdWriteEeprom){
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d116      	bne.n	8004178 <DataManager+0x548>
				SetValue=(uint16_t)(StepTension * 10);
 800414a:	4b25      	ldr	r3, [pc, #148]	@ (80041e0 <DataManager+0x5b0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	491f      	ldr	r1, [pc, #124]	@ (80041cc <DataManager+0x59c>)
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc fe87 	bl	8000e64 <__aeabi_fmul>
 8004156:	4603      	mov	r3, r0
 8004158:	4618      	mov	r0, r3
 800415a:	f7fd f849 	bl	80011f0 <__aeabi_f2uiz>
 800415e:	4603      	mov	r3, r0
 8004160:	b29b      	uxth	r3, r3
 8004162:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+9,1);
 8004164:	89fb      	ldrh	r3, [r7, #14]
 8004166:	3309      	adds	r3, #9
 8004168:	b29a      	uxth	r2, r3
 800416a:	f107 0108 	add.w	r1, r7, #8
 800416e:	2301      	movs	r3, #1
 8004170:	4817      	ldr	r0, [pc, #92]	@ (80041d0 <DataManager+0x5a0>)
 8004172:	f001 fee9 	bl	8005f48 <at24_HAL_WriteWords>
				StepTension=(float)GetValue/10;
				FndDisplay(StepTension,1);
			}else{//CmdReadVariable
				FndDisplay(StepTension,1);
			}
			break;
 8004176:	e213      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d11c      	bne.n	80041b8 <DataManager+0x588>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+9, 1);
 800417e:	89fb      	ldrh	r3, [r7, #14]
 8004180:	3309      	adds	r3, #9
 8004182:	b29a      	uxth	r2, r3
 8004184:	f107 010a 	add.w	r1, r7, #10
 8004188:	2301      	movs	r3, #1
 800418a:	4811      	ldr	r0, [pc, #68]	@ (80041d0 <DataManager+0x5a0>)
 800418c:	f001 ff46 	bl	800601c <at24_HAL_ReadWords>
				StepTension=(float)GetValue/10;
 8004190:	897b      	ldrh	r3, [r7, #10]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc fe0e 	bl	8000db4 <__aeabi_ui2f>
 8004198:	4603      	mov	r3, r0
 800419a:	490c      	ldr	r1, [pc, #48]	@ (80041cc <DataManager+0x59c>)
 800419c:	4618      	mov	r0, r3
 800419e:	f7fc ff15 	bl	8000fcc <__aeabi_fdiv>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b0e      	ldr	r3, [pc, #56]	@ (80041e0 <DataManager+0x5b0>)
 80041a8:	601a      	str	r2, [r3, #0]
				FndDisplay(StepTension,1);
 80041aa:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <DataManager+0x5b0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2101      	movs	r1, #1
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fee5 	bl	8004f80 <FndDisplay>
			break;
 80041b6:	e1f3      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(StepTension,1);
 80041b8:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <DataManager+0x5b0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fede 	bl	8004f80 <FndDisplay>
			break;
 80041c4:	e1ec      	b.n	80045a0 <DataManager+0x970>
 80041c6:	bf00      	nop
 80041c8:	200005b4 	.word	0x200005b4
 80041cc:	41200000 	.word	0x41200000
 80041d0:	2000033c 	.word	0x2000033c
 80041d4:	200005b0 	.word	0x200005b0
 80041d8:	2000059c 	.word	0x2000059c
 80041dc:	200005cd 	.word	0x200005cd
 80041e0:	200005b8 	.word	0x200005b8
		case PAR_LOADCELL_OFFSET://11
			//printf(" Display PAR_LOADCELL_OFFSET\n");
			if(WhatCmd == CmdWriteEeprom){
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <DataManager+0x5d6>
				SetValue=(uint16_t)LoadCell_OffSetValue ;
 80041ea:	4b97      	ldr	r3, [pc, #604]	@ (8004448 <DataManager+0x818>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+10,1);
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	330a      	adds	r3, #10
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	f107 0108 	add.w	r1, r7, #8
 80041fc:	2301      	movs	r3, #1
 80041fe:	4893      	ldr	r0, [pc, #588]	@ (800444c <DataManager+0x81c>)
 8004200:	f001 fea2 	bl	8005f48 <at24_HAL_WriteWords>
				LoadCell_OffSetValue=GetValue;
				FndDisplay(LoadCell_OffSetValue,100);
			}else{//CmdReadVariable
				FndDisplay(LoadCell_OffSetValue,100);
			}
			break;
 8004204:	e1cc      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d117      	bne.n	800423c <DataManager+0x60c>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+10, 1);
 800420c:	89fb      	ldrh	r3, [r7, #14]
 800420e:	330a      	adds	r3, #10
 8004210:	b29a      	uxth	r2, r3
 8004212:	f107 010a 	add.w	r1, r7, #10
 8004216:	2301      	movs	r3, #1
 8004218:	488c      	ldr	r0, [pc, #560]	@ (800444c <DataManager+0x81c>)
 800421a:	f001 feff 	bl	800601c <at24_HAL_ReadWords>
				LoadCell_OffSetValue=GetValue;
 800421e:	897a      	ldrh	r2, [r7, #10]
 8004220:	4b89      	ldr	r3, [pc, #548]	@ (8004448 <DataManager+0x818>)
 8004222:	801a      	strh	r2, [r3, #0]
				FndDisplay(LoadCell_OffSetValue,100);
 8004224:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <DataManager+0x818>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	4618      	mov	r0, r3
 800422c:	f7fc fdc2 	bl	8000db4 <__aeabi_ui2f>
 8004230:	4603      	mov	r3, r0
 8004232:	2164      	movs	r1, #100	@ 0x64
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fea3 	bl	8004f80 <FndDisplay>
			break;
 800423a:	e1b1      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(LoadCell_OffSetValue,100);
 800423c:	4b82      	ldr	r3, [pc, #520]	@ (8004448 <DataManager+0x818>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	4618      	mov	r0, r3
 8004244:	f7fc fdb6 	bl	8000db4 <__aeabi_ui2f>
 8004248:	4603      	mov	r3, r0
 800424a:	2164      	movs	r1, #100	@ 0x64
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fe97 	bl	8004f80 <FndDisplay>
			break;
 8004252:	e1a5      	b.n	80045a0 <DataManager+0x970>
		case PAR_ADGAIN://12
			//printf(" Display PAR_ADGAIN\n");
			if(WhatCmd == CmdWriteEeprom){
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <DataManager+0x658>
				SetValue=(uint16_t)(AdGain *10);
 800425a:	4b7d      	ldr	r3, [pc, #500]	@ (8004450 <DataManager+0x820>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	497d      	ldr	r1, [pc, #500]	@ (8004454 <DataManager+0x824>)
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc fdff 	bl	8000e64 <__aeabi_fmul>
 8004266:	4603      	mov	r3, r0
 8004268:	4618      	mov	r0, r3
 800426a:	f7fc ffc1 	bl	80011f0 <__aeabi_f2uiz>
 800426e:	4603      	mov	r3, r0
 8004270:	b29b      	uxth	r3, r3
 8004272:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+11,1);
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	330b      	adds	r3, #11
 8004278:	b29a      	uxth	r2, r3
 800427a:	f107 0108 	add.w	r1, r7, #8
 800427e:	2301      	movs	r3, #1
 8004280:	4872      	ldr	r0, [pc, #456]	@ (800444c <DataManager+0x81c>)
 8004282:	f001 fe61 	bl	8005f48 <at24_HAL_WriteWords>
				AdGain=(float)GetValue/10;
				FndDisplay(AdGain,1);
			}else{//CmdReadVariable
				FndDisplay(AdGain,1);
			}
			break;
 8004286:	e18b      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d11c      	bne.n	80042c8 <DataManager+0x698>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+11, 1);
 800428e:	89fb      	ldrh	r3, [r7, #14]
 8004290:	330b      	adds	r3, #11
 8004292:	b29a      	uxth	r2, r3
 8004294:	f107 010a 	add.w	r1, r7, #10
 8004298:	2301      	movs	r3, #1
 800429a:	486c      	ldr	r0, [pc, #432]	@ (800444c <DataManager+0x81c>)
 800429c:	f001 febe 	bl	800601c <at24_HAL_ReadWords>
				AdGain=(float)GetValue/10;
 80042a0:	897b      	ldrh	r3, [r7, #10]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc fd86 	bl	8000db4 <__aeabi_ui2f>
 80042a8:	4603      	mov	r3, r0
 80042aa:	496a      	ldr	r1, [pc, #424]	@ (8004454 <DataManager+0x824>)
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc fe8d 	bl	8000fcc <__aeabi_fdiv>
 80042b2:	4603      	mov	r3, r0
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b66      	ldr	r3, [pc, #408]	@ (8004450 <DataManager+0x820>)
 80042b8:	601a      	str	r2, [r3, #0]
				FndDisplay(AdGain,1);
 80042ba:	4b65      	ldr	r3, [pc, #404]	@ (8004450 <DataManager+0x820>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fe5d 	bl	8004f80 <FndDisplay>
			break;
 80042c6:	e16b      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(AdGain,1);
 80042c8:	4b61      	ldr	r3, [pc, #388]	@ (8004450 <DataManager+0x820>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2101      	movs	r1, #1
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fe56 	bl	8004f80 <FndDisplay>
			break;
 80042d4:	e164      	b.n	80045a0 <DataManager+0x970>
		case PAR_PLIMIT://13
			//printf(" Display PAR_PLIMIT\n");
			if(WhatCmd == CmdWriteEeprom){
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10d      	bne.n	80042f8 <DataManager+0x6c8>
				SetValue=(uint16_t)MaxValue;
 80042dc:	4b5e      	ldr	r3, [pc, #376]	@ (8004458 <DataManager+0x828>)
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+12,1);
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	330c      	adds	r3, #12
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	f107 0108 	add.w	r1, r7, #8
 80042ee:	2301      	movs	r3, #1
 80042f0:	4856      	ldr	r0, [pc, #344]	@ (800444c <DataManager+0x81c>)
 80042f2:	f001 fe29 	bl	8005f48 <at24_HAL_WriteWords>
				MaxValue=GetValue;
				FndDisplay(MaxValue,100);
			}else{//CmdReadVariable
				FndDisplay(MaxValue,100);
			}
			break;
 80042f6:	e153      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d117      	bne.n	800432e <DataManager+0x6fe>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+12, 1);
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	330c      	adds	r3, #12
 8004302:	b29a      	uxth	r2, r3
 8004304:	f107 010a 	add.w	r1, r7, #10
 8004308:	2301      	movs	r3, #1
 800430a:	4850      	ldr	r0, [pc, #320]	@ (800444c <DataManager+0x81c>)
 800430c:	f001 fe86 	bl	800601c <at24_HAL_ReadWords>
				MaxValue=GetValue;
 8004310:	897a      	ldrh	r2, [r7, #10]
 8004312:	4b51      	ldr	r3, [pc, #324]	@ (8004458 <DataManager+0x828>)
 8004314:	801a      	strh	r2, [r3, #0]
				FndDisplay(MaxValue,100);
 8004316:	4b50      	ldr	r3, [pc, #320]	@ (8004458 <DataManager+0x828>)
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc fd49 	bl	8000db4 <__aeabi_ui2f>
 8004322:	4603      	mov	r3, r0
 8004324:	2164      	movs	r1, #100	@ 0x64
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fe2a 	bl	8004f80 <FndDisplay>
			break;
 800432c:	e138      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(MaxValue,100);
 800432e:	4b4a      	ldr	r3, [pc, #296]	@ (8004458 <DataManager+0x828>)
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc fd3d 	bl	8000db4 <__aeabi_ui2f>
 800433a:	4603      	mov	r3, r0
 800433c:	2164      	movs	r1, #100	@ 0x64
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fe1e 	bl	8004f80 <FndDisplay>
			break;
 8004344:	e12c      	b.n	80045a0 <DataManager+0x970>
		case PAR_MLIMIT://14
			//printf(" Display PAR_MLIMIT\n");
			if(WhatCmd == CmdWriteEeprom){
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <DataManager+0x738>
				SetValue=(uint16_t)MinValue;
 800434c:	4b43      	ldr	r3, [pc, #268]	@ (800445c <DataManager+0x82c>)
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+13,1);
 8004354:	89fb      	ldrh	r3, [r7, #14]
 8004356:	330d      	adds	r3, #13
 8004358:	b29a      	uxth	r2, r3
 800435a:	f107 0108 	add.w	r1, r7, #8
 800435e:	2301      	movs	r3, #1
 8004360:	483a      	ldr	r0, [pc, #232]	@ (800444c <DataManager+0x81c>)
 8004362:	f001 fdf1 	bl	8005f48 <at24_HAL_WriteWords>
				MinValue=GetValue;
				FndDisplay(MinValue,100);
			}else{//CmdReadVariable
				FndDisplay(MinValue,100);
			}
			break;
 8004366:	e11b      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d117      	bne.n	800439e <DataManager+0x76e>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+13, 1);
 800436e:	89fb      	ldrh	r3, [r7, #14]
 8004370:	330d      	adds	r3, #13
 8004372:	b29a      	uxth	r2, r3
 8004374:	f107 010a 	add.w	r1, r7, #10
 8004378:	2301      	movs	r3, #1
 800437a:	4834      	ldr	r0, [pc, #208]	@ (800444c <DataManager+0x81c>)
 800437c:	f001 fe4e 	bl	800601c <at24_HAL_ReadWords>
				MinValue=GetValue;
 8004380:	897a      	ldrh	r2, [r7, #10]
 8004382:	4b36      	ldr	r3, [pc, #216]	@ (800445c <DataManager+0x82c>)
 8004384:	801a      	strh	r2, [r3, #0]
				FndDisplay(MinValue,100);
 8004386:	4b35      	ldr	r3, [pc, #212]	@ (800445c <DataManager+0x82c>)
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	4618      	mov	r0, r3
 800438e:	f7fc fd11 	bl	8000db4 <__aeabi_ui2f>
 8004392:	4603      	mov	r3, r0
 8004394:	2164      	movs	r1, #100	@ 0x64
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fdf2 	bl	8004f80 <FndDisplay>
			break;
 800439c:	e100      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(MinValue,100);
 800439e:	4b2f      	ldr	r3, [pc, #188]	@ (800445c <DataManager+0x82c>)
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc fd05 	bl	8000db4 <__aeabi_ui2f>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2164      	movs	r1, #100	@ 0x64
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fde6 	bl	8004f80 <FndDisplay>
			break;
 80043b4:	e0f4      	b.n	80045a0 <DataManager+0x970>

		case PAR_LOADCELL_SPAN_L://15
			//printf(" Display PAR_LOADCELL_SPAN\n");
			if(WhatCmd == CmdWriteEeprom){
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <DataManager+0x7a8>
				SetValue=LoadCell_SpanValueLow ;
 80043bc:	4b28      	ldr	r3, [pc, #160]	@ (8004460 <DataManager+0x830>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+14,1);
 80043c4:	89fb      	ldrh	r3, [r7, #14]
 80043c6:	330e      	adds	r3, #14
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	f107 0108 	add.w	r1, r7, #8
 80043ce:	2301      	movs	r3, #1
 80043d0:	481e      	ldr	r0, [pc, #120]	@ (800444c <DataManager+0x81c>)
 80043d2:	f001 fdb9 	bl	8005f48 <at24_HAL_WriteWords>
				LoadCell_SpanValueLow=GetValue;
				FndDisplay(LoadCell_SpanValueLow,100);
			}else{//CmdReadVariable
				FndDisplay(LoadCell_SpanValueLow,100);
			}
			break;
 80043d6:	e0e3      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d117      	bne.n	800440e <DataManager+0x7de>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+14, 1);
 80043de:	89fb      	ldrh	r3, [r7, #14]
 80043e0:	330e      	adds	r3, #14
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	f107 010a 	add.w	r1, r7, #10
 80043e8:	2301      	movs	r3, #1
 80043ea:	4818      	ldr	r0, [pc, #96]	@ (800444c <DataManager+0x81c>)
 80043ec:	f001 fe16 	bl	800601c <at24_HAL_ReadWords>
				LoadCell_SpanValueLow=GetValue;
 80043f0:	897a      	ldrh	r2, [r7, #10]
 80043f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004460 <DataManager+0x830>)
 80043f4:	801a      	strh	r2, [r3, #0]
				FndDisplay(LoadCell_SpanValueLow,100);
 80043f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004460 <DataManager+0x830>)
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc fcd9 	bl	8000db4 <__aeabi_ui2f>
 8004402:	4603      	mov	r3, r0
 8004404:	2164      	movs	r1, #100	@ 0x64
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fdba 	bl	8004f80 <FndDisplay>
			break;
 800440c:	e0c8      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(LoadCell_SpanValueLow,100);
 800440e:	4b14      	ldr	r3, [pc, #80]	@ (8004460 <DataManager+0x830>)
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	4618      	mov	r0, r3
 8004416:	f7fc fccd 	bl	8000db4 <__aeabi_ui2f>
 800441a:	4603      	mov	r3, r0
 800441c:	2164      	movs	r1, #100	@ 0x64
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fdae 	bl	8004f80 <FndDisplay>
			break;
 8004424:	e0bc      	b.n	80045a0 <DataManager+0x970>
		case PAR_LOADCELL_SPAN_H://16
			//printf(" Display PAR_OFFSETB\n");
			if(WhatCmd == CmdWriteEeprom){
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11d      	bne.n	8004468 <DataManager+0x838>
				SetValue=LoadCell_SpanValueHigh ;
 800442c:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <DataManager+0x834>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+15,1);
 8004434:	89fb      	ldrh	r3, [r7, #14]
 8004436:	330f      	adds	r3, #15
 8004438:	b29a      	uxth	r2, r3
 800443a:	f107 0108 	add.w	r1, r7, #8
 800443e:	2301      	movs	r3, #1
 8004440:	4802      	ldr	r0, [pc, #8]	@ (800444c <DataManager+0x81c>)
 8004442:	f001 fd81 	bl	8005f48 <at24_HAL_WriteWords>
				LoadCell_SpanValueHigh=GetValue;
				FndDisplay(LoadCell_SpanValueHigh,100);
			}else{//CmdReadVariable
				FndDisplay(LoadCell_SpanValueHigh,100);
			}
			break;
 8004446:	e0ab      	b.n	80045a0 <DataManager+0x970>
 8004448:	200005d0 	.word	0x200005d0
 800444c:	2000033c 	.word	0x2000033c
 8004450:	200005bc 	.word	0x200005bc
 8004454:	41200000 	.word	0x41200000
 8004458:	200005d6 	.word	0x200005d6
 800445c:	200005d8 	.word	0x200005d8
 8004460:	200005d2 	.word	0x200005d2
 8004464:	200005d4 	.word	0x200005d4
			}else if(WhatCmd == CmdReadEeprom){
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d117      	bne.n	800449e <DataManager+0x86e>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+15, 1);
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	330f      	adds	r3, #15
 8004472:	b29a      	uxth	r2, r3
 8004474:	f107 010a 	add.w	r1, r7, #10
 8004478:	2301      	movs	r3, #1
 800447a:	484b      	ldr	r0, [pc, #300]	@ (80045a8 <DataManager+0x978>)
 800447c:	f001 fdce 	bl	800601c <at24_HAL_ReadWords>
				LoadCell_SpanValueHigh=GetValue;
 8004480:	897a      	ldrh	r2, [r7, #10]
 8004482:	4b4a      	ldr	r3, [pc, #296]	@ (80045ac <DataManager+0x97c>)
 8004484:	801a      	strh	r2, [r3, #0]
				FndDisplay(LoadCell_SpanValueHigh,100);
 8004486:	4b49      	ldr	r3, [pc, #292]	@ (80045ac <DataManager+0x97c>)
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	4618      	mov	r0, r3
 800448e:	f7fc fc91 	bl	8000db4 <__aeabi_ui2f>
 8004492:	4603      	mov	r3, r0
 8004494:	2164      	movs	r1, #100	@ 0x64
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fd72 	bl	8004f80 <FndDisplay>
			break;
 800449c:	e080      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(LoadCell_SpanValueHigh,100);
 800449e:	4b43      	ldr	r3, [pc, #268]	@ (80045ac <DataManager+0x97c>)
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc fc85 	bl	8000db4 <__aeabi_ui2f>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2164      	movs	r1, #100	@ 0x64
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fd66 	bl	8004f80 <FndDisplay>
			break;
 80044b4:	e074      	b.n	80045a0 <DataManager+0x970>
		case PAR_BackupModel://17
			//printf(" Display PAR_BackupModel\n");
			if(WhatCmd == CmdWriteEeprom){
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <DataManager+0x8a4>
				SetValue=(uint16_t)BackupModel;
 80044bc:	4b3c      	ldr	r3, [pc, #240]	@ (80045b0 <DataManager+0x980>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,16,1);
 80044c4:	f107 0108 	add.w	r1, r7, #8
 80044c8:	2301      	movs	r3, #1
 80044ca:	2210      	movs	r2, #16
 80044cc:	4836      	ldr	r0, [pc, #216]	@ (80045a8 <DataManager+0x978>)
 80044ce:	f001 fd3b 	bl	8005f48 <at24_HAL_WriteWords>
				BackupModel=(uint8_t)GetValue;
				//FndDisplay(BackupModel,10);
			}else{//CmdReadVariable
				FndDisplay(BackupModel,10);
			}
			break;
 80044d2:	e065      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d10b      	bne.n	80044f2 <DataManager+0x8c2>
				at24_HAL_ReadWords(&hi2c1, &GetValue, 16, 1);
 80044da:	f107 010a 	add.w	r1, r7, #10
 80044de:	2301      	movs	r3, #1
 80044e0:	2210      	movs	r2, #16
 80044e2:	4831      	ldr	r0, [pc, #196]	@ (80045a8 <DataManager+0x978>)
 80044e4:	f001 fd9a 	bl	800601c <at24_HAL_ReadWords>
				BackupModel=(uint8_t)GetValue;
 80044e8:	897b      	ldrh	r3, [r7, #10]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	4b30      	ldr	r3, [pc, #192]	@ (80045b0 <DataManager+0x980>)
 80044ee:	701a      	strb	r2, [r3, #0]
			break;
 80044f0:	e056      	b.n	80045a0 <DataManager+0x970>
				FndDisplay(BackupModel,10);
 80044f2:	4b2f      	ldr	r3, [pc, #188]	@ (80045b0 <DataManager+0x980>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fc fc5b 	bl	8000db4 <__aeabi_ui2f>
 80044fe:	4603      	mov	r3, r0
 8004500:	210a      	movs	r1, #10
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fd3c 	bl	8004f80 <FndDisplay>
			break;
 8004508:	e04a      	b.n	80045a0 <DataManager+0x970>
		case PAR_fAdcValue://18
			//printf(" Display PAR_fAdcValue\n");
			if(WhatCmd == CmdWriteEeprom){
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d116      	bne.n	800453e <DataManager+0x90e>
				SetValue=(uint16_t)(fadcVal *10);
 8004510:	4b28      	ldr	r3, [pc, #160]	@ (80045b4 <DataManager+0x984>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4928      	ldr	r1, [pc, #160]	@ (80045b8 <DataManager+0x988>)
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc fca4 	bl	8000e64 <__aeabi_fmul>
 800451c:	4603      	mov	r3, r0
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc fe66 	bl	80011f0 <__aeabi_f2uiz>
 8004524:	4603      	mov	r3, r0
 8004526:	b29b      	uxth	r3, r3
 8004528:	813b      	strh	r3, [r7, #8]
				at24_HAL_WriteWords(&hi2c1, &SetValue ,memAddress+17,1);
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	3311      	adds	r3, #17
 800452e:	b29a      	uxth	r2, r3
 8004530:	f107 0108 	add.w	r1, r7, #8
 8004534:	2301      	movs	r3, #1
 8004536:	481c      	ldr	r0, [pc, #112]	@ (80045a8 <DataManager+0x978>)
 8004538:	f001 fd06 	bl	8005f48 <at24_HAL_WriteWords>
			}else{//CmdReadVariable
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+17, 1);
				CompfadcVal=(float)(GetValue/10);
				//FndDisplay(fadcVal,1);
			}
			break;
 800453c:	e030      	b.n	80045a0 <DataManager+0x970>
			}else if(WhatCmd == CmdReadEeprom){
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d116      	bne.n	8004572 <DataManager+0x942>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+17, 1);
 8004544:	89fb      	ldrh	r3, [r7, #14]
 8004546:	3311      	adds	r3, #17
 8004548:	b29a      	uxth	r2, r3
 800454a:	f107 010a 	add.w	r1, r7, #10
 800454e:	2301      	movs	r3, #1
 8004550:	4815      	ldr	r0, [pc, #84]	@ (80045a8 <DataManager+0x978>)
 8004552:	f001 fd63 	bl	800601c <at24_HAL_ReadWords>
				fadcVal=(float)GetValue/10;
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc fc2b 	bl	8000db4 <__aeabi_ui2f>
 800455e:	4603      	mov	r3, r0
 8004560:	4915      	ldr	r1, [pc, #84]	@ (80045b8 <DataManager+0x988>)
 8004562:	4618      	mov	r0, r3
 8004564:	f7fc fd32 	bl	8000fcc <__aeabi_fdiv>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	4b11      	ldr	r3, [pc, #68]	@ (80045b4 <DataManager+0x984>)
 800456e:	601a      	str	r2, [r3, #0]
			break;
 8004570:	e016      	b.n	80045a0 <DataManager+0x970>
				at24_HAL_ReadWords(&hi2c1, &GetValue, memAddress+17, 1);
 8004572:	89fb      	ldrh	r3, [r7, #14]
 8004574:	3311      	adds	r3, #17
 8004576:	b29a      	uxth	r2, r3
 8004578:	f107 010a 	add.w	r1, r7, #10
 800457c:	2301      	movs	r3, #1
 800457e:	480a      	ldr	r0, [pc, #40]	@ (80045a8 <DataManager+0x978>)
 8004580:	f001 fd4c 	bl	800601c <at24_HAL_ReadWords>
				CompfadcVal=(float)(GetValue/10);
 8004584:	897b      	ldrh	r3, [r7, #10]
 8004586:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <DataManager+0x98c>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	08db      	lsrs	r3, r3, #3
 800458e:	b29b      	uxth	r3, r3
 8004590:	4618      	mov	r0, r3
 8004592:	f7fc fc13 	bl	8000dbc <__aeabi_i2f>
 8004596:	4603      	mov	r3, r0
 8004598:	4a09      	ldr	r2, [pc, #36]	@ (80045c0 <DataManager+0x990>)
 800459a:	6013      	str	r3, [r2, #0]
			break;
 800459c:	e000      	b.n	80045a0 <DataManager+0x970>
		default:
			break;
 800459e:	bf00      	nop
	}
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	2000033c 	.word	0x2000033c
 80045ac:	200005d4 	.word	0x200005d4
 80045b0:	200005ce 	.word	0x200005ce
 80045b4:	200005c0 	.word	0x200005c0
 80045b8:	41200000 	.word	0x41200000
 80045bc:	cccccccd 	.word	0xcccccccd
 80045c0:	200005c4 	.word	0x200005c4

080045c4 <LoadParameter>:



void LoadParameter(uint8_t modelNumber)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b092      	sub	sp, #72	@ 0x48
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	71fb      	strb	r3, [r7, #7]
	uint16_t memAddress=0,offsetNumber=40;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80045d4:	2328      	movs	r3, #40	@ 0x28
 80045d6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	uint16_t Readbuf[30];

	memset(Readbuf,0,sizeof(Readbuf));
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	223c      	movs	r2, #60	@ 0x3c
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f009 f85c 	bl	800d6a0 <memset>
	memAddress= offsetNumber *  modelNumber;
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	at24_HAL_ReadWords(&hi2c1, Readbuf, memAddress, 20);
 80045f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80045fc:	f107 0108 	add.w	r1, r7, #8
 8004600:	2314      	movs	r3, #20
 8004602:	4855      	ldr	r0, [pc, #340]	@ (8004758 <LoadParameter+0x194>)
 8004604:	f001 fd0a 	bl	800601c <at24_HAL_ReadWords>
	CurrentModel=(uint8_t)Readbuf[0];
 8004608:	893b      	ldrh	r3, [r7, #8]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b53      	ldr	r3, [pc, #332]	@ (800475c <LoadParameter+0x198>)
 800460e:	701a      	strb	r2, [r3, #0]
	WireCheckAngle=(float)Readbuf[1]/10;
 8004610:	897b      	ldrh	r3, [r7, #10]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc fbce 	bl	8000db4 <__aeabi_ui2f>
 8004618:	4603      	mov	r3, r0
 800461a:	4951      	ldr	r1, [pc, #324]	@ (8004760 <LoadParameter+0x19c>)
 800461c:	4618      	mov	r0, r3
 800461e:	f7fc fcd5 	bl	8000fcc <__aeabi_fdiv>
 8004622:	4603      	mov	r3, r0
 8004624:	461a      	mov	r2, r3
 8004626:	4b4f      	ldr	r3, [pc, #316]	@ (8004764 <LoadParameter+0x1a0>)
 8004628:	601a      	str	r2, [r3, #0]
	K_p 	= (float)Readbuf[2]/10;
 800462a:	89bb      	ldrh	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	f7fc fbc1 	bl	8000db4 <__aeabi_ui2f>
 8004632:	4603      	mov	r3, r0
 8004634:	494a      	ldr	r1, [pc, #296]	@ (8004760 <LoadParameter+0x19c>)
 8004636:	4618      	mov	r0, r3
 8004638:	f7fc fcc8 	bl	8000fcc <__aeabi_fdiv>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	4b49      	ldr	r3, [pc, #292]	@ (8004768 <LoadParameter+0x1a4>)
 8004642:	601a      	str	r2, [r3, #0]
	K_i 	= (float)Readbuf[3]/10;
 8004644:	89fb      	ldrh	r3, [r7, #14]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc fbb4 	bl	8000db4 <__aeabi_ui2f>
 800464c:	4603      	mov	r3, r0
 800464e:	4944      	ldr	r1, [pc, #272]	@ (8004760 <LoadParameter+0x19c>)
 8004650:	4618      	mov	r0, r3
 8004652:	f7fc fcbb 	bl	8000fcc <__aeabi_fdiv>
 8004656:	4603      	mov	r3, r0
 8004658:	461a      	mov	r2, r3
 800465a:	4b44      	ldr	r3, [pc, #272]	@ (800476c <LoadParameter+0x1a8>)
 800465c:	601a      	str	r2, [r3, #0]
	K_d 	= (float)Readbuf[4]/100;
 800465e:	8a3b      	ldrh	r3, [r7, #16]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fc fba7 	bl	8000db4 <__aeabi_ui2f>
 8004666:	4603      	mov	r3, r0
 8004668:	4941      	ldr	r1, [pc, #260]	@ (8004770 <LoadParameter+0x1ac>)
 800466a:	4618      	mov	r0, r3
 800466c:	f7fc fcae 	bl	8000fcc <__aeabi_fdiv>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	4b3f      	ldr	r3, [pc, #252]	@ (8004774 <LoadParameter+0x1b0>)
 8004676:	601a      	str	r2, [r3, #0]
	K_max = (float)Readbuf[5]/10;
 8004678:	8a7b      	ldrh	r3, [r7, #18]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fc fb9a 	bl	8000db4 <__aeabi_ui2f>
 8004680:	4603      	mov	r3, r0
 8004682:	4937      	ldr	r1, [pc, #220]	@ (8004760 <LoadParameter+0x19c>)
 8004684:	4618      	mov	r0, r3
 8004686:	f7fc fca1 	bl	8000fcc <__aeabi_fdiv>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	4b3a      	ldr	r3, [pc, #232]	@ (8004778 <LoadParameter+0x1b4>)
 8004690:	601a      	str	r2, [r3, #0]
	K_min = (float)Readbuf[6]/10;
 8004692:	8abb      	ldrh	r3, [r7, #20]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fc fb8d 	bl	8000db4 <__aeabi_ui2f>
 800469a:	4603      	mov	r3, r0
 800469c:	4930      	ldr	r1, [pc, #192]	@ (8004760 <LoadParameter+0x19c>)
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fc fc94 	bl	8000fcc <__aeabi_fdiv>
 80046a4:	4603      	mov	r3, r0
 80046a6:	461a      	mov	r2, r3
 80046a8:	4b34      	ldr	r3, [pc, #208]	@ (800477c <LoadParameter+0x1b8>)
 80046aa:	601a      	str	r2, [r3, #0]
	BarAngle		= (float)Readbuf[7]/10;
 80046ac:	8afb      	ldrh	r3, [r7, #22]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fc fb80 	bl	8000db4 <__aeabi_ui2f>
 80046b4:	4603      	mov	r3, r0
 80046b6:	492a      	ldr	r1, [pc, #168]	@ (8004760 <LoadParameter+0x19c>)
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fc fc87 	bl	8000fcc <__aeabi_fdiv>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004780 <LoadParameter+0x1bc>)
 80046c4:	601a      	str	r2, [r3, #0]
	DisplayMode	= (uint8_t)Readbuf[8];
 80046c6:	8b3b      	ldrh	r3, [r7, #24]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004784 <LoadParameter+0x1c0>)
 80046cc:	701a      	strb	r2, [r3, #0]
	StepTension	= (float)Readbuf[9]/10;
 80046ce:	8b7b      	ldrh	r3, [r7, #26]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fc fb6f 	bl	8000db4 <__aeabi_ui2f>
 80046d6:	4603      	mov	r3, r0
 80046d8:	4921      	ldr	r1, [pc, #132]	@ (8004760 <LoadParameter+0x19c>)
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc fc76 	bl	8000fcc <__aeabi_fdiv>
 80046e0:	4603      	mov	r3, r0
 80046e2:	461a      	mov	r2, r3
 80046e4:	4b28      	ldr	r3, [pc, #160]	@ (8004788 <LoadParameter+0x1c4>)
 80046e6:	601a      	str	r2, [r3, #0]
	LoadCell_OffSetValue = Readbuf[10];
 80046e8:	8bba      	ldrh	r2, [r7, #28]
 80046ea:	4b28      	ldr	r3, [pc, #160]	@ (800478c <LoadParameter+0x1c8>)
 80046ec:	801a      	strh	r2, [r3, #0]
	AdGain = (float)Readbuf[11]/10;
 80046ee:	8bfb      	ldrh	r3, [r7, #30]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc fb5f 	bl	8000db4 <__aeabi_ui2f>
 80046f6:	4603      	mov	r3, r0
 80046f8:	4919      	ldr	r1, [pc, #100]	@ (8004760 <LoadParameter+0x19c>)
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc fc66 	bl	8000fcc <__aeabi_fdiv>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	4b22      	ldr	r3, [pc, #136]	@ (8004790 <LoadParameter+0x1cc>)
 8004706:	601a      	str	r2, [r3, #0]
	MaxValue = Readbuf[12];
 8004708:	8c3a      	ldrh	r2, [r7, #32]
 800470a:	4b22      	ldr	r3, [pc, #136]	@ (8004794 <LoadParameter+0x1d0>)
 800470c:	801a      	strh	r2, [r3, #0]
	MinValue = Readbuf[13];
 800470e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004710:	4b21      	ldr	r3, [pc, #132]	@ (8004798 <LoadParameter+0x1d4>)
 8004712:	801a      	strh	r2, [r3, #0]
	LoadCell_SpanValueLow = Readbuf[14];
 8004714:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004716:	4b21      	ldr	r3, [pc, #132]	@ (800479c <LoadParameter+0x1d8>)
 8004718:	801a      	strh	r2, [r3, #0]
	LoadCell_SpanValueHigh = Readbuf[15];
 800471a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800471c:	4b20      	ldr	r3, [pc, #128]	@ (80047a0 <LoadParameter+0x1dc>)
 800471e:	801a      	strh	r2, [r3, #0]
	BackupModel = (uint8_t)Readbuf[16];
 8004720:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004722:	b2da      	uxtb	r2, r3
 8004724:	4b1f      	ldr	r3, [pc, #124]	@ (80047a4 <LoadParameter+0x1e0>)
 8004726:	701a      	strb	r2, [r3, #0]
	fadcVal = (float)Readbuf[17]/10;
 8004728:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800472a:	4618      	mov	r0, r3
 800472c:	f7fc fb42 	bl	8000db4 <__aeabi_ui2f>
 8004730:	4603      	mov	r3, r0
 8004732:	490b      	ldr	r1, [pc, #44]	@ (8004760 <LoadParameter+0x19c>)
 8004734:	4618      	mov	r0, r3
 8004736:	f7fc fc49 	bl	8000fcc <__aeabi_fdiv>
 800473a:	4603      	mov	r3, r0
 800473c:	461a      	mov	r2, r3
 800473e:	4b1a      	ldr	r3, [pc, #104]	@ (80047a8 <LoadParameter+0x1e4>)
 8004740:	601a      	str	r2, [r3, #0]
	CurrentModel = modelNumber;
 8004742:	4a06      	ldr	r2, [pc, #24]	@ (800475c <LoadParameter+0x198>)
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	7013      	strb	r3, [r2, #0]
	BackupModel = modelNumber;
 8004748:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <LoadParameter+0x1e0>)
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	7013      	strb	r3, [r2, #0]
	printf("14 LoadCell_SpanValueLow =%d\n",LoadCell_SpanValueLow);
	printf("15 LoadCell_SpanValueHigh =%d\n",LoadCell_SpanValueHigh);
	printf("16 BackupModel =%d\n",BackupModel);
	printf("17 fadcVal =%f\n",fadcVal);
	 */
}
 800474e:	bf00      	nop
 8004750:	3748      	adds	r7, #72	@ 0x48
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	2000033c 	.word	0x2000033c
 800475c:	200005cc 	.word	0x200005cc
 8004760:	41200000 	.word	0x41200000
 8004764:	200005a0 	.word	0x200005a0
 8004768:	200005a4 	.word	0x200005a4
 800476c:	200005a8 	.word	0x200005a8
 8004770:	42c80000 	.word	0x42c80000
 8004774:	200005ac 	.word	0x200005ac
 8004778:	200005b4 	.word	0x200005b4
 800477c:	200005b0 	.word	0x200005b0
 8004780:	2000059c 	.word	0x2000059c
 8004784:	200005cd 	.word	0x200005cd
 8004788:	200005b8 	.word	0x200005b8
 800478c:	200005d0 	.word	0x200005d0
 8004790:	200005bc 	.word	0x200005bc
 8004794:	200005d6 	.word	0x200005d6
 8004798:	200005d8 	.word	0x200005d8
 800479c:	200005d2 	.word	0x200005d2
 80047a0:	200005d4 	.word	0x200005d4
 80047a4:	200005ce 	.word	0x200005ce
 80047a8:	200005c0 	.word	0x200005c0

080047ac <ResetParameter>:


/* ParamterSet function */
void ResetParameter(uint8_t modelNum)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b092      	sub	sp, #72	@ 0x48
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]
	uint16_t memAddress=0,offsetNumber=40;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80047bc:	2328      	movs	r3, #40	@ 0x28
 80047be:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	uint16_t writebuf[30];

	memset(writebuf,0,sizeof(writebuf));
 80047c2:	f107 0308 	add.w	r3, r7, #8
 80047c6:	223c      	movs	r2, #60	@ 0x3c
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f008 ff68 	bl	800d6a0 <memset>
	memAddress= offsetNumber *  modelNum;
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	writebuf[0]=(uint16_t)modelNum;		//current mode
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	813b      	strh	r3, [r7, #8]
	writebuf[1]=(uint16_t)(330.7*10);	//�ܼ���ġ
 80047e6:	f640 43eb 	movw	r3, #3307	@ 0xceb
 80047ea:	817b      	strh	r3, [r7, #10]
	writebuf[2]=(uint16_t)(0.9*10) ; 	//k_p
 80047ec:	2309      	movs	r3, #9
 80047ee:	81bb      	strh	r3, [r7, #12]
	writebuf[3]=(uint16_t)(0.4*10) ;	//k_i
 80047f0:	2304      	movs	r3, #4
 80047f2:	81fb      	strh	r3, [r7, #14]
	writebuf[4]=(uint16_t)(0.01*100);	//k_d
 80047f4:	2301      	movs	r3, #1
 80047f6:	823b      	strh	r3, [r7, #16]
	writebuf[5]=(uint16_t)(99.9*10);	//max
 80047f8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80047fc:	827b      	strh	r3, [r7, #18]
	writebuf[6]=(uint16_t)(50.4*10);	//min
 80047fe:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8004802:	82bb      	strh	r3, [r7, #20]
	writebuf[7]=(uint16_t)(300.5*10);  	//Bar Angle
 8004804:	f640 33bd 	movw	r3, #3005	@ 0xbbd
 8004808:	82fb      	strh	r3, [r7, #22]
	writebuf[8]=(uint16_t)0;			//display mode
 800480a:	2300      	movs	r3, #0
 800480c:	833b      	strh	r3, [r7, #24]
	writebuf[9]=(uint16_t)(1.1*10);		//StepTension
 800480e:	230b      	movs	r3, #11
 8004810:	837b      	strh	r3, [r7, #26]
	writebuf[10]=(uint16_t)(100);		//LoadCell_OffSetValue
 8004812:	2364      	movs	r3, #100	@ 0x64
 8004814:	83bb      	strh	r3, [r7, #28]
	writebuf[11]=(uint16_t)(1.2*10);	//Gain
 8004816:	230c      	movs	r3, #12
 8004818:	83fb      	strh	r3, [r7, #30]
	writebuf[12]=(uint16_t)(300);		//���� MaxValue
 800481a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800481e:	843b      	strh	r3, [r7, #32]
	writebuf[13]=(uint16_t)(100);		//���� MinValue
 8004820:	2364      	movs	r3, #100	@ 0x64
 8004822:	847b      	strh	r3, [r7, #34]	@ 0x22
	writebuf[14]=(uint16_t)(851);		//LoadCell_SpanValue
 8004824:	f240 3353 	movw	r3, #851	@ 0x353
 8004828:	84bb      	strh	r3, [r7, #36]	@ 0x24
	writebuf[15]=(uint16_t)(100);	//OffsetB
 800482a:	2364      	movs	r3, #100	@ 0x64
 800482c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	writebuf[16]=(uint16_t)modelNum;		//backup model
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	b29b      	uxth	r3, r3
 8004832:	853b      	strh	r3, [r7, #40]	@ 0x28
	writebuf[17]=(uint16_t)(12.0*10);	//��� ����
 8004834:	2378      	movs	r3, #120	@ 0x78
 8004836:	857b      	strh	r3, [r7, #42]	@ 0x2a
	at24_HAL_WriteWords(&hi2c1, writebuf ,memAddress,18);
 8004838:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800483c:	f107 0108 	add.w	r1, r7, #8
 8004840:	2312      	movs	r3, #18
 8004842:	4803      	ldr	r0, [pc, #12]	@ (8004850 <ResetParameter+0xa4>)
 8004844:	f001 fb80 	bl	8005f48 <at24_HAL_WriteWords>
}
 8004848:	bf00      	nop
 800484a:	3748      	adds	r7, #72	@ 0x48
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	2000033c 	.word	0x2000033c

08004854 <ParamterSet>:

/* ParamterSet function */
int8_t ParamterSet(uint8_t prmt)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
	volatile int8_t fndFlickerOnCount=0,fndFlickerStatus=OFF;
 800485e:	2300      	movs	r3, #0
 8004860:	72bb      	strb	r3, [r7, #10]
 8004862:	2300      	movs	r3, #0
 8004864:	727b      	strb	r3, [r7, #9]
	int16_t keyDelayCnt=0;
 8004866:	2300      	movs	r3, #0
 8004868:	82fb      	strh	r3, [r7, #22]
	uint32_t spanAverageAdValue=0;
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
	uint32_t PotenionAdValue=0;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
	uint8_t i=0;
 8004872:	2300      	movs	r3, #0
 8004874:	72fb      	strb	r3, [r7, #11]
	DataManager(CmdReadEeprom,CurrentModel,prmt);
 8004876:	4ba5      	ldr	r3, [pc, #660]	@ (8004b0c <ParamterSet+0x2b8>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	79fa      	ldrb	r2, [r7, #7]
 800487e:	4619      	mov	r1, r3
 8004880:	2001      	movs	r0, #1
 8004882:	f7ff f9d5 	bl	8003c30 <DataManager>
	IsRotaryEncoderStatus=ENCODER_STOP;
 8004886:	4ba2      	ldr	r3, [pc, #648]	@ (8004b10 <ParamterSet+0x2bc>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
	while(1){
		keyValue=GetButtonStatus();
 800488c:	f001 fa68 	bl	8005d60 <GetButtonStatus>
 8004890:	4603      	mov	r3, r0
 8004892:	b25a      	sxtb	r2, r3
 8004894:	4b9f      	ldr	r3, [pc, #636]	@ (8004b14 <ParamterSet+0x2c0>)
 8004896:	701a      	strb	r2, [r3, #0]
		if(IsRotaryEncoderStatus==ENCODER_RUN){
 8004898:	4b9d      	ldr	r3, [pc, #628]	@ (8004b10 <ParamterSet+0x2bc>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d106      	bne.n	80048ae <ParamterSet+0x5a>
			encoderCount++;
 80048a0:	4b9d      	ldr	r3, [pc, #628]	@ (8004b18 <ParamterSet+0x2c4>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	4b9b      	ldr	r3, [pc, #620]	@ (8004b18 <ParamterSet+0x2c4>)
 80048ac:	801a      	strh	r2, [r3, #0]
		}

		if((encoderCount >EncoderTimeOut) && (IsRotaryEncoderStatus==ENCODER_RUN)){
 80048ae:	4b9a      	ldr	r3, [pc, #616]	@ (8004b18 <ParamterSet+0x2c4>)
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b64      	cmp	r3, #100	@ 0x64
 80048b6:	d909      	bls.n	80048cc <ParamterSet+0x78>
 80048b8:	4b95      	ldr	r3, [pc, #596]	@ (8004b10 <ParamterSet+0x2bc>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <ParamterSet+0x78>
			IsRotaryEncoderStatus=ENCODER_STOP;
 80048c0:	4b93      	ldr	r3, [pc, #588]	@ (8004b10 <ParamterSet+0x2bc>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
			encoderCount=0;
 80048c6:	4b94      	ldr	r3, [pc, #592]	@ (8004b18 <ParamterSet+0x2c4>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]
		}

		if(IsRotaryEncoderStatus == ENCODER_STOP){
 80048cc:	4b90      	ldr	r3, [pc, #576]	@ (8004b10 <ParamterSet+0x2bc>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d12a      	bne.n	800492a <ParamterSet+0xd6>
			if((fndFlickerStatus == OFF) && (fndFlickerOnCount >FlickerTimeOff)){
 80048d4:	7a7b      	ldrb	r3, [r7, #9]
 80048d6:	b25b      	sxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <ParamterSet+0x9e>
 80048dc:	7abb      	ldrb	r3, [r7, #10]
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	2b32      	cmp	r3, #50	@ 0x32
 80048e2:	dd06      	ble.n	80048f2 <ParamterSet+0x9e>
				FndAllOff();
 80048e4:	f001 f902 	bl	8005aec <FndAllOff>
				fndFlickerOnCount = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	72bb      	strb	r3, [r7, #10]
				fndFlickerStatus = ON;
 80048ec:	2301      	movs	r3, #1
 80048ee:	727b      	strb	r3, [r7, #9]
 80048f0:	e013      	b.n	800491a <ParamterSet+0xc6>
			}else if((fndFlickerStatus == ON) && (fndFlickerOnCount > FlickerTimeOn)){
 80048f2:	7a7b      	ldrb	r3, [r7, #9]
 80048f4:	b25b      	sxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d10f      	bne.n	800491a <ParamterSet+0xc6>
 80048fa:	7abb      	ldrb	r3, [r7, #10]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	2b64      	cmp	r3, #100	@ 0x64
 8004900:	dd0b      	ble.n	800491a <ParamterSet+0xc6>
				DataManager(CmdReadVariable,CurrentModel,prmt);
 8004902:	4b82      	ldr	r3, [pc, #520]	@ (8004b0c <ParamterSet+0x2b8>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	79fa      	ldrb	r2, [r7, #7]
 800490a:	4619      	mov	r1, r3
 800490c:	2002      	movs	r0, #2
 800490e:	f7ff f98f 	bl	8003c30 <DataManager>
				fndFlickerOnCount = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	72bb      	strb	r3, [r7, #10]
				fndFlickerStatus = OFF;
 8004916:	2300      	movs	r3, #0
 8004918:	727b      	strb	r3, [r7, #9]
			}
			fndFlickerOnCount++;
 800491a:	7abb      	ldrb	r3, [r7, #10]
 800491c:	b25b      	sxtb	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	3301      	adds	r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	b25b      	sxtb	r3, r3
 8004926:	72bb      	strb	r3, [r7, #10]
 8004928:	e00b      	b.n	8004942 <ParamterSet+0xee>
		}else{
			DataManager(CmdReadVariable,CurrentModel,prmt);
 800492a:	4b78      	ldr	r3, [pc, #480]	@ (8004b0c <ParamterSet+0x2b8>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	79fa      	ldrb	r2, [r7, #7]
 8004932:	4619      	mov	r1, r3
 8004934:	2002      	movs	r0, #2
 8004936:	f7ff f97b 	bl	8003c30 <DataManager>
			fndFlickerOnCount = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	72bb      	strb	r3, [r7, #10]
			fndFlickerStatus = OFF;
 800493e:	2300      	movs	r3, #0
 8004940:	727b      	strb	r3, [r7, #9]
		}
		//////////////////////////////////////////////////////////////////
		if ((keyValue == ENCODER_BUTTON)  && (prmt == PAR_CHK_ANG)){
 8004942:	4b74      	ldr	r3, [pc, #464]	@ (8004b14 <ParamterSet+0x2c0>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	b25b      	sxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	f040 80b0 	bne.w	8004aae <ParamterSet+0x25a>
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	2b02      	cmp	r3, #2
 8004952:	f040 80ac 	bne.w	8004aae <ParamterSet+0x25a>
			//printf(" PAR_CHK_ANG\n");
			while(1){
				FndAllOff();
 8004956:	f001 f8c9 	bl	8005aec <FndAllOff>
				EncoderButtonDelayCount++;
 800495a:	4b70      	ldr	r3, [pc, #448]	@ (8004b1c <ParamterSet+0x2c8>)
 800495c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004960:	b29b      	uxth	r3, r3
 8004962:	3301      	adds	r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	b21a      	sxth	r2, r3
 8004968:	4b6c      	ldr	r3, [pc, #432]	@ (8004b1c <ParamterSet+0x2c8>)
 800496a:	801a      	strh	r2, [r3, #0]
				if(EncoderButtonDelayCount>10){
 800496c:	4b6b      	ldr	r3, [pc, #428]	@ (8004b1c <ParamterSet+0x2c8>)
 800496e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004972:	2b0a      	cmp	r3, #10
 8004974:	f340 8097 	ble.w	8004aa6 <ParamterSet+0x252>
					osDelay(1000);
 8004978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800497c:	f005 fa0c 	bl	8009d98 <osDelay>
					FndIncrementBar(1);
 8004980:	2001      	movs	r0, #1
 8004982:	f001 f81d 	bl	80059c0 <FndIncrementBar>
					memset(ADarray,0,sizeof(ADarray));
 8004986:	2210      	movs	r2, #16
 8004988:	2100      	movs	r1, #0
 800498a:	4865      	ldr	r0, [pc, #404]	@ (8004b20 <ParamterSet+0x2cc>)
 800498c:	f008 fe88 	bl	800d6a0 <memset>
					for(i=0;i<ArraySize;i++){
 8004990:	2300      	movs	r3, #0
 8004992:	72fb      	strb	r3, [r7, #11]
 8004994:	e00b      	b.n	80049ae <ParamterSet+0x15a>
						ADarray[i] = adcVal[3]; //ad��ȯ
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	4a62      	ldr	r2, [pc, #392]	@ (8004b24 <ParamterSet+0x2d0>)
 800499a:	88d1      	ldrh	r1, [r2, #6]
 800499c:	4a60      	ldr	r2, [pc, #384]	@ (8004b20 <ParamterSet+0x2cc>)
 800499e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						osDelay(10);
 80049a2:	200a      	movs	r0, #10
 80049a4:	f005 f9f8 	bl	8009d98 <osDelay>
					for(i=0;i<ArraySize;i++){
 80049a8:	7afb      	ldrb	r3, [r7, #11]
 80049aa:	3301      	adds	r3, #1
 80049ac:	72fb      	strb	r3, [r7, #11]
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	2b07      	cmp	r3, #7
 80049b2:	d9f0      	bls.n	8004996 <ParamterSet+0x142>
					}
					max = adcVal[3];
 80049b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b24 <ParamterSet+0x2d0>)
 80049b6:	88da      	ldrh	r2, [r3, #6]
 80049b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004b28 <ParamterSet+0x2d4>)
 80049ba:	801a      	strh	r2, [r3, #0]
					min = adcVal[3];
 80049bc:	4b59      	ldr	r3, [pc, #356]	@ (8004b24 <ParamterSet+0x2d0>)
 80049be:	88da      	ldrh	r2, [r3, #6]
 80049c0:	4b5a      	ldr	r3, [pc, #360]	@ (8004b2c <ParamterSet+0x2d8>)
 80049c2:	801a      	strh	r2, [r3, #0]
					icnt=0;
 80049c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b30 <ParamterSet+0x2dc>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
					for(i=0;i<ArraySize;i++){
 80049ca:	2300      	movs	r3, #0
 80049cc:	72fb      	strb	r3, [r7, #11]
 80049ce:	e02e      	b.n	8004a2e <ParamterSet+0x1da>
						if(ADarray[i]>max){
 80049d0:	7afb      	ldrb	r3, [r7, #11]
 80049d2:	4a53      	ldr	r2, [pc, #332]	@ (8004b20 <ParamterSet+0x2cc>)
 80049d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80049d8:	4b53      	ldr	r3, [pc, #332]	@ (8004b28 <ParamterSet+0x2d4>)
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d906      	bls.n	80049ee <ParamterSet+0x19a>
							max = ADarray[i];
 80049e0:	7afb      	ldrb	r3, [r7, #11]
 80049e2:	4a4f      	ldr	r2, [pc, #316]	@ (8004b20 <ParamterSet+0x2cc>)
 80049e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80049e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004b28 <ParamterSet+0x2d4>)
 80049ea:	801a      	strh	r2, [r3, #0]
 80049ec:	e01c      	b.n	8004a28 <ParamterSet+0x1d4>
						}else if(ADarray[i]<min){
 80049ee:	7afb      	ldrb	r3, [r7, #11]
 80049f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004b20 <ParamterSet+0x2cc>)
 80049f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80049f6:	4b4d      	ldr	r3, [pc, #308]	@ (8004b2c <ParamterSet+0x2d8>)
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d206      	bcs.n	8004a0c <ParamterSet+0x1b8>
							min = ADarray[i];
 80049fe:	7afb      	ldrb	r3, [r7, #11]
 8004a00:	4a47      	ldr	r2, [pc, #284]	@ (8004b20 <ParamterSet+0x2cc>)
 8004a02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004a06:	4b49      	ldr	r3, [pc, #292]	@ (8004b2c <ParamterSet+0x2d8>)
 8004a08:	801a      	strh	r2, [r3, #0]
 8004a0a:	e00d      	b.n	8004a28 <ParamterSet+0x1d4>
						}else{
							PotenionAdValue += ADarray[i];
 8004a0c:	7afb      	ldrb	r3, [r7, #11]
 8004a0e:	4a44      	ldr	r2, [pc, #272]	@ (8004b20 <ParamterSet+0x2cc>)
 8004a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a14:	461a      	mov	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
							icnt++;
 8004a1c:	4b44      	ldr	r3, [pc, #272]	@ (8004b30 <ParamterSet+0x2dc>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	4b42      	ldr	r3, [pc, #264]	@ (8004b30 <ParamterSet+0x2dc>)
 8004a26:	701a      	strb	r2, [r3, #0]
					for(i=0;i<ArraySize;i++){
 8004a28:	7afb      	ldrb	r3, [r7, #11]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	72fb      	strb	r3, [r7, #11]
 8004a2e:	7afb      	ldrb	r3, [r7, #11]
 8004a30:	2b07      	cmp	r3, #7
 8004a32:	d9cd      	bls.n	80049d0 <ParamterSet+0x17c>
						}
					}
					PotenionAdValue = PotenionAdValue /icnt;
 8004a34:	4b3e      	ldr	r3, [pc, #248]	@ (8004b30 <ParamterSet+0x2dc>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
					break;
 8004a42:	bf00      	nop
				}
				osDelay(200);
			}
			osDelay(200);
 8004a44:	20c8      	movs	r0, #200	@ 0xc8
 8004a46:	f005 f9a7 	bl	8009d98 <osDelay>
			FndIncrementBar(2);
 8004a4a:	2002      	movs	r0, #2
 8004a4c:	f000 ffb8 	bl	80059c0 <FndIncrementBar>
			WireCheckAngle=((float)PotenionAdValue/1024)*360;
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7fc f9af 	bl	8000db4 <__aeabi_ui2f>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fc fab5 	bl	8000fcc <__aeabi_fdiv>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4933      	ldr	r1, [pc, #204]	@ (8004b34 <ParamterSet+0x2e0>)
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fc f9fc 	bl	8000e64 <__aeabi_fmul>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b31      	ldr	r3, [pc, #196]	@ (8004b38 <ParamterSet+0x2e4>)
 8004a72:	601a      	str	r2, [r3, #0]
			osDelay(200);
 8004a74:	20c8      	movs	r0, #200	@ 0xc8
 8004a76:	f005 f98f 	bl	8009d98 <osDelay>
			FndIncrementBar(3);
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f000 ffa0 	bl	80059c0 <FndIncrementBar>
			FndDispalyParameter(prmt);
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fe54 	bl	8005730 <FndDispalyParameter>
			DataManager(CmdWriteEeprom,CurrentModel,prmt);
 8004a88:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <ParamterSet+0x2b8>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	79fa      	ldrb	r2, [r7, #7]
 8004a90:	4619      	mov	r1, r3
 8004a92:	2000      	movs	r0, #0
 8004a94:	f7ff f8cc 	bl	8003c30 <DataManager>
			IsEditStatus=EDIT_OFF;
 8004a98:	4b28      	ldr	r3, [pc, #160]	@ (8004b3c <ParamterSet+0x2e8>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
			IsRunMode = EDIT;
 8004a9e:	4b28      	ldr	r3, [pc, #160]	@ (8004b40 <ParamterSet+0x2ec>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	e003      	b.n	8004aae <ParamterSet+0x25a>
				osDelay(200);
 8004aa6:	20c8      	movs	r0, #200	@ 0xc8
 8004aa8:	f005 f976 	bl	8009d98 <osDelay>
				FndAllOff();
 8004aac:	e753      	b.n	8004956 <ParamterSet+0x102>
		}
		//////////////////////////////////////////////////////////////////
		if ((keyValue == ENCODER_BUTTON)  && (prmt == PAR_LOADCELL_SPAN_L)){ //100g
 8004aae:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <ParamterSet+0x2c0>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b25b      	sxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	f040 80c3 	bne.w	8004c40 <ParamterSet+0x3ec>
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	f040 80bf 	bne.w	8004c40 <ParamterSet+0x3ec>
			//printf(" loadcell span\n");
			while(1){
				FndAllOff();
 8004ac2:	f001 f813 	bl	8005aec <FndAllOff>
				EncoderButtonDelayCount++;
 8004ac6:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <ParamterSet+0x2c8>)
 8004ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	4b11      	ldr	r3, [pc, #68]	@ (8004b1c <ParamterSet+0x2c8>)
 8004ad6:	801a      	strh	r2, [r3, #0]
				if(EncoderButtonDelayCount>10){
 8004ad8:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <ParamterSet+0x2c8>)
 8004ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ade:	2b0a      	cmp	r3, #10
 8004ae0:	f340 80aa 	ble.w	8004c38 <ParamterSet+0x3e4>
					osDelay(1000);
 8004ae4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ae8:	f005 f956 	bl	8009d98 <osDelay>
					spanAverageAdValue =0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
					osDelay(200);
 8004af0:	20c8      	movs	r0, #200	@ 0xc8
 8004af2:	f005 f951 	bl	8009d98 <osDelay>
					FndIncrementBar(1);
 8004af6:	2001      	movs	r0, #1
 8004af8:	f000 ff62 	bl	80059c0 <FndIncrementBar>
					memset(ADarray,0,sizeof(ADarray));
 8004afc:	2210      	movs	r2, #16
 8004afe:	2100      	movs	r1, #0
 8004b00:	4807      	ldr	r0, [pc, #28]	@ (8004b20 <ParamterSet+0x2cc>)
 8004b02:	f008 fdcd 	bl	800d6a0 <memset>
					for(i=0;i<ArraySize;i++){
 8004b06:	2300      	movs	r3, #0
 8004b08:	72fb      	strb	r3, [r7, #11]
 8004b0a:	e027      	b.n	8004b5c <ParamterSet+0x308>
 8004b0c:	200005cc 	.word	0x200005cc
 8004b10:	20000544 	.word	0x20000544
 8004b14:	20000584 	.word	0x20000584
 8004b18:	2000058a 	.word	0x2000058a
 8004b1c:	200005f8 	.word	0x200005f8
 8004b20:	200005e8 	.word	0x200005e8
 8004b24:	2000053c 	.word	0x2000053c
 8004b28:	200005e2 	.word	0x200005e2
 8004b2c:	200005e4 	.word	0x200005e4
 8004b30:	200005e0 	.word	0x200005e0
 8004b34:	43b40000 	.word	0x43b40000
 8004b38:	200005a0 	.word	0x200005a0
 8004b3c:	20000547 	.word	0x20000547
 8004b40:	20000548 	.word	0x20000548
						ADarray[i]=adcVal[0]; //ad��ȯ
 8004b44:	7afb      	ldrb	r3, [r7, #11]
 8004b46:	4a95      	ldr	r2, [pc, #596]	@ (8004d9c <ParamterSet+0x548>)
 8004b48:	8811      	ldrh	r1, [r2, #0]
 8004b4a:	4a95      	ldr	r2, [pc, #596]	@ (8004da0 <ParamterSet+0x54c>)
 8004b4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						osDelay(10);
 8004b50:	200a      	movs	r0, #10
 8004b52:	f005 f921 	bl	8009d98 <osDelay>
					for(i=0;i<ArraySize;i++){
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	72fb      	strb	r3, [r7, #11]
 8004b5c:	7afb      	ldrb	r3, [r7, #11]
 8004b5e:	2b07      	cmp	r3, #7
 8004b60:	d9f0      	bls.n	8004b44 <ParamterSet+0x2f0>
					}
					max=adcVal[0];
 8004b62:	4b8e      	ldr	r3, [pc, #568]	@ (8004d9c <ParamterSet+0x548>)
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	4b8f      	ldr	r3, [pc, #572]	@ (8004da4 <ParamterSet+0x550>)
 8004b68:	801a      	strh	r2, [r3, #0]
					min=adcVal[0];
 8004b6a:	4b8c      	ldr	r3, [pc, #560]	@ (8004d9c <ParamterSet+0x548>)
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	4b8e      	ldr	r3, [pc, #568]	@ (8004da8 <ParamterSet+0x554>)
 8004b70:	801a      	strh	r2, [r3, #0]
					icnt=0;
 8004b72:	4b8e      	ldr	r3, [pc, #568]	@ (8004dac <ParamterSet+0x558>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
					for(i=0;i<ArraySize;i++){
 8004b78:	2300      	movs	r3, #0
 8004b7a:	72fb      	strb	r3, [r7, #11]
 8004b7c:	e02e      	b.n	8004bdc <ParamterSet+0x388>
						if(ADarray[i]>max){
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	4a87      	ldr	r2, [pc, #540]	@ (8004da0 <ParamterSet+0x54c>)
 8004b82:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004b86:	4b87      	ldr	r3, [pc, #540]	@ (8004da4 <ParamterSet+0x550>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d906      	bls.n	8004b9c <ParamterSet+0x348>
							max=ADarray[i];
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	4a83      	ldr	r2, [pc, #524]	@ (8004da0 <ParamterSet+0x54c>)
 8004b92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004b96:	4b83      	ldr	r3, [pc, #524]	@ (8004da4 <ParamterSet+0x550>)
 8004b98:	801a      	strh	r2, [r3, #0]
 8004b9a:	e01c      	b.n	8004bd6 <ParamterSet+0x382>
						}else if(ADarray[i]<min){
 8004b9c:	7afb      	ldrb	r3, [r7, #11]
 8004b9e:	4a80      	ldr	r2, [pc, #512]	@ (8004da0 <ParamterSet+0x54c>)
 8004ba0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004ba4:	4b80      	ldr	r3, [pc, #512]	@ (8004da8 <ParamterSet+0x554>)
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d206      	bcs.n	8004bba <ParamterSet+0x366>
							min=ADarray[i];
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	4a7c      	ldr	r2, [pc, #496]	@ (8004da0 <ParamterSet+0x54c>)
 8004bb0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004bb4:	4b7c      	ldr	r3, [pc, #496]	@ (8004da8 <ParamterSet+0x554>)
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	e00d      	b.n	8004bd6 <ParamterSet+0x382>
						}else{
							spanAverageAdValue+=ADarray[i];
 8004bba:	7afb      	ldrb	r3, [r7, #11]
 8004bbc:	4a78      	ldr	r2, [pc, #480]	@ (8004da0 <ParamterSet+0x54c>)
 8004bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
							icnt++;
 8004bca:	4b78      	ldr	r3, [pc, #480]	@ (8004dac <ParamterSet+0x558>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b76      	ldr	r3, [pc, #472]	@ (8004dac <ParamterSet+0x558>)
 8004bd4:	701a      	strb	r2, [r3, #0]
					for(i=0;i<ArraySize;i++){
 8004bd6:	7afb      	ldrb	r3, [r7, #11]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	72fb      	strb	r3, [r7, #11]
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	2b07      	cmp	r3, #7
 8004be0:	d9cd      	bls.n	8004b7e <ParamterSet+0x32a>
						}
					}
					spanAverageAdValue=spanAverageAdValue /icnt;
 8004be2:	4b72      	ldr	r3, [pc, #456]	@ (8004dac <ParamterSet+0x558>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
					break;
 8004bf0:	bf00      	nop
				}
				osDelay(200);
			}

			osDelay(200);
 8004bf2:	20c8      	movs	r0, #200	@ 0xc8
 8004bf4:	f005 f8d0 	bl	8009d98 <osDelay>
			FndIncrementBar(2);
 8004bf8:	2002      	movs	r0, #2
 8004bfa:	f000 fee1 	bl	80059c0 <FndIncrementBar>

			LoadCell_SpanValueLow=(uint16_t)(spanAverageAdValue);  //2���� �� ���ִϱ� �������̴�.
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	4b6b      	ldr	r3, [pc, #428]	@ (8004db0 <ParamterSet+0x55c>)
 8004c04:	801a      	strh	r2, [r3, #0]
			//printf(" LoadCell_span=%lu\n",(unsigned long)((uint16_t)spanAverageAdValue - LoadCell_OffSetValue));

			osDelay(200);
 8004c06:	20c8      	movs	r0, #200	@ 0xc8
 8004c08:	f005 f8c6 	bl	8009d98 <osDelay>
			FndIncrementBar(3);
 8004c0c:	2003      	movs	r0, #3
 8004c0e:	f000 fed7 	bl	80059c0 <FndIncrementBar>
			FndDispalyParameter(prmt);
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fd8b 	bl	8005730 <FndDispalyParameter>
			DataManager(CmdWriteEeprom,CurrentModel,prmt);
 8004c1a:	4b66      	ldr	r3, [pc, #408]	@ (8004db4 <ParamterSet+0x560>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	79fa      	ldrb	r2, [r7, #7]
 8004c22:	4619      	mov	r1, r3
 8004c24:	2000      	movs	r0, #0
 8004c26:	f7ff f803 	bl	8003c30 <DataManager>
			IsEditStatus=EDIT_OFF;
 8004c2a:	4b63      	ldr	r3, [pc, #396]	@ (8004db8 <ParamterSet+0x564>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
			IsRunMode = EDIT;
 8004c30:	4b62      	ldr	r3, [pc, #392]	@ (8004dbc <ParamterSet+0x568>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e003      	b.n	8004c40 <ParamterSet+0x3ec>
				osDelay(200);
 8004c38:	20c8      	movs	r0, #200	@ 0xc8
 8004c3a:	f005 f8ad 	bl	8009d98 <osDelay>
				FndAllOff();
 8004c3e:	e740      	b.n	8004ac2 <ParamterSet+0x26e>
		}
		//////////////////////////////////////////////////////////////////
		if ((keyValue == ENCODER_BUTTON)  && (prmt == PAR_LOADCELL_SPAN_H)){  //500g
 8004c40:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc0 <ParamterSet+0x56c>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b25b      	sxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f040 80c0 	bne.w	8004dcc <ParamterSet+0x578>
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	f040 80bc 	bne.w	8004dcc <ParamterSet+0x578>
			//printf(" loadcell span\n");
			while(1){
				FndAllOff();
 8004c54:	f000 ff4a 	bl	8005aec <FndAllOff>
				EncoderButtonDelayCount++;
 8004c58:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc4 <ParamterSet+0x570>)
 8004c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3301      	adds	r3, #1
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	b21a      	sxth	r2, r3
 8004c66:	4b57      	ldr	r3, [pc, #348]	@ (8004dc4 <ParamterSet+0x570>)
 8004c68:	801a      	strh	r2, [r3, #0]
				if(EncoderButtonDelayCount>10){
 8004c6a:	4b56      	ldr	r3, [pc, #344]	@ (8004dc4 <ParamterSet+0x570>)
 8004c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c70:	2b0a      	cmp	r3, #10
 8004c72:	f340 808e 	ble.w	8004d92 <ParamterSet+0x53e>
					osDelay(1000);
 8004c76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c7a:	f005 f88d 	bl	8009d98 <osDelay>
					spanAverageAdValue =0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
					osDelay(200);
 8004c82:	20c8      	movs	r0, #200	@ 0xc8
 8004c84:	f005 f888 	bl	8009d98 <osDelay>
					FndIncrementBar(1);
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f000 fe99 	bl	80059c0 <FndIncrementBar>
					memset(ADarray,0,sizeof(ADarray));
 8004c8e:	2210      	movs	r2, #16
 8004c90:	2100      	movs	r1, #0
 8004c92:	4843      	ldr	r0, [pc, #268]	@ (8004da0 <ParamterSet+0x54c>)
 8004c94:	f008 fd04 	bl	800d6a0 <memset>
					for(i=0;i<ArraySize;i++){
 8004c98:	2300      	movs	r3, #0
 8004c9a:	72fb      	strb	r3, [r7, #11]
 8004c9c:	e00b      	b.n	8004cb6 <ParamterSet+0x462>
						ADarray[i]=adcVal[0]; //ad��ȯ
 8004c9e:	7afb      	ldrb	r3, [r7, #11]
 8004ca0:	4a3e      	ldr	r2, [pc, #248]	@ (8004d9c <ParamterSet+0x548>)
 8004ca2:	8811      	ldrh	r1, [r2, #0]
 8004ca4:	4a3e      	ldr	r2, [pc, #248]	@ (8004da0 <ParamterSet+0x54c>)
 8004ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						osDelay(10);
 8004caa:	200a      	movs	r0, #10
 8004cac:	f005 f874 	bl	8009d98 <osDelay>
					for(i=0;i<ArraySize;i++){
 8004cb0:	7afb      	ldrb	r3, [r7, #11]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	72fb      	strb	r3, [r7, #11]
 8004cb6:	7afb      	ldrb	r3, [r7, #11]
 8004cb8:	2b07      	cmp	r3, #7
 8004cba:	d9f0      	bls.n	8004c9e <ParamterSet+0x44a>
					}
					max=adcVal[0];
 8004cbc:	4b37      	ldr	r3, [pc, #220]	@ (8004d9c <ParamterSet+0x548>)
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	4b38      	ldr	r3, [pc, #224]	@ (8004da4 <ParamterSet+0x550>)
 8004cc2:	801a      	strh	r2, [r3, #0]
					min=adcVal[0];
 8004cc4:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <ParamterSet+0x548>)
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	4b37      	ldr	r3, [pc, #220]	@ (8004da8 <ParamterSet+0x554>)
 8004cca:	801a      	strh	r2, [r3, #0]
					icnt=0;
 8004ccc:	4b37      	ldr	r3, [pc, #220]	@ (8004dac <ParamterSet+0x558>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
					for(i=0;i<ArraySize;i++){
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	72fb      	strb	r3, [r7, #11]
 8004cd6:	e02e      	b.n	8004d36 <ParamterSet+0x4e2>
						if(ADarray[i]>max){
 8004cd8:	7afb      	ldrb	r3, [r7, #11]
 8004cda:	4a31      	ldr	r2, [pc, #196]	@ (8004da0 <ParamterSet+0x54c>)
 8004cdc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004ce0:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <ParamterSet+0x550>)
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d906      	bls.n	8004cf6 <ParamterSet+0x4a2>
							max=ADarray[i];
 8004ce8:	7afb      	ldrb	r3, [r7, #11]
 8004cea:	4a2d      	ldr	r2, [pc, #180]	@ (8004da0 <ParamterSet+0x54c>)
 8004cec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <ParamterSet+0x550>)
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e01c      	b.n	8004d30 <ParamterSet+0x4dc>
						}else if(ADarray[i]<min){
 8004cf6:	7afb      	ldrb	r3, [r7, #11]
 8004cf8:	4a29      	ldr	r2, [pc, #164]	@ (8004da0 <ParamterSet+0x54c>)
 8004cfa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004da8 <ParamterSet+0x554>)
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d206      	bcs.n	8004d14 <ParamterSet+0x4c0>
							min=ADarray[i];
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	4a25      	ldr	r2, [pc, #148]	@ (8004da0 <ParamterSet+0x54c>)
 8004d0a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004d0e:	4b26      	ldr	r3, [pc, #152]	@ (8004da8 <ParamterSet+0x554>)
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	e00d      	b.n	8004d30 <ParamterSet+0x4dc>
						}else{
							spanAverageAdValue+=ADarray[i];
 8004d14:	7afb      	ldrb	r3, [r7, #11]
 8004d16:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <ParamterSet+0x54c>)
 8004d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4413      	add	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
							icnt++;
 8004d24:	4b21      	ldr	r3, [pc, #132]	@ (8004dac <ParamterSet+0x558>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dac <ParamterSet+0x558>)
 8004d2e:	701a      	strb	r2, [r3, #0]
					for(i=0;i<ArraySize;i++){
 8004d30:	7afb      	ldrb	r3, [r7, #11]
 8004d32:	3301      	adds	r3, #1
 8004d34:	72fb      	strb	r3, [r7, #11]
 8004d36:	7afb      	ldrb	r3, [r7, #11]
 8004d38:	2b07      	cmp	r3, #7
 8004d3a:	d9cd      	bls.n	8004cd8 <ParamterSet+0x484>
						}
					}
					spanAverageAdValue=spanAverageAdValue /icnt;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <ParamterSet+0x558>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
					break;
 8004d4a:	bf00      	nop
				}
				osDelay(200);
			}

			osDelay(200);
 8004d4c:	20c8      	movs	r0, #200	@ 0xc8
 8004d4e:	f005 f823 	bl	8009d98 <osDelay>
			FndIncrementBar(2);
 8004d52:	2002      	movs	r0, #2
 8004d54:	f000 fe34 	bl	80059c0 <FndIncrementBar>

			LoadCell_SpanValueHigh=(uint16_t)(spanAverageAdValue);  //2���� �� ���ִϱ� �������̴�.
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc8 <ParamterSet+0x574>)
 8004d5e:	801a      	strh	r2, [r3, #0]
			//printf(" LoadCell_span=%lu\n",(unsigned long)((uint16_t)spanAverageAdValue - LoadCell_OffSetValue));

			osDelay(200);
 8004d60:	20c8      	movs	r0, #200	@ 0xc8
 8004d62:	f005 f819 	bl	8009d98 <osDelay>
			FndIncrementBar(3);
 8004d66:	2003      	movs	r0, #3
 8004d68:	f000 fe2a 	bl	80059c0 <FndIncrementBar>
			FndDispalyParameter(prmt);
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fcde 	bl	8005730 <FndDispalyParameter>
			DataManager(CmdWriteEeprom,CurrentModel,prmt);
 8004d74:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <ParamterSet+0x560>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	79fa      	ldrb	r2, [r7, #7]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f7fe ff56 	bl	8003c30 <DataManager>
			IsEditStatus=EDIT_OFF;
 8004d84:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <ParamterSet+0x564>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
			IsRunMode = EDIT;
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dbc <ParamterSet+0x568>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e01c      	b.n	8004dcc <ParamterSet+0x578>
				osDelay(200);
 8004d92:	20c8      	movs	r0, #200	@ 0xc8
 8004d94:	f005 f800 	bl	8009d98 <osDelay>
				FndAllOff();
 8004d98:	e75c      	b.n	8004c54 <ParamterSet+0x400>
 8004d9a:	bf00      	nop
 8004d9c:	2000053c 	.word	0x2000053c
 8004da0:	200005e8 	.word	0x200005e8
 8004da4:	200005e2 	.word	0x200005e2
 8004da8:	200005e4 	.word	0x200005e4
 8004dac:	200005e0 	.word	0x200005e0
 8004db0:	200005d2 	.word	0x200005d2
 8004db4:	200005cc 	.word	0x200005cc
 8004db8:	20000547 	.word	0x20000547
 8004dbc:	20000548 	.word	0x20000548
 8004dc0:	20000584 	.word	0x20000584
 8004dc4:	200005f8 	.word	0x200005f8
 8004dc8:	200005d4 	.word	0x200005d4
		}

		if(keyValue == KEY_SET) {
 8004dcc:	4b26      	ldr	r3, [pc, #152]	@ (8004e68 <ParamterSet+0x614>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d130      	bne.n	8004e38 <ParamterSet+0x5e4>
			keyDelayCnt++;
 8004dd6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	82fb      	strh	r3, [r7, #22]
			if(keyDelayCnt>SetSaveCnt){
 8004de2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004de6:	2b32      	cmp	r3, #50	@ 0x32
 8004de8:	dd35      	ble.n	8004e56 <ParamterSet+0x602>
				//printf(" Parameter%d Saved\n",prmt);
				FndAllOff();
 8004dea:	f000 fe7f 	bl	8005aec <FndAllOff>
				osDelay(500);
 8004dee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004df2:	f004 ffd1 	bl	8009d98 <osDelay>
				FndDispalyParameter(prmt);
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fc99 	bl	8005730 <FndDispalyParameter>
				osDelay(500);
 8004dfe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e02:	f004 ffc9 	bl	8009d98 <osDelay>
				FndAllOff();
 8004e06:	f000 fe71 	bl	8005aec <FndAllOff>
				osDelay(500);
 8004e0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e0e:	f004 ffc3 	bl	8009d98 <osDelay>
				FndDispalyParameter(prmt);
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fc8b 	bl	8005730 <FndDispalyParameter>
				DataManager(CmdWriteEeprom,CurrentModel,prmt);
 8004e1a:	4b14      	ldr	r3, [pc, #80]	@ (8004e6c <ParamterSet+0x618>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	79fa      	ldrb	r2, [r7, #7]
 8004e22:	4619      	mov	r1, r3
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fe ff03 	bl	8003c30 <DataManager>
				IsEditStatus=EDIT_OFF;
 8004e2a:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <ParamterSet+0x61c>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
				IsRunMode = EDIT;
 8004e30:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <ParamterSet+0x620>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
				break;
 8004e36:	e012      	b.n	8004e5e <ParamterSet+0x60a>
			}
		}else{
			if(keyDelayCnt>0){
 8004e38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dd0a      	ble.n	8004e56 <ParamterSet+0x602>
				//printf(" Parameter%d Not Saved\n",prmt);
				FndDispalyParameter(prmt);
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fc74 	bl	8005730 <FndDispalyParameter>
				IsEditStatus=EDIT_OFF;
 8004e48:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <ParamterSet+0x61c>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
				IsRunMode = EDIT;
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <ParamterSet+0x620>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
				break;
 8004e54:	e003      	b.n	8004e5e <ParamterSet+0x60a>
			}
		}
		osDelay(SaveTime);
 8004e56:	200a      	movs	r0, #10
 8004e58:	f004 ff9e 	bl	8009d98 <osDelay>
	while(1){
 8004e5c:	e516      	b.n	800488c <ParamterSet+0x38>
	}
	return 1;
 8004e5e:	2301      	movs	r3, #1
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000584 	.word	0x20000584
 8004e6c:	200005cc 	.word	0x200005cc
 8004e70:	20000547 	.word	0x20000547
 8004e74:	20000548 	.word	0x20000548

08004e78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80fb      	strh	r3, [r7, #6]
	UpDateEncoder();
 8004e82:	f7fe f861 	bl	8002f48 <UpDateEncoder>
	IsRotaryEncoderStatus = ENCODER_RUN;
 8004e86:	4b03      	ldr	r3, [pc, #12]	@ (8004e94 <HAL_GPIO_EXTI_Callback+0x1c>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000544 	.word	0x20000544

08004e98 <Callback01>:




void Callback01(void *argument)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]


}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <Delay_us>:
  * @brief Delay_us
  * @param uint16_t time_us
  * @retval	 None
  */
void Delay_us(uint16_t time_us)			/* time delay for us in 72MHz */
{
 8004eaa:	b490      	push	{r4, r7}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	80fb      	strh	r3, [r7, #6]
  register uint16_t i;
  for(i = 0; i < time_us; i++)
 8004eb4:	2400      	movs	r4, #0
 8004eb6:	e044      	b.n	8004f42 <Delay_us+0x98>
 { asm("NOP");
 8004eb8:	bf00      	nop
      asm("NOP");
 8004eba:	bf00      	nop
      asm("NOP");
 8004ebc:	bf00      	nop
      asm("NOP");
 8004ebe:	bf00      	nop
      asm("NOP");				// 5
 8004ec0:	bf00      	nop
      asm("NOP");
 8004ec2:	bf00      	nop
      asm("NOP");
 8004ec4:	bf00      	nop
      asm("NOP");
 8004ec6:	bf00      	nop
      asm("NOP");
 8004ec8:	bf00      	nop
      asm("NOP");				// 10
 8004eca:	bf00      	nop
      asm("NOP");
 8004ecc:	bf00      	nop
      asm("NOP");
 8004ece:	bf00      	nop
      asm("NOP");
 8004ed0:	bf00      	nop
      asm("NOP");
 8004ed2:	bf00      	nop
      asm("NOP");				// 15
 8004ed4:	bf00      	nop
      asm("NOP");
 8004ed6:	bf00      	nop
      asm("NOP");
 8004ed8:	bf00      	nop
      asm("NOP");
 8004eda:	bf00      	nop
      asm("NOP");
 8004edc:	bf00      	nop
      asm("NOP");				// 20
 8004ede:	bf00      	nop
      asm("NOP");
 8004ee0:	bf00      	nop
      asm("NOP");
 8004ee2:	bf00      	nop
      asm("NOP");
 8004ee4:	bf00      	nop
      asm("NOP");
 8004ee6:	bf00      	nop
      asm("NOP");				// 25
 8004ee8:	bf00      	nop
      asm("NOP");
 8004eea:	bf00      	nop
      asm("NOP");
 8004eec:	bf00      	nop
      asm("NOP");
 8004eee:	bf00      	nop
      asm("NOP");
 8004ef0:	bf00      	nop
      asm("NOP");				// 30
 8004ef2:	bf00      	nop
      asm("NOP");
 8004ef4:	bf00      	nop
      asm("NOP");
 8004ef6:	bf00      	nop
      asm("NOP");
 8004ef8:	bf00      	nop
      asm("NOP");
 8004efa:	bf00      	nop
      asm("NOP");				// 35
 8004efc:	bf00      	nop
      asm("NOP");
 8004efe:	bf00      	nop
      asm("NOP");
 8004f00:	bf00      	nop
      asm("NOP");
 8004f02:	bf00      	nop
      asm("NOP");
 8004f04:	bf00      	nop
      asm("NOP");				// 40
 8004f06:	bf00      	nop
      asm("NOP");
 8004f08:	bf00      	nop
      asm("NOP");
 8004f0a:	bf00      	nop
      asm("NOP");
 8004f0c:	bf00      	nop
      asm("NOP");
 8004f0e:	bf00      	nop
      asm("NOP");				// 45
 8004f10:	bf00      	nop
      asm("NOP");
 8004f12:	bf00      	nop
      asm("NOP");
 8004f14:	bf00      	nop
      asm("NOP");
 8004f16:	bf00      	nop
      asm("NOP");
 8004f18:	bf00      	nop
      asm("NOP");				// 50
 8004f1a:	bf00      	nop
      asm("NOP");
 8004f1c:	bf00      	nop
      asm("NOP");
 8004f1e:	bf00      	nop
      asm("NOP");
 8004f20:	bf00      	nop
      asm("NOP");
 8004f22:	bf00      	nop
      asm("NOP");				// 55
 8004f24:	bf00      	nop
      asm("NOP");
 8004f26:	bf00      	nop
      asm("NOP");
 8004f28:	bf00      	nop
      asm("NOP");
 8004f2a:	bf00      	nop
      asm("NOP");
 8004f2c:	bf00      	nop
      asm("NOP");				// 60
 8004f2e:	bf00      	nop
      asm("NOP");
 8004f30:	bf00      	nop
      asm("NOP");
 8004f32:	bf00      	nop
      asm("NOP");
 8004f34:	bf00      	nop
      asm("NOP");
 8004f36:	bf00      	nop
      asm("NOP");				// 65
 8004f38:	bf00      	nop
      asm("NOP");				// 66
 8004f3a:	bf00      	nop
  for(i = 0; i < time_us; i++)
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	3301      	adds	r3, #1
 8004f40:	b29c      	uxth	r4, r3
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d8b7      	bhi.n	8004eb8 <Delay_us+0xe>
    }
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc90      	pop	{r4, r7}
 8004f52:	4770      	bx	lr

08004f54 <Delay_ms>:
  * @brief Delay_ms
  * @param uint16_t time_ms
  * @retval	 None
  */
void Delay_ms(uint16_t time_ms)			/* time delay for ms in 72MHz */
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	80fb      	strh	r3, [r7, #6]
  register uint16_t i;
  for(i = 0; i < time_ms; i++)
 8004f5e:	2400      	movs	r4, #0
 8004f60:	e006      	b.n	8004f70 <Delay_ms+0x1c>
    Delay_us(1000);
 8004f62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f66:	f7ff ffa0 	bl	8004eaa <Delay_us>
  for(i = 0; i < time_ms; i++)
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	b29c      	uxth	r4, r3
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	d8f5      	bhi.n	8004f62 <Delay_ms+0xe>
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd90      	pop	{r4, r7, pc}

08004f80 <FndDisplay>:
/**
  * @brief FndDisplay
  * @param float output_value
  * @retval	 None
  */
void FndDisplay(float output_value,uint8_t digit ){
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
char source_buf[10];
char dest_buf[4];
uint8_t display_value=0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]

	if(digit==0){
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 8139 	bne.w	800520a <FndDisplay+0x28a>
		sprintf(source_buf,"%04.1f",output_value);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fb fab5 	bl	8000508 <__aeabi_f2d>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	f107 000c 	add.w	r0, r7, #12
 8004fa6:	49ce      	ldr	r1, [pc, #824]	@ (80052e0 <FndDisplay+0x360>)
 8004fa8:	f008 fa80 	bl	800d4ac <siprintf>
		//printf("source_buf=%s\n",source_buf);
		if(output_value >100){
 8004fac:	49cd      	ldr	r1, [pc, #820]	@ (80052e4 <FndDisplay+0x364>)
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fc f914 	bl	80011dc <__aeabi_fcmpgt>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d05d      	beq.n	8005076 <FndDisplay+0xf6>
			//  *1 ����
			memset(dest_buf,0,sizeof(dest_buf));
 8004fba:	f107 0308 	add.w	r3, r7, #8
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f008 fb6c 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+2), 1);
 8004fc8:	f107 030c 	add.w	r3, r7, #12
 8004fcc:	3302      	adds	r3, #2
 8004fce:	f107 0008 	add.w	r0, r7, #8
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	f008 fb6b 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f007 fc62 	bl	800c8a8 <atoi>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND3_CLK ,FndTable[display_value] & FndTable[DOT]);
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	4abf      	ldr	r2, [pc, #764]	@ (80052e8 <FndDisplay+0x368>)
 8004fec:	5cd2      	ldrb	r2, [r2, r3]
 8004fee:	4bbe      	ldr	r3, [pc, #760]	@ (80052e8 <FndDisplay+0x368>)
 8004ff0:	7a9b      	ldrb	r3, [r3, #10]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	2004      	movs	r0, #4
 8004ffa:	f000 fd15 	bl	8005a28 <FndShadowOutput>
			//printf("fnd digit 1=%d\n",display_value);

			//  *10 ����
			memset(dest_buf,0,sizeof(dest_buf));
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	2204      	movs	r2, #4
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f008 fb4a 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+1), 1);
 800500c:	f107 030c 	add.w	r3, r7, #12
 8005010:	3301      	adds	r3, #1
 8005012:	f107 0008 	add.w	r0, r7, #8
 8005016:	2201      	movs	r2, #1
 8005018:	4619      	mov	r1, r3
 800501a:	f008 fb49 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	4618      	mov	r0, r3
 8005024:	f007 fc40 	bl	800c8a8 <atoi>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND2_CLK ,(FndTable[display_value]));
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	4aae      	ldr	r2, [pc, #696]	@ (80052e8 <FndDisplay+0x368>)
 8005030:	5cd3      	ldrb	r3, [r2, r3]
 8005032:	4619      	mov	r1, r3
 8005034:	2002      	movs	r0, #2
 8005036:	f000 fcf7 	bl	8005a28 <FndShadowOutput>
			//printf("fnd digit 10=%d\n",display_value);

			// *100 ����
			memset(dest_buf,0,sizeof(dest_buf));
 800503a:	f107 0308 	add.w	r3, r7, #8
 800503e:	2204      	movs	r2, #4
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f008 fb2c 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+0), 1);
 8005048:	f107 010c 	add.w	r1, r7, #12
 800504c:	f107 0308 	add.w	r3, r7, #8
 8005050:	2201      	movs	r2, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f008 fb2c 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 8005058:	f107 0308 	add.w	r3, r7, #8
 800505c:	4618      	mov	r0, r3
 800505e:	f007 fc23 	bl	800c8a8 <atoi>
 8005062:	4603      	mov	r3, r0
 8005064:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND1_CLK ,FndTable[display_value]);
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	4a9f      	ldr	r2, [pc, #636]	@ (80052e8 <FndDisplay+0x368>)
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	4619      	mov	r1, r3
 800506e:	2001      	movs	r0, #1
 8005070:	f000 fcda 	bl	8005a28 <FndShadowOutput>
			display_value=atoi(dest_buf);
			FndShadowOutput(FND1_CLK ,(FndTable[display_value]));
		}
	}

}
 8005074:	e329      	b.n	80056ca <FndDisplay+0x74a>
		}else if(output_value <100 && output_value >9){
 8005076:	499b      	ldr	r1, [pc, #620]	@ (80052e4 <FndDisplay+0x364>)
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fc f891 	bl	80011a0 <__aeabi_fcmplt>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d064      	beq.n	800514e <FndDisplay+0x1ce>
 8005084:	4999      	ldr	r1, [pc, #612]	@ (80052ec <FndDisplay+0x36c>)
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fc f8a8 	bl	80011dc <__aeabi_fcmpgt>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d05d      	beq.n	800514e <FndDisplay+0x1ce>
			memset(dest_buf,0,sizeof(dest_buf));
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	2204      	movs	r2, #4
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f008 fb00 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+3), 1);
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	3303      	adds	r3, #3
 80050a6:	f107 0008 	add.w	r0, r7, #8
 80050aa:	2201      	movs	r2, #1
 80050ac:	4619      	mov	r1, r3
 80050ae:	f008 faff 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 80050b2:	f107 0308 	add.w	r3, r7, #8
 80050b6:	4618      	mov	r0, r3
 80050b8:	f007 fbf6 	bl	800c8a8 <atoi>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND3_CLK ,FndTable[display_value] );
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	4a89      	ldr	r2, [pc, #548]	@ (80052e8 <FndDisplay+0x368>)
 80050c4:	5cd3      	ldrb	r3, [r2, r3]
 80050c6:	4619      	mov	r1, r3
 80050c8:	2004      	movs	r0, #4
 80050ca:	f000 fcad 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	2204      	movs	r2, #4
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f008 fae2 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+1), 1);
 80050dc:	f107 030c 	add.w	r3, r7, #12
 80050e0:	3301      	adds	r3, #1
 80050e2:	f107 0008 	add.w	r0, r7, #8
 80050e6:	2201      	movs	r2, #1
 80050e8:	4619      	mov	r1, r3
 80050ea:	f008 fae1 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 80050ee:	f107 0308 	add.w	r3, r7, #8
 80050f2:	4618      	mov	r0, r3
 80050f4:	f007 fbd8 	bl	800c8a8 <atoi>
 80050f8:	4603      	mov	r3, r0
 80050fa:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND2_CLK ,FndTable[display_value] & FndTable[DOT]);
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	4a7a      	ldr	r2, [pc, #488]	@ (80052e8 <FndDisplay+0x368>)
 8005100:	5cd2      	ldrb	r2, [r2, r3]
 8005102:	4b79      	ldr	r3, [pc, #484]	@ (80052e8 <FndDisplay+0x368>)
 8005104:	7a9b      	ldrb	r3, [r3, #10]
 8005106:	4013      	ands	r3, r2
 8005108:	b2db      	uxtb	r3, r3
 800510a:	4619      	mov	r1, r3
 800510c:	2002      	movs	r0, #2
 800510e:	f000 fc8b 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	2204      	movs	r2, #4
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f008 fac0 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+0), 1);
 8005120:	f107 010c 	add.w	r1, r7, #12
 8005124:	f107 0308 	add.w	r3, r7, #8
 8005128:	2201      	movs	r2, #1
 800512a:	4618      	mov	r0, r3
 800512c:	f008 fac0 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 8005130:	f107 0308 	add.w	r3, r7, #8
 8005134:	4618      	mov	r0, r3
 8005136:	f007 fbb7 	bl	800c8a8 <atoi>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND1_CLK ,FndTable[display_value]);
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	4a69      	ldr	r2, [pc, #420]	@ (80052e8 <FndDisplay+0x368>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	4619      	mov	r1, r3
 8005146:	2001      	movs	r0, #1
 8005148:	f000 fc6e 	bl	8005a28 <FndShadowOutput>
}
 800514c:	e2bd      	b.n	80056ca <FndDisplay+0x74a>
			memset(dest_buf,0,sizeof(dest_buf));
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	2204      	movs	r2, #4
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f008 faa2 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+4), 1);
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	3304      	adds	r3, #4
 8005162:	f107 0008 	add.w	r0, r7, #8
 8005166:	2201      	movs	r2, #1
 8005168:	4619      	mov	r1, r3
 800516a:	f008 faa1 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 800516e:	f107 0308 	add.w	r3, r7, #8
 8005172:	4618      	mov	r0, r3
 8005174:	f007 fb98 	bl	800c8a8 <atoi>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND3_CLK ,FndTable[display_value] );
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	4a5a      	ldr	r2, [pc, #360]	@ (80052e8 <FndDisplay+0x368>)
 8005180:	5cd3      	ldrb	r3, [r2, r3]
 8005182:	4619      	mov	r1, r3
 8005184:	2004      	movs	r0, #4
 8005186:	f000 fc4f 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	2204      	movs	r2, #4
 8005190:	2100      	movs	r1, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f008 fa84 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+3), 1);
 8005198:	f107 030c 	add.w	r3, r7, #12
 800519c:	3303      	adds	r3, #3
 800519e:	f107 0008 	add.w	r0, r7, #8
 80051a2:	2201      	movs	r2, #1
 80051a4:	4619      	mov	r1, r3
 80051a6:	f008 fa83 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4618      	mov	r0, r3
 80051b0:	f007 fb7a 	bl	800c8a8 <atoi>
 80051b4:	4603      	mov	r3, r0
 80051b6:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND2_CLK ,FndTable[display_value] );
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	4a4b      	ldr	r2, [pc, #300]	@ (80052e8 <FndDisplay+0x368>)
 80051bc:	5cd3      	ldrb	r3, [r2, r3]
 80051be:	4619      	mov	r1, r3
 80051c0:	2002      	movs	r0, #2
 80051c2:	f000 fc31 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 80051c6:	f107 0308 	add.w	r3, r7, #8
 80051ca:	2204      	movs	r2, #4
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f008 fa66 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+0), 1);
 80051d4:	f107 010c 	add.w	r1, r7, #12
 80051d8:	f107 0308 	add.w	r3, r7, #8
 80051dc:	2201      	movs	r2, #1
 80051de:	4618      	mov	r0, r3
 80051e0:	f008 fa66 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 80051e4:	f107 0308 	add.w	r3, r7, #8
 80051e8:	4618      	mov	r0, r3
 80051ea:	f007 fb5d 	bl	800c8a8 <atoi>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND1_CLK ,FndTable[display_value]& FndTable[DOT]);
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	4a3c      	ldr	r2, [pc, #240]	@ (80052e8 <FndDisplay+0x368>)
 80051f6:	5cd2      	ldrb	r2, [r2, r3]
 80051f8:	4b3b      	ldr	r3, [pc, #236]	@ (80052e8 <FndDisplay+0x368>)
 80051fa:	7a9b      	ldrb	r3, [r3, #10]
 80051fc:	4013      	ands	r3, r2
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	2001      	movs	r0, #1
 8005204:	f000 fc10 	bl	8005a28 <FndShadowOutput>
}
 8005208:	e25f      	b.n	80056ca <FndDisplay+0x74a>
	}else if (digit==1){
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d16f      	bne.n	80052f0 <FndDisplay+0x370>
		sprintf(source_buf,"%04.1f",output_value);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7fb f979 	bl	8000508 <__aeabi_f2d>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	f107 000c 	add.w	r0, r7, #12
 800521e:	4930      	ldr	r1, [pc, #192]	@ (80052e0 <FndDisplay+0x360>)
 8005220:	f008 f944 	bl	800d4ac <siprintf>
		memset(dest_buf,0,sizeof(dest_buf));
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	2204      	movs	r2, #4
 800522a:	2100      	movs	r1, #0
 800522c:	4618      	mov	r0, r3
 800522e:	f008 fa37 	bl	800d6a0 <memset>
		strncpy(dest_buf, (source_buf+3), 1);
 8005232:	f107 030c 	add.w	r3, r7, #12
 8005236:	3303      	adds	r3, #3
 8005238:	f107 0008 	add.w	r0, r7, #8
 800523c:	2201      	movs	r2, #1
 800523e:	4619      	mov	r1, r3
 8005240:	f008 fa36 	bl	800d6b0 <strncpy>
		display_value=atoi(dest_buf);
 8005244:	f107 0308 	add.w	r3, r7, #8
 8005248:	4618      	mov	r0, r3
 800524a:	f007 fb2d 	bl	800c8a8 <atoi>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]
		FndShadowOutput(FND3_CLK ,FndTable[display_value]);
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	4a24      	ldr	r2, [pc, #144]	@ (80052e8 <FndDisplay+0x368>)
 8005256:	5cd3      	ldrb	r3, [r2, r3]
 8005258:	4619      	mov	r1, r3
 800525a:	2004      	movs	r0, #4
 800525c:	f000 fbe4 	bl	8005a28 <FndShadowOutput>
		memset(dest_buf,0,sizeof(dest_buf));
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	2204      	movs	r2, #4
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f008 fa19 	bl	800d6a0 <memset>
		strncpy(dest_buf, (source_buf+1), 1);
 800526e:	f107 030c 	add.w	r3, r7, #12
 8005272:	3301      	adds	r3, #1
 8005274:	f107 0008 	add.w	r0, r7, #8
 8005278:	2201      	movs	r2, #1
 800527a:	4619      	mov	r1, r3
 800527c:	f008 fa18 	bl	800d6b0 <strncpy>
		display_value=atoi(dest_buf);
 8005280:	f107 0308 	add.w	r3, r7, #8
 8005284:	4618      	mov	r0, r3
 8005286:	f007 fb0f 	bl	800c8a8 <atoi>
 800528a:	4603      	mov	r3, r0
 800528c:	75fb      	strb	r3, [r7, #23]
		FndShadowOutput(FND2_CLK ,(FndTable[display_value] & FndTable[DOT]));
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	4a15      	ldr	r2, [pc, #84]	@ (80052e8 <FndDisplay+0x368>)
 8005292:	5cd2      	ldrb	r2, [r2, r3]
 8005294:	4b14      	ldr	r3, [pc, #80]	@ (80052e8 <FndDisplay+0x368>)
 8005296:	7a9b      	ldrb	r3, [r3, #10]
 8005298:	4013      	ands	r3, r2
 800529a:	b2db      	uxtb	r3, r3
 800529c:	4619      	mov	r1, r3
 800529e:	2002      	movs	r0, #2
 80052a0:	f000 fbc2 	bl	8005a28 <FndShadowOutput>
		memset(dest_buf,0,sizeof(dest_buf));
 80052a4:	f107 0308 	add.w	r3, r7, #8
 80052a8:	2204      	movs	r2, #4
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f008 f9f7 	bl	800d6a0 <memset>
		strncpy(dest_buf, (source_buf+0), 1);
 80052b2:	f107 010c 	add.w	r1, r7, #12
 80052b6:	f107 0308 	add.w	r3, r7, #8
 80052ba:	2201      	movs	r2, #1
 80052bc:	4618      	mov	r0, r3
 80052be:	f008 f9f7 	bl	800d6b0 <strncpy>
		display_value=atoi(dest_buf);
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f007 faee 	bl	800c8a8 <atoi>
 80052cc:	4603      	mov	r3, r0
 80052ce:	75fb      	strb	r3, [r7, #23]
		FndShadowOutput(FND1_CLK ,FndTable[display_value]);
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	4a05      	ldr	r2, [pc, #20]	@ (80052e8 <FndDisplay+0x368>)
 80052d4:	5cd3      	ldrb	r3, [r2, r3]
 80052d6:	4619      	mov	r1, r3
 80052d8:	2001      	movs	r0, #1
 80052da:	f000 fba5 	bl	8005a28 <FndShadowOutput>
}
 80052de:	e1f4      	b.n	80056ca <FndDisplay+0x74a>
 80052e0:	0800f8d4 	.word	0x0800f8d4
 80052e4:	42c80000 	.word	0x42c80000
 80052e8:	2000001c 	.word	0x2000001c
 80052ec:	41100000 	.word	0x41100000
	}else if (digit==2){
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	f040 80d1 	bne.w	800549a <FndDisplay+0x51a>
		sprintf(source_buf,"%04.2f",output_value);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fb f905 	bl	8000508 <__aeabi_f2d>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	f107 000c 	add.w	r0, r7, #12
 8005306:	49be      	ldr	r1, [pc, #760]	@ (8005600 <FndDisplay+0x680>)
 8005308:	f008 f8d0 	bl	800d4ac <siprintf>
		 if(output_value >9.99){
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fb f8fb 	bl	8000508 <__aeabi_f2d>
 8005312:	a3b9      	add	r3, pc, #740	@ (adr r3, 80055f8 <FndDisplay+0x678>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f7fb fbde 	bl	8000ad8 <__aeabi_dcmpgt>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d05d      	beq.n	80053de <FndDisplay+0x45e>
			memset(dest_buf,0,sizeof(dest_buf));
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	2204      	movs	r2, #4
 8005328:	2100      	movs	r1, #0
 800532a:	4618      	mov	r0, r3
 800532c:	f008 f9b8 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+3), 1);
 8005330:	f107 030c 	add.w	r3, r7, #12
 8005334:	3303      	adds	r3, #3
 8005336:	f107 0008 	add.w	r0, r7, #8
 800533a:	2201      	movs	r2, #1
 800533c:	4619      	mov	r1, r3
 800533e:	f008 f9b7 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 8005342:	f107 0308 	add.w	r3, r7, #8
 8005346:	4618      	mov	r0, r3
 8005348:	f007 faae 	bl	800c8a8 <atoi>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND3_CLK ,FndTable[display_value] );
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	4aac      	ldr	r2, [pc, #688]	@ (8005604 <FndDisplay+0x684>)
 8005354:	5cd3      	ldrb	r3, [r2, r3]
 8005356:	4619      	mov	r1, r3
 8005358:	2004      	movs	r0, #4
 800535a:	f000 fb65 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 800535e:	f107 0308 	add.w	r3, r7, #8
 8005362:	2204      	movs	r2, #4
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f008 f99a 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+1), 1);
 800536c:	f107 030c 	add.w	r3, r7, #12
 8005370:	3301      	adds	r3, #1
 8005372:	f107 0008 	add.w	r0, r7, #8
 8005376:	2201      	movs	r2, #1
 8005378:	4619      	mov	r1, r3
 800537a:	f008 f999 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 800537e:	f107 0308 	add.w	r3, r7, #8
 8005382:	4618      	mov	r0, r3
 8005384:	f007 fa90 	bl	800c8a8 <atoi>
 8005388:	4603      	mov	r3, r0
 800538a:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND2_CLK ,(FndTable[display_value])& FndTable[DOT]);
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	4a9d      	ldr	r2, [pc, #628]	@ (8005604 <FndDisplay+0x684>)
 8005390:	5cd2      	ldrb	r2, [r2, r3]
 8005392:	4b9c      	ldr	r3, [pc, #624]	@ (8005604 <FndDisplay+0x684>)
 8005394:	7a9b      	ldrb	r3, [r3, #10]
 8005396:	4013      	ands	r3, r2
 8005398:	b2db      	uxtb	r3, r3
 800539a:	4619      	mov	r1, r3
 800539c:	2002      	movs	r0, #2
 800539e:	f000 fb43 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 80053a2:	f107 0308 	add.w	r3, r7, #8
 80053a6:	2204      	movs	r2, #4
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f008 f978 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+0), 1);
 80053b0:	f107 010c 	add.w	r1, r7, #12
 80053b4:	f107 0308 	add.w	r3, r7, #8
 80053b8:	2201      	movs	r2, #1
 80053ba:	4618      	mov	r0, r3
 80053bc:	f008 f978 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 80053c0:	f107 0308 	add.w	r3, r7, #8
 80053c4:	4618      	mov	r0, r3
 80053c6:	f007 fa6f 	bl	800c8a8 <atoi>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND1_CLK ,FndTable[display_value]);
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
 80053d0:	4a8c      	ldr	r2, [pc, #560]	@ (8005604 <FndDisplay+0x684>)
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	4619      	mov	r1, r3
 80053d6:	2001      	movs	r0, #1
 80053d8:	f000 fb26 	bl	8005a28 <FndShadowOutput>
}
 80053dc:	e175      	b.n	80056ca <FndDisplay+0x74a>
			memset(dest_buf,0,sizeof(dest_buf));
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	2204      	movs	r2, #4
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f008 f95a 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+3), 1);
 80053ec:	f107 030c 	add.w	r3, r7, #12
 80053f0:	3303      	adds	r3, #3
 80053f2:	f107 0008 	add.w	r0, r7, #8
 80053f6:	2201      	movs	r2, #1
 80053f8:	4619      	mov	r1, r3
 80053fa:	f008 f959 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	4618      	mov	r0, r3
 8005404:	f007 fa50 	bl	800c8a8 <atoi>
 8005408:	4603      	mov	r3, r0
 800540a:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND3_CLK ,FndTable[display_value] );
 800540c:	7dfb      	ldrb	r3, [r7, #23]
 800540e:	4a7d      	ldr	r2, [pc, #500]	@ (8005604 <FndDisplay+0x684>)
 8005410:	5cd3      	ldrb	r3, [r2, r3]
 8005412:	4619      	mov	r1, r3
 8005414:	2004      	movs	r0, #4
 8005416:	f000 fb07 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 800541a:	f107 0308 	add.w	r3, r7, #8
 800541e:	2204      	movs	r2, #4
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f008 f93c 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+2), 1);
 8005428:	f107 030c 	add.w	r3, r7, #12
 800542c:	3302      	adds	r3, #2
 800542e:	f107 0008 	add.w	r0, r7, #8
 8005432:	2201      	movs	r2, #1
 8005434:	4619      	mov	r1, r3
 8005436:	f008 f93b 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 800543a:	f107 0308 	add.w	r3, r7, #8
 800543e:	4618      	mov	r0, r3
 8005440:	f007 fa32 	bl	800c8a8 <atoi>
 8005444:	4603      	mov	r3, r0
 8005446:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND2_CLK ,(FndTable[display_value]));
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	4a6e      	ldr	r2, [pc, #440]	@ (8005604 <FndDisplay+0x684>)
 800544c:	5cd3      	ldrb	r3, [r2, r3]
 800544e:	4619      	mov	r1, r3
 8005450:	2002      	movs	r0, #2
 8005452:	f000 fae9 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	2204      	movs	r2, #4
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f008 f91e 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+0), 1);
 8005464:	f107 010c 	add.w	r1, r7, #12
 8005468:	f107 0308 	add.w	r3, r7, #8
 800546c:	2201      	movs	r2, #1
 800546e:	4618      	mov	r0, r3
 8005470:	f008 f91e 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	4618      	mov	r0, r3
 800547a:	f007 fa15 	bl	800c8a8 <atoi>
 800547e:	4603      	mov	r3, r0
 8005480:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND1_CLK ,FndTable[display_value]& FndTable[DOT]);
 8005482:	7dfb      	ldrb	r3, [r7, #23]
 8005484:	4a5f      	ldr	r2, [pc, #380]	@ (8005604 <FndDisplay+0x684>)
 8005486:	5cd2      	ldrb	r2, [r2, r3]
 8005488:	4b5e      	ldr	r3, [pc, #376]	@ (8005604 <FndDisplay+0x684>)
 800548a:	7a9b      	ldrb	r3, [r3, #10]
 800548c:	4013      	ands	r3, r2
 800548e:	b2db      	uxtb	r3, r3
 8005490:	4619      	mov	r1, r3
 8005492:	2001      	movs	r0, #1
 8005494:	f000 fac8 	bl	8005a28 <FndShadowOutput>
}
 8005498:	e117      	b.n	80056ca <FndDisplay+0x74a>
	}else if(digit==10){
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	2b0a      	cmp	r3, #10
 800549e:	d14f      	bne.n	8005540 <FndDisplay+0x5c0>
		sprintf(source_buf,"%04.1f",output_value);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fb f831 	bl	8000508 <__aeabi_f2d>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	f107 000c 	add.w	r0, r7, #12
 80054ae:	4956      	ldr	r1, [pc, #344]	@ (8005608 <FndDisplay+0x688>)
 80054b0:	f007 fffc 	bl	800d4ac <siprintf>
		memset(dest_buf,0,sizeof(dest_buf));
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	2204      	movs	r2, #4
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f008 f8ef 	bl	800d6a0 <memset>
		strncpy(dest_buf, (source_buf+1), 1);
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	3301      	adds	r3, #1
 80054c8:	f107 0008 	add.w	r0, r7, #8
 80054cc:	2201      	movs	r2, #1
 80054ce:	4619      	mov	r1, r3
 80054d0:	f008 f8ee 	bl	800d6b0 <strncpy>
		display_value=atoi(dest_buf);
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	4618      	mov	r0, r3
 80054da:	f007 f9e5 	bl	800c8a8 <atoi>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]
		FndShadowOutput(FND3_CLK ,FndTable[display_value] & FndTable[DOT]);
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	4a47      	ldr	r2, [pc, #284]	@ (8005604 <FndDisplay+0x684>)
 80054e6:	5cd2      	ldrb	r2, [r2, r3]
 80054e8:	4b46      	ldr	r3, [pc, #280]	@ (8005604 <FndDisplay+0x684>)
 80054ea:	7a9b      	ldrb	r3, [r3, #10]
 80054ec:	4013      	ands	r3, r2
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	4619      	mov	r1, r3
 80054f2:	2004      	movs	r0, #4
 80054f4:	f000 fa98 	bl	8005a28 <FndShadowOutput>
		memset(dest_buf,0,sizeof(dest_buf));
 80054f8:	f107 0308 	add.w	r3, r7, #8
 80054fc:	2204      	movs	r2, #4
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f008 f8cd 	bl	800d6a0 <memset>
		strncpy(dest_buf, (source_buf+0), 1);
 8005506:	f107 010c 	add.w	r1, r7, #12
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	2201      	movs	r2, #1
 8005510:	4618      	mov	r0, r3
 8005512:	f008 f8cd 	bl	800d6b0 <strncpy>
		display_value=atoi(dest_buf);
 8005516:	f107 0308 	add.w	r3, r7, #8
 800551a:	4618      	mov	r0, r3
 800551c:	f007 f9c4 	bl	800c8a8 <atoi>
 8005520:	4603      	mov	r3, r0
 8005522:	75fb      	strb	r3, [r7, #23]
		FndShadowOutput(FND2_CLK ,(FndTable[display_value]));
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	4a37      	ldr	r2, [pc, #220]	@ (8005604 <FndDisplay+0x684>)
 8005528:	5cd3      	ldrb	r3, [r2, r3]
 800552a:	4619      	mov	r1, r3
 800552c:	2002      	movs	r0, #2
 800552e:	f000 fa7b 	bl	8005a28 <FndShadowOutput>
		FndShadowOutput(FND1_CLK ,FndTable[0]);
 8005532:	4b34      	ldr	r3, [pc, #208]	@ (8005604 <FndDisplay+0x684>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	4619      	mov	r1, r3
 8005538:	2001      	movs	r0, #1
 800553a:	f000 fa75 	bl	8005a28 <FndShadowOutput>
}
 800553e:	e0c4      	b.n	80056ca <FndDisplay+0x74a>
	}else if(digit==100){
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	2b64      	cmp	r3, #100	@ 0x64
 8005544:	f040 80c1 	bne.w	80056ca <FndDisplay+0x74a>
		sprintf(source_buf,"%04.1f",output_value);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fa ffdd 	bl	8000508 <__aeabi_f2d>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	f107 000c 	add.w	r0, r7, #12
 8005556:	492c      	ldr	r1, [pc, #176]	@ (8005608 <FndDisplay+0x688>)
 8005558:	f007 ffa8 	bl	800d4ac <siprintf>
		if(output_value <100.0){
 800555c:	492b      	ldr	r1, [pc, #172]	@ (800560c <FndDisplay+0x68c>)
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fb fe1e 	bl	80011a0 <__aeabi_fcmplt>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d052      	beq.n	8005610 <FndDisplay+0x690>
			memset(dest_buf,0,sizeof(dest_buf));
 800556a:	f107 0308 	add.w	r3, r7, #8
 800556e:	2204      	movs	r2, #4
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f008 f894 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+1), 1);
 8005578:	f107 030c 	add.w	r3, r7, #12
 800557c:	3301      	adds	r3, #1
 800557e:	f107 0008 	add.w	r0, r7, #8
 8005582:	2201      	movs	r2, #1
 8005584:	4619      	mov	r1, r3
 8005586:	f008 f893 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 800558a:	f107 0308 	add.w	r3, r7, #8
 800558e:	4618      	mov	r0, r3
 8005590:	f007 f98a 	bl	800c8a8 <atoi>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND3_CLK ,FndTable[display_value] & FndTable[DOT]);
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	4a1a      	ldr	r2, [pc, #104]	@ (8005604 <FndDisplay+0x684>)
 800559c:	5cd2      	ldrb	r2, [r2, r3]
 800559e:	4b19      	ldr	r3, [pc, #100]	@ (8005604 <FndDisplay+0x684>)
 80055a0:	7a9b      	ldrb	r3, [r3, #10]
 80055a2:	4013      	ands	r3, r2
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	4619      	mov	r1, r3
 80055a8:	2004      	movs	r0, #4
 80055aa:	f000 fa3d 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	2204      	movs	r2, #4
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f008 f872 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+0), 1);
 80055bc:	f107 010c 	add.w	r1, r7, #12
 80055c0:	f107 0308 	add.w	r3, r7, #8
 80055c4:	2201      	movs	r2, #1
 80055c6:	4618      	mov	r0, r3
 80055c8:	f008 f872 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 80055cc:	f107 0308 	add.w	r3, r7, #8
 80055d0:	4618      	mov	r0, r3
 80055d2:	f007 f969 	bl	800c8a8 <atoi>
 80055d6:	4603      	mov	r3, r0
 80055d8:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND2_CLK ,(FndTable[display_value]));
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	4a09      	ldr	r2, [pc, #36]	@ (8005604 <FndDisplay+0x684>)
 80055de:	5cd3      	ldrb	r3, [r2, r3]
 80055e0:	4619      	mov	r1, r3
 80055e2:	2002      	movs	r0, #2
 80055e4:	f000 fa20 	bl	8005a28 <FndShadowOutput>
			FndShadowOutput(FND1_CLK ,FndTable[0]);
 80055e8:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <FndDisplay+0x684>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	4619      	mov	r1, r3
 80055ee:	2001      	movs	r0, #1
 80055f0:	f000 fa1a 	bl	8005a28 <FndShadowOutput>
}
 80055f4:	e069      	b.n	80056ca <FndDisplay+0x74a>
 80055f6:	bf00      	nop
 80055f8:	47ae147b 	.word	0x47ae147b
 80055fc:	4023fae1 	.word	0x4023fae1
 8005600:	0800f8dc 	.word	0x0800f8dc
 8005604:	2000001c 	.word	0x2000001c
 8005608:	0800f8d4 	.word	0x0800f8d4
 800560c:	42c80000 	.word	0x42c80000
			memset(dest_buf,0,sizeof(dest_buf));
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	2204      	movs	r2, #4
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f008 f841 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+2), 1);
 800561e:	f107 030c 	add.w	r3, r7, #12
 8005622:	3302      	adds	r3, #2
 8005624:	f107 0008 	add.w	r0, r7, #8
 8005628:	2201      	movs	r2, #1
 800562a:	4619      	mov	r1, r3
 800562c:	f008 f840 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 8005630:	f107 0308 	add.w	r3, r7, #8
 8005634:	4618      	mov	r0, r3
 8005636:	f007 f937 	bl	800c8a8 <atoi>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND3_CLK ,FndTable[display_value] & FndTable[DOT]);
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	4a24      	ldr	r2, [pc, #144]	@ (80056d4 <FndDisplay+0x754>)
 8005642:	5cd2      	ldrb	r2, [r2, r3]
 8005644:	4b23      	ldr	r3, [pc, #140]	@ (80056d4 <FndDisplay+0x754>)
 8005646:	7a9b      	ldrb	r3, [r3, #10]
 8005648:	4013      	ands	r3, r2
 800564a:	b2db      	uxtb	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	2004      	movs	r0, #4
 8005650:	f000 f9ea 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 8005654:	f107 0308 	add.w	r3, r7, #8
 8005658:	2204      	movs	r2, #4
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f008 f81f 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+1), 1);
 8005662:	f107 030c 	add.w	r3, r7, #12
 8005666:	3301      	adds	r3, #1
 8005668:	f107 0008 	add.w	r0, r7, #8
 800566c:	2201      	movs	r2, #1
 800566e:	4619      	mov	r1, r3
 8005670:	f008 f81e 	bl	800d6b0 <strncpy>
			display_value = atoi(dest_buf);
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4618      	mov	r0, r3
 800567a:	f007 f915 	bl	800c8a8 <atoi>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND2_CLK ,(FndTable[display_value]));
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	4a13      	ldr	r2, [pc, #76]	@ (80056d4 <FndDisplay+0x754>)
 8005686:	5cd3      	ldrb	r3, [r2, r3]
 8005688:	4619      	mov	r1, r3
 800568a:	2002      	movs	r0, #2
 800568c:	f000 f9cc 	bl	8005a28 <FndShadowOutput>
			memset(dest_buf,0,sizeof(dest_buf));
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	2204      	movs	r2, #4
 8005696:	2100      	movs	r1, #0
 8005698:	4618      	mov	r0, r3
 800569a:	f008 f801 	bl	800d6a0 <memset>
			strncpy(dest_buf, (source_buf+0), 1);
 800569e:	f107 010c 	add.w	r1, r7, #12
 80056a2:	f107 0308 	add.w	r3, r7, #8
 80056a6:	2201      	movs	r2, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f008 f801 	bl	800d6b0 <strncpy>
			display_value=atoi(dest_buf);
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f007 f8f8 	bl	800c8a8 <atoi>
 80056b8:	4603      	mov	r3, r0
 80056ba:	75fb      	strb	r3, [r7, #23]
			FndShadowOutput(FND1_CLK ,(FndTable[display_value]));
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	4a05      	ldr	r2, [pc, #20]	@ (80056d4 <FndDisplay+0x754>)
 80056c0:	5cd3      	ldrb	r3, [r2, r3]
 80056c2:	4619      	mov	r1, r3
 80056c4:	2001      	movs	r0, #1
 80056c6:	f000 f9af 	bl	8005a28 <FndShadowOutput>
}
 80056ca:	bf00      	nop
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2000001c 	.word	0x2000001c

080056d8 <FndDisplayString>:
  * @brief FndDisplayString
  * @param uint8_t *str
  * @retval	 None
  */
void FndDisplayString(uint8_t strValue)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
	FndAllOff();
 80056e2:	f000 fa03 	bl	8005aec <FndAllOff>
	switch (strValue)
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <FndDisplayString+0x32>
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d119      	bne.n	8005724 <FndDisplayString+0x4c>
	{
	case EDIT:
		FndShadowOutput(FND1_CLK ,0x84); //e
 80056f0:	2184      	movs	r1, #132	@ 0x84
 80056f2:	2001      	movs	r0, #1
 80056f4:	f000 f998 	bl	8005a28 <FndShadowOutput>
		FndShadowOutput(FND2_CLK ,0xa1); //d
 80056f8:	21a1      	movs	r1, #161	@ 0xa1
 80056fa:	2002      	movs	r0, #2
 80056fc:	f000 f994 	bl	8005a28 <FndShadowOutput>
		FndShadowOutput(FND3_CLK ,0x87); //t
 8005700:	2187      	movs	r1, #135	@ 0x87
 8005702:	2004      	movs	r0, #4
 8005704:	f000 f990 	bl	8005a28 <FndShadowOutput>

		break;
 8005708:	e00d      	b.n	8005726 <FndDisplayString+0x4e>
	case RUN:
		FndShadowOutput(FND1_CLK ,0x88); //r
 800570a:	2188      	movs	r1, #136	@ 0x88
 800570c:	2001      	movs	r0, #1
 800570e:	f000 f98b 	bl	8005a28 <FndShadowOutput>
		FndShadowOutput(FND2_CLK ,0xc1); //u
 8005712:	21c1      	movs	r1, #193	@ 0xc1
 8005714:	2002      	movs	r0, #2
 8005716:	f000 f987 	bl	8005a28 <FndShadowOutput>
		FndShadowOutput(FND3_CLK ,0xc8); //n
 800571a:	21c8      	movs	r1, #200	@ 0xc8
 800571c:	2004      	movs	r0, #4
 800571e:	f000 f983 	bl	8005a28 <FndShadowOutput>

		break;
 8005722:	e000      	b.n	8005726 <FndDisplayString+0x4e>

	default:
		break;
 8005724:	bf00      	nop

	}
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <FndDispalyParameter>:
/**
  * @brief FndDispalyParameter
  * @param uint8_t Parameter
  * @retval	 None
  */
void FndDispalyParameter(uint8_t Parameter){
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
	FndAllOff();
 800573a:	f000 f9d7 	bl	8005aec <FndAllOff>
	switch(Parameter){
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	3b01      	subs	r3, #1
 8005742:	2b0f      	cmp	r3, #15
 8005744:	f200 8134 	bhi.w	80059b0 <FndDispalyParameter+0x280>
 8005748:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <FndDispalyParameter+0x20>)
 800574a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574e:	bf00      	nop
 8005750:	08005791 	.word	0x08005791
 8005754:	080057b3 	.word	0x080057b3
 8005758:	080057d5 	.word	0x080057d5
 800575c:	080057f7 	.word	0x080057f7
 8005760:	08005819 	.word	0x08005819
 8005764:	0800583b 	.word	0x0800583b
 8005768:	0800585d 	.word	0x0800585d
 800576c:	0800587f 	.word	0x0800587f
 8005770:	080058a1 	.word	0x080058a1
 8005774:	080058c3 	.word	0x080058c3
 8005778:	080058e5 	.word	0x080058e5
 800577c:	08005907 	.word	0x08005907
 8005780:	08005929 	.word	0x08005929
 8005784:	0800594b 	.word	0x0800594b
 8005788:	0800596d 	.word	0x0800596d
 800578c:	0800598f 	.word	0x0800598f
		case 1: //POS
			// *10 ����
			FndOutput(FND1_CLK ,0x8C); //P
 8005790:	218c      	movs	r1, #140	@ 0x8c
 8005792:	2001      	movs	r0, #1
 8005794:	f000 f98a 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 8005798:	4b88      	ldr	r3, [pc, #544]	@ (80059bc <FndDispalyParameter+0x28c>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	4619      	mov	r1, r3
 800579e:	2002      	movs	r0, #2
 80057a0:	f000 f984 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[1]);
 80057a4:	4b85      	ldr	r3, [pc, #532]	@ (80059bc <FndDispalyParameter+0x28c>)
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	4619      	mov	r1, r3
 80057aa:	2004      	movs	r0, #4
 80057ac:	f000 f97e 	bl	8005aac <FndOutput>
			break;
 80057b0:	e0ff      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 2 ://�˶�üũ ����
			FndOutput(FND1_CLK ,0x8C);
 80057b2:	218c      	movs	r1, #140	@ 0x8c
 80057b4:	2001      	movs	r0, #1
 80057b6:	f000 f979 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 80057ba:	4b80      	ldr	r3, [pc, #512]	@ (80059bc <FndDispalyParameter+0x28c>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	2002      	movs	r0, #2
 80057c2:	f000 f973 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[2]);
 80057c6:	4b7d      	ldr	r3, [pc, #500]	@ (80059bc <FndDispalyParameter+0x28c>)
 80057c8:	789b      	ldrb	r3, [r3, #2]
 80057ca:	4619      	mov	r1, r3
 80057cc:	2004      	movs	r0, #4
 80057ce:	f000 f96d 	bl	8005aac <FndOutput>
			break;
 80057d2:	e0ee      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 3 ://P
			FndOutput(FND1_CLK ,0x8C);
 80057d4:	218c      	movs	r1, #140	@ 0x8c
 80057d6:	2001      	movs	r0, #1
 80057d8:	f000 f968 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 80057dc:	4b77      	ldr	r3, [pc, #476]	@ (80059bc <FndDispalyParameter+0x28c>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	4619      	mov	r1, r3
 80057e2:	2002      	movs	r0, #2
 80057e4:	f000 f962 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[3]);
 80057e8:	4b74      	ldr	r3, [pc, #464]	@ (80059bc <FndDispalyParameter+0x28c>)
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	4619      	mov	r1, r3
 80057ee:	2004      	movs	r0, #4
 80057f0:	f000 f95c 	bl	8005aac <FndOutput>
			break;
 80057f4:	e0dd      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 4 ://I
			FndOutput(FND1_CLK ,0x8C);
 80057f6:	218c      	movs	r1, #140	@ 0x8c
 80057f8:	2001      	movs	r0, #1
 80057fa:	f000 f957 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 80057fe:	4b6f      	ldr	r3, [pc, #444]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	4619      	mov	r1, r3
 8005804:	2002      	movs	r0, #2
 8005806:	f000 f951 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[4]);
 800580a:	4b6c      	ldr	r3, [pc, #432]	@ (80059bc <FndDispalyParameter+0x28c>)
 800580c:	791b      	ldrb	r3, [r3, #4]
 800580e:	4619      	mov	r1, r3
 8005810:	2004      	movs	r0, #4
 8005812:	f000 f94b 	bl	8005aac <FndOutput>
			break;
 8005816:	e0cc      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 5: //D
			FndOutput(FND1_CLK ,0x8C);
 8005818:	218c      	movs	r1, #140	@ 0x8c
 800581a:	2001      	movs	r0, #1
 800581c:	f000 f946 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 8005820:	4b66      	ldr	r3, [pc, #408]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	4619      	mov	r1, r3
 8005826:	2002      	movs	r0, #2
 8005828:	f000 f940 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[5]);
 800582c:	4b63      	ldr	r3, [pc, #396]	@ (80059bc <FndDispalyParameter+0x28c>)
 800582e:	795b      	ldrb	r3, [r3, #5]
 8005830:	4619      	mov	r1, r3
 8005832:	2004      	movs	r0, #4
 8005834:	f000 f93a 	bl	8005aac <FndOutput>
			break;
 8005838:	e0bb      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 6: //Max
			FndOutput(FND1_CLK ,0x8C);
 800583a:	218c      	movs	r1, #140	@ 0x8c
 800583c:	2001      	movs	r0, #1
 800583e:	f000 f935 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 8005842:	4b5e      	ldr	r3, [pc, #376]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	4619      	mov	r1, r3
 8005848:	2002      	movs	r0, #2
 800584a:	f000 f92f 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[6]);
 800584e:	4b5b      	ldr	r3, [pc, #364]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005850:	799b      	ldrb	r3, [r3, #6]
 8005852:	4619      	mov	r1, r3
 8005854:	2004      	movs	r0, #4
 8005856:	f000 f929 	bl	8005aac <FndOutput>
			break;
 800585a:	e0aa      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 7: //Min
			FndOutput(FND1_CLK ,0x8C);
 800585c:	218c      	movs	r1, #140	@ 0x8c
 800585e:	2001      	movs	r0, #1
 8005860:	f000 f924 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 8005864:	4b55      	ldr	r3, [pc, #340]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	4619      	mov	r1, r3
 800586a:	2002      	movs	r0, #2
 800586c:	f000 f91e 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[7]);
 8005870:	4b52      	ldr	r3, [pc, #328]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005872:	79db      	ldrb	r3, [r3, #7]
 8005874:	4619      	mov	r1, r3
 8005876:	2004      	movs	r0, #4
 8005878:	f000 f918 	bl	8005aac <FndOutput>
			break;
 800587c:	e099      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 8: //Control Mode
			FndOutput(FND1_CLK ,0x8C);
 800587e:	218c      	movs	r1, #140	@ 0x8c
 8005880:	2001      	movs	r0, #1
 8005882:	f000 f913 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 8005886:	4b4d      	ldr	r3, [pc, #308]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	4619      	mov	r1, r3
 800588c:	2002      	movs	r0, #2
 800588e:	f000 f90d 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[8]);
 8005892:	4b4a      	ldr	r3, [pc, #296]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005894:	7a1b      	ldrb	r3, [r3, #8]
 8005896:	4619      	mov	r1, r3
 8005898:	2004      	movs	r0, #4
 800589a:	f000 f907 	bl	8005aac <FndOutput>
			break;
 800589e:	e088      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 9: //Display Mode
			FndOutput(FND1_CLK ,0x8C);
 80058a0:	218c      	movs	r1, #140	@ 0x8c
 80058a2:	2001      	movs	r0, #1
 80058a4:	f000 f902 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[0]);
 80058a8:	4b44      	ldr	r3, [pc, #272]	@ (80059bc <FndDispalyParameter+0x28c>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	4619      	mov	r1, r3
 80058ae:	2002      	movs	r0, #2
 80058b0:	f000 f8fc 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[9]);
 80058b4:	4b41      	ldr	r3, [pc, #260]	@ (80059bc <FndDispalyParameter+0x28c>)
 80058b6:	7a5b      	ldrb	r3, [r3, #9]
 80058b8:	4619      	mov	r1, r3
 80058ba:	2004      	movs	r0, #4
 80058bc:	f000 f8f6 	bl	8005aac <FndOutput>
			break;
 80058c0:	e077      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 10: //Multi Tension
			FndOutput(FND1_CLK ,0x8C);
 80058c2:	218c      	movs	r1, #140	@ 0x8c
 80058c4:	2001      	movs	r0, #1
 80058c6:	f000 f8f1 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[1]);
 80058ca:	4b3c      	ldr	r3, [pc, #240]	@ (80059bc <FndDispalyParameter+0x28c>)
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	4619      	mov	r1, r3
 80058d0:	2002      	movs	r0, #2
 80058d2:	f000 f8eb 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[0]);
 80058d6:	4b39      	ldr	r3, [pc, #228]	@ (80059bc <FndDispalyParameter+0x28c>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	4619      	mov	r1, r3
 80058dc:	2004      	movs	r0, #4
 80058de:	f000 f8e5 	bl	8005aac <FndOutput>
			break;
 80058e2:	e066      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 11: //Load Cell
			FndOutput(FND1_CLK ,0x8C);
 80058e4:	218c      	movs	r1, #140	@ 0x8c
 80058e6:	2001      	movs	r0, #1
 80058e8:	f000 f8e0 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[1]);
 80058ec:	4b33      	ldr	r3, [pc, #204]	@ (80059bc <FndDispalyParameter+0x28c>)
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	4619      	mov	r1, r3
 80058f2:	2002      	movs	r0, #2
 80058f4:	f000 f8da 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[1]);
 80058f8:	4b30      	ldr	r3, [pc, #192]	@ (80059bc <FndDispalyParameter+0x28c>)
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	4619      	mov	r1, r3
 80058fe:	2004      	movs	r0, #4
 8005900:	f000 f8d4 	bl	8005aac <FndOutput>
			break;
 8005904:	e055      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 12: //Gain
			FndOutput(FND1_CLK ,0x8C);
 8005906:	218c      	movs	r1, #140	@ 0x8c
 8005908:	2001      	movs	r0, #1
 800590a:	f000 f8cf 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[1]);
 800590e:	4b2b      	ldr	r3, [pc, #172]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	4619      	mov	r1, r3
 8005914:	2002      	movs	r0, #2
 8005916:	f000 f8c9 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[2]);
 800591a:	4b28      	ldr	r3, [pc, #160]	@ (80059bc <FndDispalyParameter+0x28c>)
 800591c:	789b      	ldrb	r3, [r3, #2]
 800591e:	4619      	mov	r1, r3
 8005920:	2004      	movs	r0, #4
 8005922:	f000 f8c3 	bl	8005aac <FndOutput>
			break;
 8005926:	e044      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 13:
			FndOutput(FND1_CLK ,0x8C);
 8005928:	218c      	movs	r1, #140	@ 0x8c
 800592a:	2001      	movs	r0, #1
 800592c:	f000 f8be 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[1]);
 8005930:	4b22      	ldr	r3, [pc, #136]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	4619      	mov	r1, r3
 8005936:	2002      	movs	r0, #2
 8005938:	f000 f8b8 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[3]);
 800593c:	4b1f      	ldr	r3, [pc, #124]	@ (80059bc <FndDispalyParameter+0x28c>)
 800593e:	78db      	ldrb	r3, [r3, #3]
 8005940:	4619      	mov	r1, r3
 8005942:	2004      	movs	r0, #4
 8005944:	f000 f8b2 	bl	8005aac <FndOutput>
			break;
 8005948:	e033      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 14:
			FndOutput(FND1_CLK ,0x8C);
 800594a:	218c      	movs	r1, #140	@ 0x8c
 800594c:	2001      	movs	r0, #1
 800594e:	f000 f8ad 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[1]);
 8005952:	4b1a      	ldr	r3, [pc, #104]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	4619      	mov	r1, r3
 8005958:	2002      	movs	r0, #2
 800595a:	f000 f8a7 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[4]);
 800595e:	4b17      	ldr	r3, [pc, #92]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005960:	791b      	ldrb	r3, [r3, #4]
 8005962:	4619      	mov	r1, r3
 8005964:	2004      	movs	r0, #4
 8005966:	f000 f8a1 	bl	8005aac <FndOutput>
			break;
 800596a:	e022      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 15:
			FndOutput(FND1_CLK ,0x8C);
 800596c:	218c      	movs	r1, #140	@ 0x8c
 800596e:	2001      	movs	r0, #1
 8005970:	f000 f89c 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[1]);
 8005974:	4b11      	ldr	r3, [pc, #68]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	4619      	mov	r1, r3
 800597a:	2002      	movs	r0, #2
 800597c:	f000 f896 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[5]);
 8005980:	4b0e      	ldr	r3, [pc, #56]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005982:	795b      	ldrb	r3, [r3, #5]
 8005984:	4619      	mov	r1, r3
 8005986:	2004      	movs	r0, #4
 8005988:	f000 f890 	bl	8005aac <FndOutput>
			break;
 800598c:	e011      	b.n	80059b2 <FndDispalyParameter+0x282>
		case 16:
			FndOutput(FND1_CLK ,0x8C);
 800598e:	218c      	movs	r1, #140	@ 0x8c
 8005990:	2001      	movs	r0, #1
 8005992:	f000 f88b 	bl	8005aac <FndOutput>
			FndOutput(FND2_CLK ,FndTable[1]);
 8005996:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <FndDispalyParameter+0x28c>)
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	4619      	mov	r1, r3
 800599c:	2002      	movs	r0, #2
 800599e:	f000 f885 	bl	8005aac <FndOutput>
			FndOutput(FND3_CLK ,FndTable[6]);
 80059a2:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <FndDispalyParameter+0x28c>)
 80059a4:	799b      	ldrb	r3, [r3, #6]
 80059a6:	4619      	mov	r1, r3
 80059a8:	2004      	movs	r0, #4
 80059aa:	f000 f87f 	bl	8005aac <FndOutput>
			break;
 80059ae:	e000      	b.n	80059b2 <FndDispalyParameter+0x282>
		default:
			break;
 80059b0:	bf00      	nop
	}

}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	2000001c 	.word	0x2000001c

080059c0 <FndIncrementBar>:

void FndIncrementBar(uint8_t fndPos){
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
	if(fndPos == 1){
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10a      	bne.n	80059e6 <FndIncrementBar+0x26>
		FndOutput(FND3_CLK ,FndTable[BAR] & FndTable[DOT]);
 80059d0:	4b14      	ldr	r3, [pc, #80]	@ (8005a24 <FndIncrementBar+0x64>)
 80059d2:	7ada      	ldrb	r2, [r3, #11]
 80059d4:	4b13      	ldr	r3, [pc, #76]	@ (8005a24 <FndIncrementBar+0x64>)
 80059d6:	7a9b      	ldrb	r3, [r3, #10]
 80059d8:	4013      	ands	r3, r2
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	4619      	mov	r1, r3
 80059de:	2004      	movs	r0, #4
 80059e0:	f000 f864 	bl	8005aac <FndOutput>
	}else if(fndPos == 2){
		FndOutput(FND2_CLK ,FndTable[BAR] & FndTable[DOT]);
	}else if(fndPos == 3){
		FndOutput(FND1_CLK ,FndTable[BAR] & FndTable[DOT]);
	}
}
 80059e4:	e01a      	b.n	8005a1c <FndIncrementBar+0x5c>
	}else if(fndPos == 2){
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d10a      	bne.n	8005a02 <FndIncrementBar+0x42>
		FndOutput(FND2_CLK ,FndTable[BAR] & FndTable[DOT]);
 80059ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005a24 <FndIncrementBar+0x64>)
 80059ee:	7ada      	ldrb	r2, [r3, #11]
 80059f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a24 <FndIncrementBar+0x64>)
 80059f2:	7a9b      	ldrb	r3, [r3, #10]
 80059f4:	4013      	ands	r3, r2
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	4619      	mov	r1, r3
 80059fa:	2002      	movs	r0, #2
 80059fc:	f000 f856 	bl	8005aac <FndOutput>
}
 8005a00:	e00c      	b.n	8005a1c <FndIncrementBar+0x5c>
	}else if(fndPos == 3){
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d109      	bne.n	8005a1c <FndIncrementBar+0x5c>
		FndOutput(FND1_CLK ,FndTable[BAR] & FndTable[DOT]);
 8005a08:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <FndIncrementBar+0x64>)
 8005a0a:	7ada      	ldrb	r2, [r3, #11]
 8005a0c:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <FndIncrementBar+0x64>)
 8005a0e:	7a9b      	ldrb	r3, [r3, #10]
 8005a10:	4013      	ands	r3, r2
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	4619      	mov	r1, r3
 8005a16:	2001      	movs	r0, #1
 8005a18:	f000 f848 	bl	8005aac <FndOutput>
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	2000001c 	.word	0x2000001c

08005a28 <FndShadowOutput>:
  * @brief FndOutput
  * @param uint8_t fnd_pos ,uint8_t fnd_vlaue
  * @retval	 None
  */
void FndShadowOutput(uint8_t fndPos ,uint8_t fndVlaue)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	460a      	mov	r2, r1
 8005a32:	71fb      	strb	r3, [r7, #7]
 8005a34:	4613      	mov	r3, r2
 8005a36:	71bb      	strb	r3, [r7, #6]
	if(fndPos == FND1_CLK) ShadowFnd1=fndVlaue;
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d103      	bne.n	8005a46 <FndShadowOutput+0x1e>
 8005a3e:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <FndShadowOutput+0x6c>)
 8005a40:	79bb      	ldrb	r3, [r7, #6]
 8005a42:	7013      	strb	r3, [r2, #0]
 8005a44:	e010      	b.n	8005a68 <FndShadowOutput+0x40>
	else if(fndPos == FND2_CLK)ShadowFnd2=fndVlaue;
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d103      	bne.n	8005a54 <FndShadowOutput+0x2c>
 8005a4c:	4a12      	ldr	r2, [pc, #72]	@ (8005a98 <FndShadowOutput+0x70>)
 8005a4e:	79bb      	ldrb	r3, [r7, #6]
 8005a50:	7013      	strb	r3, [r2, #0]
 8005a52:	e009      	b.n	8005a68 <FndShadowOutput+0x40>
	else if(fndPos == FND3_CLK) ShadowFnd3=fndVlaue;
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d103      	bne.n	8005a62 <FndShadowOutput+0x3a>
 8005a5a:	4a10      	ldr	r2, [pc, #64]	@ (8005a9c <FndShadowOutput+0x74>)
 8005a5c:	79bb      	ldrb	r3, [r7, #6]
 8005a5e:	7013      	strb	r3, [r2, #0]
 8005a60:	e002      	b.n	8005a68 <FndShadowOutput+0x40>
	else ShadowLed =fndVlaue;
 8005a62:	4a0f      	ldr	r2, [pc, #60]	@ (8005aa0 <FndShadowOutput+0x78>)
 8005a64:	79bb      	ldrb	r3, [r7, #6]
 8005a66:	7013      	strb	r3, [r2, #0]
	Delay_ms(2);
 8005a68:	2002      	movs	r0, #2
 8005a6a:	f7ff fa73 	bl	8004f54 <Delay_ms>
	GPIOD->ODR  = (uint32_t)fndVlaue;  	//Fnd Display Value
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa4 <FndShadowOutput+0x7c>)
 8005a70:	79bb      	ldrb	r3, [r7, #6]
 8005a72:	60d3      	str	r3, [r2, #12]
	Delay_ms(2);
 8005a74:	2002      	movs	r0, #2
 8005a76:	f7ff fa6d 	bl	8004f54 <Delay_ms>
	GPIOE->BSRR = (uint32_t)fndPos;		//Fnd Contrl Signal
 8005a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa8 <FndShadowOutput+0x80>)
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	6113      	str	r3, [r2, #16]
	Delay_ms(2);
 8005a80:	2002      	movs	r0, #2
 8005a82:	f7ff fa67 	bl	8004f54 <Delay_ms>
	GPIOE->BRR = (uint32_t)fndPos;
 8005a86:	4a08      	ldr	r2, [pc, #32]	@ (8005aa8 <FndShadowOutput+0x80>)
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	6153      	str	r3, [r2, #20]
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	200005fa 	.word	0x200005fa
 8005a98:	200005fb 	.word	0x200005fb
 8005a9c:	200005fc 	.word	0x200005fc
 8005aa0:	200005fd 	.word	0x200005fd
 8005aa4:	40011400 	.word	0x40011400
 8005aa8:	40011800 	.word	0x40011800

08005aac <FndOutput>:

void FndOutput(uint8_t fndPos ,uint8_t fndVlaue)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460a      	mov	r2, r1
 8005ab6:	71fb      	strb	r3, [r7, #7]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	71bb      	strb	r3, [r7, #6]
	GPIOD->ODR  = (uint32_t)fndVlaue;  	//Fnd Display Value
 8005abc:	4a09      	ldr	r2, [pc, #36]	@ (8005ae4 <FndOutput+0x38>)
 8005abe:	79bb      	ldrb	r3, [r7, #6]
 8005ac0:	60d3      	str	r3, [r2, #12]
	Delay_ms(2);
 8005ac2:	2002      	movs	r0, #2
 8005ac4:	f7ff fa46 	bl	8004f54 <Delay_ms>
	GPIOE->BSRR = (uint32_t)fndPos;		//Fnd Contrl Signal
 8005ac8:	4a07      	ldr	r2, [pc, #28]	@ (8005ae8 <FndOutput+0x3c>)
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	6113      	str	r3, [r2, #16]
	Delay_ms(2);
 8005ace:	2002      	movs	r0, #2
 8005ad0:	f7ff fa40 	bl	8004f54 <Delay_ms>
	GPIOE->BRR = (uint32_t)fndPos;
 8005ad4:	4a04      	ldr	r2, [pc, #16]	@ (8005ae8 <FndOutput+0x3c>)
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	6153      	str	r3, [r2, #20]
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40011400 	.word	0x40011400
 8005ae8:	40011800 	.word	0x40011800

08005aec <FndAllOff>:

void FndAllOff(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
	FndOutput(FND1_CLK ,0xFF);
 8005af0:	21ff      	movs	r1, #255	@ 0xff
 8005af2:	2001      	movs	r0, #1
 8005af4:	f7ff ffda 	bl	8005aac <FndOutput>
	FndOutput(FND2_CLK ,0xFF);
 8005af8:	21ff      	movs	r1, #255	@ 0xff
 8005afa:	2002      	movs	r0, #2
 8005afc:	f7ff ffd6 	bl	8005aac <FndOutput>
	FndOutput(FND3_CLK ,0xFF);
 8005b00:	21ff      	movs	r1, #255	@ 0xff
 8005b02:	2004      	movs	r0, #4
 8005b04:	f7ff ffd2 	bl	8005aac <FndOutput>
	ShadowFnd1=0xFF;
 8005b08:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <FndAllOff+0x38>)
 8005b0a:	22ff      	movs	r2, #255	@ 0xff
 8005b0c:	701a      	strb	r2, [r3, #0]
	ShadowFnd2=0xFF;
 8005b0e:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <FndAllOff+0x3c>)
 8005b10:	22ff      	movs	r2, #255	@ 0xff
 8005b12:	701a      	strb	r2, [r3, #0]
	ShadowFnd3=0xFF;
 8005b14:	4b05      	ldr	r3, [pc, #20]	@ (8005b2c <FndAllOff+0x40>)
 8005b16:	22ff      	movs	r2, #255	@ 0xff
 8005b18:	701a      	strb	r2, [r3, #0]
	FndDisplayShadow();
 8005b1a:	f000 f809 	bl	8005b30 <FndDisplayShadow>
}
 8005b1e:	bf00      	nop
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	200005fa 	.word	0x200005fa
 8005b28:	200005fb 	.word	0x200005fb
 8005b2c:	200005fc 	.word	0x200005fc

08005b30 <FndDisplayShadow>:
	ShadowFnd3=0x00;
	FndDisplayShadow();
}

void FndDisplayShadow(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
	FndShadowOutput(FND1_CLK ,ShadowFnd1);
 8005b34:	4b0e      	ldr	r3, [pc, #56]	@ (8005b70 <FndDisplayShadow+0x40>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	f7ff ff73 	bl	8005a28 <FndShadowOutput>
	FndShadowOutput(FND2_CLK ,ShadowFnd2);
 8005b42:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <FndDisplayShadow+0x44>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	4619      	mov	r1, r3
 8005b4a:	2002      	movs	r0, #2
 8005b4c:	f7ff ff6c 	bl	8005a28 <FndShadowOutput>
	FndShadowOutput(FND3_CLK ,ShadowFnd3);
 8005b50:	4b09      	ldr	r3, [pc, #36]	@ (8005b78 <FndDisplayShadow+0x48>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	4619      	mov	r1, r3
 8005b58:	2004      	movs	r0, #4
 8005b5a:	f7ff ff65 	bl	8005a28 <FndShadowOutput>
	FndShadowOutput(LED_CLK ,ShadowLed);
 8005b5e:	4b07      	ldr	r3, [pc, #28]	@ (8005b7c <FndDisplayShadow+0x4c>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	4619      	mov	r1, r3
 8005b66:	2008      	movs	r0, #8
 8005b68:	f7ff ff5e 	bl	8005a28 <FndShadowOutput>
}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200005fa 	.word	0x200005fa
 8005b74:	200005fb 	.word	0x200005fb
 8005b78:	200005fc 	.word	0x200005fc
 8005b7c:	200005fd 	.word	0x200005fd

08005b80 <FndFlicker>:
  * @brief FndFlicker
  * @param uint8_t onOff
  * @retval	 None
  */
void FndFlicker(uint8_t onOff)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	71fb      	strb	r3, [r7, #7]
static uint8_t status=OFF;

	if(onOff == ON){
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d10f      	bne.n	8005bb0 <FndFlicker+0x30>
		if(status==ON){
 8005b90:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <FndFlicker+0x44>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d105      	bne.n	8005ba4 <FndFlicker+0x24>
			FndDisplayShadow();
 8005b98:	f7ff ffca 	bl	8005b30 <FndDisplayShadow>
			status=OFF;
 8005b9c:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <FndFlicker+0x44>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
		}
	}else{
		status=ON;
		FndDisplayShadow();
	}
}
 8005ba2:	e00a      	b.n	8005bba <FndFlicker+0x3a>
			FndAllOff();
 8005ba4:	f7ff ffa2 	bl	8005aec <FndAllOff>
			status=ON;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <FndFlicker+0x44>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
}
 8005bae:	e004      	b.n	8005bba <FndFlicker+0x3a>
		status=ON;
 8005bb0:	4b04      	ldr	r3, [pc, #16]	@ (8005bc4 <FndFlicker+0x44>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	701a      	strb	r2, [r3, #0]
		FndDisplayShadow();
 8005bb6:	f7ff ffbb 	bl	8005b30 <FndDisplayShadow>
}
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	200005fe 	.word	0x200005fe

08005bc8 <PannelLEdFlicker>:


void PannelLEdFlicker(uint8_t ledPos,uint8_t onOff)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	460a      	mov	r2, r1
 8005bd2:	71fb      	strb	r3, [r7, #7]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	71bb      	strb	r3, [r7, #6]
static uint16_t DownDelayCount=0,UpDelayCount=0,RunningDelayCount=0;
static uint8_t inverse1=OFF,inverse2=OFF,inverse3=OFF;

if(ledPos==DOWN)
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d127      	bne.n	8005c2e <PannelLEdFlicker+0x66>
{
	if (onOff == ON){
 8005bde:	79bb      	ldrb	r3, [r7, #6]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d121      	bne.n	8005c28 <PannelLEdFlicker+0x60>
		if(DownDelayCount >10){
 8005be4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ce4 <PannelLEdFlicker+0x11c>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	2b0a      	cmp	r3, #10
 8005bea:	d916      	bls.n	8005c1a <PannelLEdFlicker+0x52>
			if(inverse1 == ON){
 8005bec:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce8 <PannelLEdFlicker+0x120>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d107      	bne.n	8005c04 <PannelLEdFlicker+0x3c>
				PannelLed(DOWN,OFF);  //low
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f000 f880 	bl	8005cfc <PannelLed>
				inverse1=OFF;
 8005bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8005ce8 <PannelLEdFlicker+0x120>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e006      	b.n	8005c12 <PannelLEdFlicker+0x4a>
			}else{
				PannelLed(DOWN,ON);
 8005c04:	2101      	movs	r1, #1
 8005c06:	2000      	movs	r0, #0
 8005c08:	f000 f878 	bl	8005cfc <PannelLed>
				inverse1=ON;
 8005c0c:	4b36      	ldr	r3, [pc, #216]	@ (8005ce8 <PannelLEdFlicker+0x120>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
			}
			DownDelayCount=0;
 8005c12:	4b34      	ldr	r3, [pc, #208]	@ (8005ce4 <PannelLEdFlicker+0x11c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e009      	b.n	8005c2e <PannelLEdFlicker+0x66>
		}else{
			DownDelayCount++;
 8005c1a:	4b32      	ldr	r3, [pc, #200]	@ (8005ce4 <PannelLEdFlicker+0x11c>)
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	4b30      	ldr	r3, [pc, #192]	@ (8005ce4 <PannelLEdFlicker+0x11c>)
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	e002      	b.n	8005c2e <PannelLEdFlicker+0x66>
		}
	}else{
		DownDelayCount=0;
 8005c28:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce4 <PannelLEdFlicker+0x11c>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	801a      	strh	r2, [r3, #0]
	}
}

if(ledPos==UP)
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d127      	bne.n	8005c84 <PannelLEdFlicker+0xbc>
{
	if (onOff == ON){
 8005c34:	79bb      	ldrb	r3, [r7, #6]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d121      	bne.n	8005c7e <PannelLEdFlicker+0xb6>
		if(UpDelayCount >10){
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <PannelLEdFlicker+0x124>)
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	2b0a      	cmp	r3, #10
 8005c40:	d916      	bls.n	8005c70 <PannelLEdFlicker+0xa8>
			if(inverse2 == ON){
 8005c42:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf0 <PannelLEdFlicker+0x128>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d107      	bne.n	8005c5a <PannelLEdFlicker+0x92>
				PannelLed(UP,OFF);  //low
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f000 f855 	bl	8005cfc <PannelLed>
				inverse2=OFF;
 8005c52:	4b27      	ldr	r3, [pc, #156]	@ (8005cf0 <PannelLEdFlicker+0x128>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e006      	b.n	8005c68 <PannelLEdFlicker+0xa0>
			}else{
				PannelLed(UP,ON);
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	f000 f84d 	bl	8005cfc <PannelLed>
				inverse2=ON;
 8005c62:	4b23      	ldr	r3, [pc, #140]	@ (8005cf0 <PannelLEdFlicker+0x128>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	701a      	strb	r2, [r3, #0]
			}
			UpDelayCount=0;
 8005c68:	4b20      	ldr	r3, [pc, #128]	@ (8005cec <PannelLEdFlicker+0x124>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	e009      	b.n	8005c84 <PannelLEdFlicker+0xbc>
		}else{
			UpDelayCount++;
 8005c70:	4b1e      	ldr	r3, [pc, #120]	@ (8005cec <PannelLEdFlicker+0x124>)
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	3301      	adds	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	4b1c      	ldr	r3, [pc, #112]	@ (8005cec <PannelLEdFlicker+0x124>)
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	e002      	b.n	8005c84 <PannelLEdFlicker+0xbc>
		}
	}else{
		UpDelayCount=0;
 8005c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cec <PannelLEdFlicker+0x124>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	801a      	strh	r2, [r3, #0]
	}
}

if(ledPos==RUNNING)
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d127      	bne.n	8005cda <PannelLEdFlicker+0x112>
{
	if (onOff == ON){
 8005c8a:	79bb      	ldrb	r3, [r7, #6]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d121      	bne.n	8005cd4 <PannelLEdFlicker+0x10c>
		if(RunningDelayCount >10){
 8005c90:	4b18      	ldr	r3, [pc, #96]	@ (8005cf4 <PannelLEdFlicker+0x12c>)
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	2b0a      	cmp	r3, #10
 8005c96:	d916      	bls.n	8005cc6 <PannelLEdFlicker+0xfe>
			if(inverse3 == ON){
 8005c98:	4b17      	ldr	r3, [pc, #92]	@ (8005cf8 <PannelLEdFlicker+0x130>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d107      	bne.n	8005cb0 <PannelLEdFlicker+0xe8>
				PannelLed(RUNNING,OFF);  //low
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	2002      	movs	r0, #2
 8005ca4:	f000 f82a 	bl	8005cfc <PannelLed>
				inverse3=OFF;
 8005ca8:	4b13      	ldr	r3, [pc, #76]	@ (8005cf8 <PannelLEdFlicker+0x130>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e006      	b.n	8005cbe <PannelLEdFlicker+0xf6>
			}else{
				PannelLed(RUNNING,ON);
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	2002      	movs	r0, #2
 8005cb4:	f000 f822 	bl	8005cfc <PannelLed>
				inverse3=ON;
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf8 <PannelLEdFlicker+0x130>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
			}
			RunningDelayCount=0;
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <PannelLEdFlicker+0x12c>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	801a      	strh	r2, [r3, #0]
		RunningDelayCount=0;
	}
}


}
 8005cc4:	e009      	b.n	8005cda <PannelLEdFlicker+0x112>
			RunningDelayCount++;
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <PannelLEdFlicker+0x12c>)
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <PannelLEdFlicker+0x12c>)
 8005cd0:	801a      	strh	r2, [r3, #0]
}
 8005cd2:	e002      	b.n	8005cda <PannelLEdFlicker+0x112>
		RunningDelayCount=0;
 8005cd4:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <PannelLEdFlicker+0x12c>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	801a      	strh	r2, [r3, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000600 	.word	0x20000600
 8005ce8:	20000602 	.word	0x20000602
 8005cec:	20000604 	.word	0x20000604
 8005cf0:	20000606 	.word	0x20000606
 8005cf4:	20000608 	.word	0x20000608
 8005cf8:	2000060a 	.word	0x2000060a

08005cfc <PannelLed>:
  * @brief PannelLed
  * @param uint8_t ledPos,uint8_t onOff
  * @retval	 None
  */
void PannelLed(uint8_t ledPos,uint8_t onOff)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	460a      	mov	r2, r1
 8005d06:	71fb      	strb	r3, [r7, #7]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	71bb      	strb	r3, [r7, #6]
	if(onOff==ON){
 8005d0c:	79bb      	ldrb	r3, [r7, #6]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d110      	bne.n	8005d34 <PannelLed+0x38>
		ShadowLed = ShadowLed & ~(1<<ledPos);
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	2201      	movs	r2, #1
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	b25b      	sxtb	r3, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	b25a      	sxtb	r2, r3
 8005d20:	4b0e      	ldr	r3, [pc, #56]	@ (8005d5c <PannelLed+0x60>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	b25b      	sxtb	r3, r3
 8005d28:	4013      	ands	r3, r2
 8005d2a:	b25b      	sxtb	r3, r3
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <PannelLed+0x60>)
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e00d      	b.n	8005d50 <PannelLed+0x54>
	}else{
		ShadowLed = ShadowLed | (1<<ledPos);
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	2201      	movs	r2, #1
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	b25a      	sxtb	r2, r3
 8005d3e:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <PannelLed+0x60>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	4313      	orrs	r3, r2
 8005d48:	b25b      	sxtb	r3, r3
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	4b03      	ldr	r3, [pc, #12]	@ (8005d5c <PannelLed+0x60>)
 8005d4e:	701a      	strb	r2, [r3, #0]
	}
	FndDisplayShadow();
 8005d50:	f7ff feee 	bl	8005b30 <FndDisplayShadow>
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200005fd 	.word	0x200005fd

08005d60 <GetButtonStatus>:
  * @param Nothing
  * @retval	 uint8_t
  */

uint8_t GetButtonStatus(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
volatile uint8_t keyValue=0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	71fb      	strb	r3, [r7, #7]
	keyValue=(uint8_t)GPIOC->IDR;
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d94 <GetButtonStatus+0x34>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	71fb      	strb	r3, [r7, #7]
	return keyValue= ~(keyValue >> 2) & 0X07;
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	71fa      	strb	r2, [r7, #7]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40011000 	.word	0x40011000

08005d98 <GetInput>:

GPIO_PinState GetInput(uint16_t input)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	80fb      	strh	r3, [r7, #6]
	return HAL_GPIO_ReadPin(GPIOB,input);
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	4619      	mov	r1, r3
 8005da6:	4804      	ldr	r0, [pc, #16]	@ (8005db8 <GetInput+0x20>)
 8005da8:	f001 fd34 	bl	8007814 <HAL_GPIO_ReadPin>
 8005dac:	4603      	mov	r3, r0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40010c00 	.word	0x40010c00

08005dbc <SetOutput>:


void SetOutput(uint16_t output,uint8_t status)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	460a      	mov	r2, r1
 8005dc6:	80fb      	strh	r3, [r7, #6]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	717b      	strb	r3, [r7, #5]
	if(status==ON){
 8005dcc:	797b      	ldrb	r3, [r7, #5]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d106      	bne.n	8005de0 <SetOutput+0x24>
		HAL_GPIO_WritePin(GPIOE,output,GPIO_PIN_SET);
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4806      	ldr	r0, [pc, #24]	@ (8005df4 <SetOutput+0x38>)
 8005dda:	f001 fd32 	bl	8007842 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE,output,GPIO_PIN_RESET);
	}
}
 8005dde:	e005      	b.n	8005dec <SetOutput+0x30>
		HAL_GPIO_WritePin(GPIOE,output,GPIO_PIN_RESET);
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	2200      	movs	r2, #0
 8005de4:	4619      	mov	r1, r3
 8005de6:	4803      	ldr	r0, [pc, #12]	@ (8005df4 <SetOutput+0x38>)
 8005de8:	f001 fd2b 	bl	8007842 <HAL_GPIO_WritePin>
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40011800 	.word	0x40011800

08005df8 <CheckWireAlram>:

 return output;
}


void CheckWireAlram(uint8_t op){
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	71fb      	strb	r3, [r7, #7]
	if(op ==ON){
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d106      	bne.n	8005e16 <CheckWireAlram+0x1e>
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin,GPIO_PIN_SET);
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e0e:	4807      	ldr	r0, [pc, #28]	@ (8005e2c <CheckWireAlram+0x34>)
 8005e10:	f001 fd17 	bl	8007842 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin,GPIO_PIN_RESET);
	}
}
 8005e14:	e005      	b.n	8005e22 <CheckWireAlram+0x2a>
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin,GPIO_PIN_RESET);
 8005e16:	2200      	movs	r2, #0
 8005e18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e1c:	4803      	ldr	r0, [pc, #12]	@ (8005e2c <CheckWireAlram+0x34>)
 8005e1e:	f001 fd10 	bl	8007842 <HAL_GPIO_WritePin>
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40011800 	.word	0x40011800

08005e30 <at24_HAL_WriteBytes>:
  * @param	pData	     : Pointer to data buffer
  * @param  TxBufferSize : Amount of data you wanna Write
  * @retval
  */
int at24_HAL_WriteBytes(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress, uint8_t *pData,uint16_t TxBufferSize)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af04      	add	r7, sp, #16
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	813b      	strh	r3, [r7, #8]
	 * give MemAddress for the location you want to write to
	 * give Data buffer so it can write Data on this location
	 */
	//Note that this function works properly to 31 bytes

	while( (TxBufferSize-16)>0 )
 8005e42:	e019      	b.n	8005e78 <at24_HAL_WriteBytes+0x48>
	{
		//if your data is more than 16 bytes,you are here
		 while(HAL_I2C_Mem_Write(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,MemAddressSize,pData,(uint16_t)16,TIME_OUT)!= HAL_OK);//I2C_MEMADD_SIZE_8BIT
 8005e44:	bf00      	nop
 8005e46:	893a      	ldrh	r2, [r7, #8]
 8005e48:	8979      	ldrh	r1, [r7, #10]
 8005e4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005e4e:	9302      	str	r3, [sp, #8]
 8005e50:	2310      	movs	r3, #16
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	2310      	movs	r3, #16
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f001 fe66 	bl	8007b2c <HAL_I2C_Mem_Write>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1ef      	bne.n	8005e46 <at24_HAL_WriteBytes+0x16>
		 TxBufferSize-=16;
 8005e66:	8b3b      	ldrh	r3, [r7, #24]
 8005e68:	3b10      	subs	r3, #16
 8005e6a:	833b      	strh	r3, [r7, #24]
		 pData+=16;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3310      	adds	r3, #16
 8005e70:	607b      	str	r3, [r7, #4]
		 MemAddress+=16;
 8005e72:	893b      	ldrh	r3, [r7, #8]
 8005e74:	3310      	adds	r3, #16
 8005e76:	813b      	strh	r3, [r7, #8]
	while( (TxBufferSize-16)>0 )
 8005e78:	8b3b      	ldrh	r3, [r7, #24]
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d8e2      	bhi.n	8005e44 <at24_HAL_WriteBytes+0x14>
	}
	//remaining data
	while(HAL_I2C_Mem_Write(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,MemAddressSize,pData,(uint16_t)TxBufferSize,TIME_OUT)!= HAL_OK);
 8005e7e:	bf00      	nop
 8005e80:	893a      	ldrh	r2, [r7, #8]
 8005e82:	8979      	ldrh	r1, [r7, #10]
 8005e84:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005e88:	9302      	str	r3, [sp, #8]
 8005e8a:	8b3b      	ldrh	r3, [r7, #24]
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	2310      	movs	r3, #16
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f001 fe49 	bl	8007b2c <HAL_I2C_Mem_Write>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1ef      	bne.n	8005e80 <at24_HAL_WriteBytes+0x50>

	return 1;
 8005ea0:	2301      	movs	r3, #1
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <at24_HAL_ReadBytes>:


int at24_HAL_ReadBytes(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress, uint8_t *pData,uint16_t RxBufferSize)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b08a      	sub	sp, #40	@ 0x28
 8005eae:	af04      	add	r7, sp, #16
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	817b      	strh	r3, [r7, #10]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	813b      	strh	r3, [r7, #8]
	 * get the MemAddress for the location you want to write data on it
	 * get the Data buffer so it can write Data on this location
	 */
	//Note that this function works properly to 31bytes

	while( (RxBufferSize-16)>0 )
 8005ebc:	e022      	b.n	8005f04 <at24_HAL_ReadBytes+0x5a>
	{
		//if your data is more than 16 bytes,you are here
		errCnt = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
		while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,MemAddressSize,pData,(uint16_t)16,TIME_OUT)!= HAL_OK && errCnt < ERR_CNT){
 8005ec2:	e002      	b.n	8005eca <at24_HAL_ReadBytes+0x20>
			errCnt++;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
		while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,MemAddressSize,pData,(uint16_t)16,TIME_OUT)!= HAL_OK && errCnt < ERR_CNT){
 8005eca:	893a      	ldrh	r2, [r7, #8]
 8005ecc:	8979      	ldrh	r1, [r7, #10]
 8005ece:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005ed2:	9302      	str	r3, [sp, #8]
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	2310      	movs	r3, #16
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f001 ff1e 	bl	8007d20 <HAL_I2C_Mem_Read>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <at24_HAL_ReadBytes+0x48>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ef0:	dbe8      	blt.n	8005ec4 <at24_HAL_ReadBytes+0x1a>
		}
		RxBufferSize-=16;
 8005ef2:	8c3b      	ldrh	r3, [r7, #32]
 8005ef4:	3b10      	subs	r3, #16
 8005ef6:	843b      	strh	r3, [r7, #32]
		pData+=16;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3310      	adds	r3, #16
 8005efc:	607b      	str	r3, [r7, #4]
		MemAddress+=16;
 8005efe:	893b      	ldrh	r3, [r7, #8]
 8005f00:	3310      	adds	r3, #16
 8005f02:	813b      	strh	r3, [r7, #8]
	while( (RxBufferSize-16)>0 )
 8005f04:	8c3b      	ldrh	r3, [r7, #32]
 8005f06:	2b10      	cmp	r3, #16
 8005f08:	d8d9      	bhi.n	8005ebe <at24_HAL_ReadBytes+0x14>
	}
	//remaining data
	errCnt = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
	while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,MemAddressSize,pData,(uint16_t)RxBufferSize,TIME_OUT)!= HAL_OK && errCnt < ERR_CNT){
 8005f0e:	e002      	b.n	8005f16 <at24_HAL_ReadBytes+0x6c>
		errCnt++;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	3301      	adds	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
	while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,MemAddressSize,pData,(uint16_t)RxBufferSize,TIME_OUT)!= HAL_OK && errCnt < ERR_CNT){
 8005f16:	893a      	ldrh	r2, [r7, #8]
 8005f18:	8979      	ldrh	r1, [r7, #10]
 8005f1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005f1e:	9302      	str	r3, [sp, #8]
 8005f20:	8c3b      	ldrh	r3, [r7, #32]
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2310      	movs	r3, #16
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f001 fef8 	bl	8007d20 <HAL_I2C_Mem_Read>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <at24_HAL_ReadBytes+0x94>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f3c:	dbe8      	blt.n	8005f10 <at24_HAL_ReadBytes+0x66>
	}

	return 1;
 8005f3e:	2301      	movs	r3, #1
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <at24_HAL_WriteWords>:
	return 1;
}

/*word Write */
int at24_HAL_WriteWords(I2C_HandleTypeDef *hi2c,uint16_t *pidata ,uint16_t MemAddress,uint8_t length)
{
 8005f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f4c:	b08b      	sub	sp, #44	@ 0x2c
 8005f4e:	af02      	add	r7, sp, #8
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	4611      	mov	r1, r2
 8005f56:	461a      	mov	r2, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	80fb      	strh	r3, [r7, #6]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	717b      	strb	r3, [r7, #5]
 8005f60:	466b      	mov	r3, sp
 8005f62:	461e      	mov	r6, r3
	uint8_t pData[length*2];
 8005f64:	797b      	ldrb	r3, [r7, #5]
 8005f66:	0059      	lsls	r1, r3, #1
 8005f68:	1e4b      	subs	r3, r1, #1
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	460a      	mov	r2, r1
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4690      	mov	r8, r2
 8005f72:	4699      	mov	r9, r3
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f88:	460a      	mov	r2, r1
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	461d      	mov	r5, r3
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	00eb      	lsls	r3, r5, #3
 8005f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f9e:	00e2      	lsls	r2, r4, #3
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	3307      	adds	r3, #7
 8005fa4:	08db      	lsrs	r3, r3, #3
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	ebad 0d03 	sub.w	sp, sp, r3
 8005fac:	ab02      	add	r3, sp, #8
 8005fae:	3300      	adds	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
	uint8_t upperData,lowerData;
	uint8_t i=0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	77fb      	strb	r3, [r7, #31]
	while(i<(length*2))
 8005fb6:	e018      	b.n	8005fea <at24_HAL_WriteWords+0xa2>
	{
		upperData=(*pidata & 0xff00)>>8;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	74fb      	strb	r3, [r7, #19]
		lowerData=(*pidata & 0x00ff);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	74bb      	strb	r3, [r7, #18]
		pidata++;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	3302      	adds	r3, #2
 8005fcc:	60bb      	str	r3, [r7, #8]
		(pData[i++])= upperData;
 8005fce:	7ffb      	ldrb	r3, [r7, #31]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	77fa      	strb	r2, [r7, #31]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	7cfa      	ldrb	r2, [r7, #19]
 8005fda:	545a      	strb	r2, [r3, r1]
		(pData[i++])= lowerData;
 8005fdc:	7ffb      	ldrb	r3, [r7, #31]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	77fa      	strb	r2, [r7, #31]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	7cba      	ldrb	r2, [r7, #18]
 8005fe8:	545a      	strb	r2, [r3, r1]
	while(i<(length*2))
 8005fea:	7ffa      	ldrb	r2, [r7, #31]
 8005fec:	797b      	ldrb	r3, [r7, #5]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	dbe1      	blt.n	8005fb8 <at24_HAL_WriteWords+0x70>
	}
	at24_HAL_WriteBytes(hi2c,0xA0,MemAddress*2,pData,length*2);
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	797b      	ldrb	r3, [r7, #5]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	b29b      	uxth	r3, r3
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	21a0      	movs	r1, #160	@ 0xa0
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f7ff ff11 	bl	8005e30 <at24_HAL_WriteBytes>
	return 1;
 800600e:	2301      	movs	r3, #1
 8006010:	46b5      	mov	sp, r6
}
 8006012:	4618      	mov	r0, r3
 8006014:	3724      	adds	r7, #36	@ 0x24
 8006016:	46bd      	mov	sp, r7
 8006018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800601c <at24_HAL_ReadWords>:
  * @param	MemAddress   : Internal memory address (WHERE YOU WANNA READ)
  * @param  length       : Amount of buffer you wanna Read from
  * @retval
  */
int at24_HAL_ReadWords(I2C_HandleTypeDef *hi2c, uint16_t *psdata, uint16_t MemAddress, uint8_t length)
{
 800601c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006020:	b08b      	sub	sp, #44	@ 0x2c
 8006022:	af02      	add	r7, sp, #8
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	4611      	mov	r1, r2
 800602a:	461a      	mov	r2, r3
 800602c:	460b      	mov	r3, r1
 800602e:	80fb      	strh	r3, [r7, #6]
 8006030:	4613      	mov	r3, r2
 8006032:	717b      	strb	r3, [r7, #5]
 8006034:	466b      	mov	r3, sp
 8006036:	461e      	mov	r6, r3
	uint8_t pData[length*2];
 8006038:	797b      	ldrb	r3, [r7, #5]
 800603a:	0059      	lsls	r1, r3, #1
 800603c:	1e4b      	subs	r3, r1, #1
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	460a      	mov	r2, r1
 8006042:	2300      	movs	r3, #0
 8006044:	4690      	mov	r8, r2
 8006046:	4699      	mov	r9, r3
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006054:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006058:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800605c:	460a      	mov	r2, r1
 800605e:	2300      	movs	r3, #0
 8006060:	4614      	mov	r4, r2
 8006062:	461d      	mov	r5, r3
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	00eb      	lsls	r3, r5, #3
 800606e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006072:	00e2      	lsls	r2, r4, #3
 8006074:	460b      	mov	r3, r1
 8006076:	3307      	adds	r3, #7
 8006078:	08db      	lsrs	r3, r3, #3
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	ebad 0d03 	sub.w	sp, sp, r3
 8006080:	ab02      	add	r3, sp, #8
 8006082:	3300      	adds	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
	uint8_t upperData,lowerData;
	uint8_t i=0;
 8006086:	2300      	movs	r3, #0
 8006088:	77fb      	strb	r3, [r7, #31]
	at24_HAL_ReadBytes(hi2c,0xA0,MemAddress*2,pData,length*2);
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	797b      	ldrb	r3, [r7, #5]
 8006092:	b29b      	uxth	r3, r3
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	21a0      	movs	r1, #160	@ 0xa0
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff ff03 	bl	8005eaa <at24_HAL_ReadBytes>
	while(i<(length*2))
 80060a4:	e01a      	b.n	80060dc <at24_HAL_ReadWords+0xc0>
	{
		upperData = pData[i++];
 80060a6:	7ffb      	ldrb	r3, [r7, #31]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	77fa      	strb	r2, [r7, #31]
 80060ac:	461a      	mov	r2, r3
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	5c9b      	ldrb	r3, [r3, r2]
 80060b2:	74fb      	strb	r3, [r7, #19]
		lowerData = pData[i++];
 80060b4:	7ffb      	ldrb	r3, [r7, #31]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	77fa      	strb	r2, [r7, #31]
 80060ba:	461a      	mov	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	5c9b      	ldrb	r3, [r3, r2]
 80060c0:	74bb      	strb	r3, [r7, #18]
	 	(*psdata++)=(upperData<<8)|lowerData;
 80060c2:	7cfb      	ldrb	r3, [r7, #19]
 80060c4:	b21b      	sxth	r3, r3
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	b21a      	sxth	r2, r3
 80060ca:	7cbb      	ldrb	r3, [r7, #18]
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b219      	sxth	r1, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	60ba      	str	r2, [r7, #8]
 80060d8:	b28a      	uxth	r2, r1
 80060da:	801a      	strh	r2, [r3, #0]
	while(i<(length*2))
 80060dc:	7ffa      	ldrb	r2, [r7, #31]
 80060de:	797b      	ldrb	r3, [r7, #5]
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	429a      	cmp	r2, r3
 80060e4:	dbdf      	blt.n	80060a6 <at24_HAL_ReadWords+0x8a>
	}
	return 1;
 80060e6:	2301      	movs	r3, #1
 80060e8:	46b5      	mov	sp, r6
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3724      	adds	r7, #36	@ 0x24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080060f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060f8:	4b08      	ldr	r3, [pc, #32]	@ (800611c <HAL_Init+0x28>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a07      	ldr	r2, [pc, #28]	@ (800611c <HAL_Init+0x28>)
 80060fe:	f043 0310 	orr.w	r3, r3, #16
 8006102:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006104:	2003      	movs	r0, #3
 8006106:	f000 fcaf 	bl	8006a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800610a:	200f      	movs	r0, #15
 800610c:	f7fb fcfc 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006110:	f7fb fcc2 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40022000 	.word	0x40022000

08006120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006124:	4b05      	ldr	r3, [pc, #20]	@ (800613c <HAL_IncTick+0x1c>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <HAL_IncTick+0x20>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4413      	add	r3, r2
 8006130:	4a03      	ldr	r2, [pc, #12]	@ (8006140 <HAL_IncTick+0x20>)
 8006132:	6013      	str	r3, [r2, #0]
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	2000002c 	.word	0x2000002c
 8006140:	2000060c 	.word	0x2000060c

08006144 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return uwTick;
 8006148:	4b02      	ldr	r3, [pc, #8]	@ (8006154 <HAL_GetTick+0x10>)
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr
 8006154:	2000060c 	.word	0x2000060c

08006158 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e0ce      	b.n	8006318 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fb f8b4 	bl	8001304 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fb11 	bl	80067c4 <ADC_ConversionStop_Disable>
 80061a2:	4603      	mov	r3, r0
 80061a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f040 80a9 	bne.w	8006306 <HAL_ADC_Init+0x1ae>
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 80a5 	bne.w	8006306 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80061c4:	f023 0302 	bic.w	r3, r3, #2
 80061c8:	f043 0202 	orr.w	r2, r3, #2
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4951      	ldr	r1, [pc, #324]	@ (8006320 <HAL_ADC_Init+0x1c8>)
 80061da:	428b      	cmp	r3, r1
 80061dc:	d10a      	bne.n	80061f4 <HAL_ADC_Init+0x9c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80061e6:	d002      	beq.n	80061ee <HAL_ADC_Init+0x96>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	e004      	b.n	80061f8 <HAL_ADC_Init+0xa0>
 80061ee:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80061f2:	e001      	b.n	80061f8 <HAL_ADC_Init+0xa0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80061f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7b1b      	ldrb	r3, [r3, #12]
 80061fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006200:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006210:	d003      	beq.n	800621a <HAL_ADC_Init+0xc2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d102      	bne.n	8006220 <HAL_ADC_Init+0xc8>
 800621a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800621e:	e000      	b.n	8006222 <HAL_ADC_Init+0xca>
 8006220:	2300      	movs	r3, #0
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	7d1b      	ldrb	r3, [r3, #20]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d119      	bne.n	8006264 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	7b1b      	ldrb	r3, [r3, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d109      	bne.n	800624c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	3b01      	subs	r3, #1
 800623e:	035a      	lsls	r2, r3, #13
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	e00b      	b.n	8006264 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625c:	f043 0201 	orr.w	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	4b29      	ldr	r3, [pc, #164]	@ (8006324 <HAL_ADC_Init+0x1cc>)
 8006280:	4013      	ands	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	430b      	orrs	r3, r1
 800628a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006294:	d003      	beq.n	800629e <HAL_ADC_Init+0x146>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d104      	bne.n	80062a8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	051b      	lsls	r3, r3, #20
 80062a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	4b19      	ldr	r3, [pc, #100]	@ (8006328 <HAL_ADC_Init+0x1d0>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d10b      	bne.n	80062e4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	f043 0201 	orr.w	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80062e2:	e018      	b.n	8006316 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e8:	f023 0312 	bic.w	r3, r3, #18
 80062ec:	f043 0210 	orr.w	r2, r3, #16
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006304:	e007      	b.n	8006316 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	f043 0210 	orr.w	r2, r3, #16
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40013c00 	.word	0x40013c00
 8006324:	ffe1f7fd 	.word	0xffe1f7fd
 8006328:	ff1f0efe 	.word	0xff1f0efe

0800632c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a64      	ldr	r2, [pc, #400]	@ (80064d4 <HAL_ADC_Start_DMA+0x1a8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_ADC_Start_DMA+0x24>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a63      	ldr	r2, [pc, #396]	@ (80064d8 <HAL_ADC_Start_DMA+0x1ac>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d106      	bne.n	800635e <HAL_ADC_Start_DMA+0x32>
 8006350:	4b60      	ldr	r3, [pc, #384]	@ (80064d4 <HAL_ADC_Start_DMA+0x1a8>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 80b3 	bne.w	80064c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_ADC_Start_DMA+0x40>
 8006368:	2302      	movs	r3, #2
 800636a:	e0ae      	b.n	80064ca <HAL_ADC_Start_DMA+0x19e>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f9cb 	bl	8006710 <ADC_Enable>
 800637a:	4603      	mov	r3, r0
 800637c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800637e:	7dfb      	ldrb	r3, [r7, #23]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 809a 	bne.w	80064ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800638e:	f023 0301 	bic.w	r3, r3, #1
 8006392:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a4e      	ldr	r2, [pc, #312]	@ (80064d8 <HAL_ADC_Start_DMA+0x1ac>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d105      	bne.n	80063b0 <HAL_ADC_Start_DMA+0x84>
 80063a4:	4b4b      	ldr	r3, [pc, #300]	@ (80064d4 <HAL_ADC_Start_DMA+0x1a8>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d115      	bne.n	80063dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d026      	beq.n	8006418 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80063d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80063da:	e01d      	b.n	8006418 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a39      	ldr	r2, [pc, #228]	@ (80064d4 <HAL_ADC_Start_DMA+0x1a8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_ADC_Start_DMA+0xd0>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a38      	ldr	r2, [pc, #224]	@ (80064d8 <HAL_ADC_Start_DMA+0x1ac>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d10d      	bne.n	8006418 <HAL_ADC_Start_DMA+0xec>
 80063fc:	4b35      	ldr	r3, [pc, #212]	@ (80064d4 <HAL_ADC_Start_DMA+0x1a8>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006410:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d006      	beq.n	8006432 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006428:	f023 0206 	bic.w	r2, r3, #6
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006430:	e002      	b.n	8006438 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	4a25      	ldr	r2, [pc, #148]	@ (80064dc <HAL_ADC_Start_DMA+0x1b0>)
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	4a24      	ldr	r2, [pc, #144]	@ (80064e0 <HAL_ADC_Start_DMA+0x1b4>)
 800644e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	4a23      	ldr	r2, [pc, #140]	@ (80064e4 <HAL_ADC_Start_DMA+0x1b8>)
 8006456:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0202 	mvn.w	r2, #2
 8006460:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006470:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a18      	ldr	r0, [r3, #32]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	334c      	adds	r3, #76	@ 0x4c
 800647c:	4619      	mov	r1, r3
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f000 fd69 	bl	8006f58 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006490:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006494:	d108      	bne.n	80064a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80064a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80064a6:	e00f      	b.n	80064c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80064b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80064b8:	e006      	b.n	80064c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80064c2:	e001      	b.n	80064c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40012400 	.word	0x40012400
 80064d8:	40012800 	.word	0x40012800
 80064dc:	08006847 	.word	0x08006847
 80064e0:	080068c3 	.word	0x080068c3
 80064e4:	080068df 	.word	0x080068df

080064e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr
	...

08006520 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x20>
 800653c:	2302      	movs	r3, #2
 800653e:	e0dc      	b.n	80066fa <HAL_ADC_ConfigChannel+0x1da>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b06      	cmp	r3, #6
 800654e:	d81c      	bhi.n	800658a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	3b05      	subs	r3, #5
 8006562:	221f      	movs	r2, #31
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43db      	mvns	r3, r3
 800656a:	4019      	ands	r1, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	3b05      	subs	r3, #5
 800657c:	fa00 f203 	lsl.w	r2, r0, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	635a      	str	r2, [r3, #52]	@ 0x34
 8006588:	e03c      	b.n	8006604 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b0c      	cmp	r3, #12
 8006590:	d81c      	bhi.n	80065cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	3b23      	subs	r3, #35	@ 0x23
 80065a4:	221f      	movs	r2, #31
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	43db      	mvns	r3, r3
 80065ac:	4019      	ands	r1, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	3b23      	subs	r3, #35	@ 0x23
 80065be:	fa00 f203 	lsl.w	r2, r0, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80065ca:	e01b      	b.n	8006604 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	3b41      	subs	r3, #65	@ 0x41
 80065de:	221f      	movs	r2, #31
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	4019      	ands	r1, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	3b41      	subs	r3, #65	@ 0x41
 80065f8:	fa00 f203 	lsl.w	r2, r0, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b09      	cmp	r3, #9
 800660a:	d91c      	bls.n	8006646 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68d9      	ldr	r1, [r3, #12]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	4413      	add	r3, r2
 800661c:	3b1e      	subs	r3, #30
 800661e:	2207      	movs	r2, #7
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	4019      	ands	r1, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6898      	ldr	r0, [r3, #8]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	3b1e      	subs	r3, #30
 8006638:	fa00 f203 	lsl.w	r2, r0, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e019      	b.n	800667a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6919      	ldr	r1, [r3, #16]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4413      	add	r3, r2
 8006656:	2207      	movs	r2, #7
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	43db      	mvns	r3, r3
 800665e:	4019      	ands	r1, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	6898      	ldr	r0, [r3, #8]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4613      	mov	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4413      	add	r3, r2
 800666e:	fa00 f203 	lsl.w	r2, r0, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b10      	cmp	r3, #16
 8006680:	d003      	beq.n	800668a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006686:	2b11      	cmp	r3, #17
 8006688:	d132      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1d      	ldr	r2, [pc, #116]	@ (8006704 <HAL_ADC_ConfigChannel+0x1e4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d125      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d126      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80066b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d11a      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80066ba:	4b13      	ldr	r3, [pc, #76]	@ (8006708 <HAL_ADC_ConfigChannel+0x1e8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a13      	ldr	r2, [pc, #76]	@ (800670c <HAL_ADC_ConfigChannel+0x1ec>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	0c9a      	lsrs	r2, r3, #18
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80066d0:	e002      	b.n	80066d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f9      	bne.n	80066d2 <HAL_ADC_ConfigChannel+0x1b2>
 80066de:	e007      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	f043 0220 	orr.w	r2, r3, #32
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr
 8006704:	40012400 	.word	0x40012400
 8006708:	20000000 	.word	0x20000000
 800670c:	431bde83 	.word	0x431bde83

08006710 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	d040      	beq.n	80067b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0201 	orr.w	r2, r2, #1
 800673c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800673e:	4b1f      	ldr	r3, [pc, #124]	@ (80067bc <ADC_Enable+0xac>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1f      	ldr	r2, [pc, #124]	@ (80067c0 <ADC_Enable+0xb0>)
 8006744:	fba2 2303 	umull	r2, r3, r2, r3
 8006748:	0c9b      	lsrs	r3, r3, #18
 800674a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800674c:	e002      	b.n	8006754 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	3b01      	subs	r3, #1
 8006752:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f9      	bne.n	800674e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800675a:	f7ff fcf3 	bl	8006144 <HAL_GetTick>
 800675e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006760:	e01f      	b.n	80067a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006762:	f7ff fcef 	bl	8006144 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d918      	bls.n	80067a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d011      	beq.n	80067a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006782:	f043 0210 	orr.w	r2, r3, #16
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678e:	f043 0201 	orr.w	r2, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e007      	b.n	80067b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d1d8      	bne.n	8006762 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000000 	.word	0x20000000
 80067c0:	431bde83 	.word	0x431bde83

080067c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d12e      	bne.n	800683c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0201 	bic.w	r2, r2, #1
 80067ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80067ee:	f7ff fca9 	bl	8006144 <HAL_GetTick>
 80067f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80067f4:	e01b      	b.n	800682e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80067f6:	f7ff fca5 	bl	8006144 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d914      	bls.n	800682e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b01      	cmp	r3, #1
 8006810:	d10d      	bne.n	800682e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	f043 0210 	orr.w	r2, r3, #16
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006822:	f043 0201 	orr.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e007      	b.n	800683e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b01      	cmp	r3, #1
 800683a:	d0dc      	beq.n	80067f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006852:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800685c:	2b00      	cmp	r3, #0
 800685e:	d127      	bne.n	80068b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006876:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800687a:	d115      	bne.n	80068a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006880:	2b00      	cmp	r3, #0
 8006882:	d111      	bne.n	80068a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a0:	f043 0201 	orr.w	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff fe1d 	bl	80064e8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80068ae:	e004      	b.n	80068ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fe12 	bl	80064fa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fc:	f043 0204 	orr.w	r2, r3, #4
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fe01 	bl	800650c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <__NVIC_SetPriorityGrouping>:
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006924:	4b0c      	ldr	r3, [pc, #48]	@ (8006958 <__NVIC_SetPriorityGrouping+0x44>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006930:	4013      	ands	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800693c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006946:	4a04      	ldr	r2, [pc, #16]	@ (8006958 <__NVIC_SetPriorityGrouping+0x44>)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	60d3      	str	r3, [r2, #12]
}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	e000ed00 	.word	0xe000ed00

0800695c <__NVIC_GetPriorityGrouping>:
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006960:	4b04      	ldr	r3, [pc, #16]	@ (8006974 <__NVIC_GetPriorityGrouping+0x18>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	f003 0307 	and.w	r3, r3, #7
}
 800696a:	4618      	mov	r0, r3
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	e000ed00 	.word	0xe000ed00

08006978 <__NVIC_EnableIRQ>:
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db0b      	blt.n	80069a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	f003 021f 	and.w	r2, r3, #31
 8006990:	4906      	ldr	r1, [pc, #24]	@ (80069ac <__NVIC_EnableIRQ+0x34>)
 8006992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2001      	movs	r0, #1
 800699a:	fa00 f202 	lsl.w	r2, r0, r2
 800699e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr
 80069ac:	e000e100 	.word	0xe000e100

080069b0 <__NVIC_SetPriority>:
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	db0a      	blt.n	80069da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	490c      	ldr	r1, [pc, #48]	@ (80069fc <__NVIC_SetPriority+0x4c>)
 80069ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ce:	0112      	lsls	r2, r2, #4
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	440b      	add	r3, r1
 80069d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80069d8:	e00a      	b.n	80069f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	4908      	ldr	r1, [pc, #32]	@ (8006a00 <__NVIC_SetPriority+0x50>)
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	3b04      	subs	r3, #4
 80069e8:	0112      	lsls	r2, r2, #4
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	440b      	add	r3, r1
 80069ee:	761a      	strb	r2, [r3, #24]
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	e000e100 	.word	0xe000e100
 8006a00:	e000ed00 	.word	0xe000ed00

08006a04 <NVIC_EncodePriority>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	b089      	sub	sp, #36	@ 0x24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f1c3 0307 	rsb	r3, r3, #7
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	bf28      	it	cs
 8006a22:	2304      	movcs	r3, #4
 8006a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	2b06      	cmp	r3, #6
 8006a2c:	d902      	bls.n	8006a34 <NVIC_EncodePriority+0x30>
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	3b03      	subs	r3, #3
 8006a32:	e000      	b.n	8006a36 <NVIC_EncodePriority+0x32>
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a38:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a42:	43da      	mvns	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	401a      	ands	r2, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	fa01 f303 	lsl.w	r3, r1, r3
 8006a56:	43d9      	mvns	r1, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a5c:	4313      	orrs	r3, r2
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3724      	adds	r7, #36	@ 0x24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff4f 	bl	8006914 <__NVIC_SetPriorityGrouping>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b086      	sub	sp, #24
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	4603      	mov	r3, r0
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a90:	f7ff ff64 	bl	800695c <__NVIC_GetPriorityGrouping>
 8006a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	6978      	ldr	r0, [r7, #20]
 8006a9c:	f7ff ffb2 	bl	8006a04 <NVIC_EncodePriority>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff ff81 	bl	80069b0 <__NVIC_SetPriority>
}
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	4603      	mov	r3, r0
 8006abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff ff57 	bl	8006978 <__NVIC_EnableIRQ>
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e014      	b.n	8006b0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	791b      	ldrb	r3, [r3, #4]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d105      	bne.n	8006afa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fa fca3 	bl	8001440 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2202      	movs	r2, #2
 8006afe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e092      	b.n	8006c56 <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	795b      	ldrb	r3, [r3, #5]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_DAC_Start_DMA+0x24>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e08c      	b.n	8006c56 <HAL_DAC_Start_DMA+0x13e>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2202      	movs	r2, #2
 8006b46:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d129      	bne.n	8006ba2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	4a43      	ldr	r2, [pc, #268]	@ (8006c60 <HAL_DAC_Start_DMA+0x148>)
 8006b54:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	4a42      	ldr	r2, [pc, #264]	@ (8006c64 <HAL_DAC_Start_DMA+0x14c>)
 8006b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	4a41      	ldr	r2, [pc, #260]	@ (8006c68 <HAL_DAC_Start_DMA+0x150>)
 8006b64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b74:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_DAC_Start_DMA+0x6c>
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d005      	beq.n	8006b8e <HAL_DAC_Start_DMA+0x76>
 8006b82:	e009      	b.n	8006b98 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	613b      	str	r3, [r7, #16]
        break;
 8006b8c:	e033      	b.n	8006bf6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	613b      	str	r3, [r7, #16]
        break;
 8006b96:	e02e      	b.n	8006bf6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3310      	adds	r3, #16
 8006b9e:	613b      	str	r3, [r7, #16]
        break;
 8006ba0:	e029      	b.n	8006bf6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	4a31      	ldr	r2, [pc, #196]	@ (8006c6c <HAL_DAC_Start_DMA+0x154>)
 8006ba8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	4a30      	ldr	r2, [pc, #192]	@ (8006c70 <HAL_DAC_Start_DMA+0x158>)
 8006bb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8006c74 <HAL_DAC_Start_DMA+0x15c>)
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006bc8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_DAC_Start_DMA+0xc0>
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d005      	beq.n	8006be2 <HAL_DAC_Start_DMA+0xca>
 8006bd6:	e009      	b.n	8006bec <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	613b      	str	r3, [r7, #16]
        break;
 8006be0:	e009      	b.n	8006bf6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3318      	adds	r3, #24
 8006be8:	613b      	str	r3, [r7, #16]
        break;
 8006bea:	e004      	b.n	8006bf6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	331c      	adds	r3, #28
 8006bf2:	613b      	str	r3, [r7, #16]
        break;
 8006bf4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6898      	ldr	r0, [r3, #8]
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	f000 f9a7 	bl	8006f58 <HAL_DMA_Start_IT>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
 8006c0e:	e008      	b.n	8006c22 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68d8      	ldr	r0, [r3, #12]
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	f000 f99d 	bl	8006f58 <HAL_DMA_Start_IT>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10c      	bne.n	8006c48 <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	409a      	lsls	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	e005      	b.n	8006c54 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f043 0204 	orr.w	r2, r3, #4
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	08006d5f 	.word	0x08006d5f
 8006c64:	08006d81 	.word	0x08006d81
 8006c68:	08006d9d 	.word	0x08006d9d
 8006c6c:	08006e01 	.word	0x08006e01
 8006c70:	08006e23 	.word	0x08006e23
 8006c74:	08006e3f 	.word	0x08006e3f

08006c78 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr

08006c8a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bc80      	pop	{r7}
 8006cac:	4770      	bx	lr

08006cae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b089      	sub	sp, #36	@ 0x24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_DAC_ConfigChannel+0x1c>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e042      	b.n	8006d54 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	795b      	ldrb	r3, [r3, #5]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_DAC_ConfigChannel+0x2c>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e03c      	b.n	8006d54 <HAL_DAC_ConfigChannel+0xa6>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4013      	ands	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	22c0      	movs	r2, #192	@ 0xc0
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	43da      	mvns	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	400a      	ands	r2, r1
 8006d44:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3724      	adds	r7, #36	@ 0x24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff ff83 	bl	8006c78 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	711a      	strb	r2, [r3, #4]
}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff ff7b 	bl	8006c8a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f043 0204 	orr.w	r2, r3, #4
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff ff70 	bl	8006c9c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	711a      	strb	r2, [r3, #4]
}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff ffdb 	bl	8006dca <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	711a      	strb	r2, [r3, #4]
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff ffd3 	bl	8006ddc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f043 0204 	orr.w	r2, r3, #4
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7ff ffc8 	bl	8006dee <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	711a      	strb	r2, [r3, #4]
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e059      	b.n	8006f36 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b2d      	ldr	r3, [pc, #180]	@ (8006f40 <HAL_DMA_Init+0xd4>)
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d80f      	bhi.n	8006eae <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	4b2b      	ldr	r3, [pc, #172]	@ (8006f44 <HAL_DMA_Init+0xd8>)
 8006e96:	4413      	add	r3, r2
 8006e98:	4a2b      	ldr	r2, [pc, #172]	@ (8006f48 <HAL_DMA_Init+0xdc>)
 8006e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9e:	091b      	lsrs	r3, r3, #4
 8006ea0:	009a      	lsls	r2, r3, #2
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a28      	ldr	r2, [pc, #160]	@ (8006f4c <HAL_DMA_Init+0xe0>)
 8006eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006eac:	e00e      	b.n	8006ecc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	4b26      	ldr	r3, [pc, #152]	@ (8006f50 <HAL_DMA_Init+0xe4>)
 8006eb6:	4413      	add	r3, r2
 8006eb8:	4a23      	ldr	r2, [pc, #140]	@ (8006f48 <HAL_DMA_Init+0xdc>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	091b      	lsrs	r3, r3, #4
 8006ec0:	009a      	lsls	r2, r3, #2
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a22      	ldr	r2, [pc, #136]	@ (8006f54 <HAL_DMA_Init+0xe8>)
 8006eca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006ee2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006ee6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr
 8006f40:	40020407 	.word	0x40020407
 8006f44:	bffdfff8 	.word	0xbffdfff8
 8006f48:	cccccccd 	.word	0xcccccccd
 8006f4c:	40020000 	.word	0x40020000
 8006f50:	bffdfbf8 	.word	0xbffdfbf8
 8006f54:	40020400 	.word	0x40020400

08006f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_DMA_Start_IT+0x20>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e04b      	b.n	8007010 <HAL_DMA_Start_IT+0xb8>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d13a      	bne.n	8007002 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0201 	bic.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fa6d 	bl	8007490 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 020e 	orr.w	r2, r2, #14
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e00f      	b.n	8006ff0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0204 	bic.w	r2, r2, #4
 8006fde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 020a 	orr.w	r2, r2, #10
 8006fee:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e005      	b.n	800700e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800700a:	2302      	movs	r3, #2
 800700c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007034:	2204      	movs	r2, #4
 8007036:	409a      	lsls	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4013      	ands	r3, r2
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 80f1 	beq.w	8007224 <HAL_DMA_IRQHandler+0x20c>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80eb 	beq.w	8007224 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d107      	bne.n	800706c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0204 	bic.w	r2, r2, #4
 800706a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	4b5f      	ldr	r3, [pc, #380]	@ (80071f0 <HAL_DMA_IRQHandler+0x1d8>)
 8007074:	429a      	cmp	r2, r3
 8007076:	d958      	bls.n	800712a <HAL_DMA_IRQHandler+0x112>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a5d      	ldr	r2, [pc, #372]	@ (80071f4 <HAL_DMA_IRQHandler+0x1dc>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d04f      	beq.n	8007122 <HAL_DMA_IRQHandler+0x10a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a5c      	ldr	r2, [pc, #368]	@ (80071f8 <HAL_DMA_IRQHandler+0x1e0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d048      	beq.n	800711e <HAL_DMA_IRQHandler+0x106>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a5a      	ldr	r2, [pc, #360]	@ (80071fc <HAL_DMA_IRQHandler+0x1e4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d040      	beq.n	8007118 <HAL_DMA_IRQHandler+0x100>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a59      	ldr	r2, [pc, #356]	@ (8007200 <HAL_DMA_IRQHandler+0x1e8>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d038      	beq.n	8007112 <HAL_DMA_IRQHandler+0xfa>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a57      	ldr	r2, [pc, #348]	@ (8007204 <HAL_DMA_IRQHandler+0x1ec>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d030      	beq.n	800710c <HAL_DMA_IRQHandler+0xf4>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a56      	ldr	r2, [pc, #344]	@ (8007208 <HAL_DMA_IRQHandler+0x1f0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d028      	beq.n	8007106 <HAL_DMA_IRQHandler+0xee>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a4d      	ldr	r2, [pc, #308]	@ (80071f0 <HAL_DMA_IRQHandler+0x1d8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d020      	beq.n	8007100 <HAL_DMA_IRQHandler+0xe8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a52      	ldr	r2, [pc, #328]	@ (800720c <HAL_DMA_IRQHandler+0x1f4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d019      	beq.n	80070fc <HAL_DMA_IRQHandler+0xe4>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a50      	ldr	r2, [pc, #320]	@ (8007210 <HAL_DMA_IRQHandler+0x1f8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d012      	beq.n	80070f8 <HAL_DMA_IRQHandler+0xe0>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a4f      	ldr	r2, [pc, #316]	@ (8007214 <HAL_DMA_IRQHandler+0x1fc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00a      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xda>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a4d      	ldr	r2, [pc, #308]	@ (8007218 <HAL_DMA_IRQHandler+0x200>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d102      	bne.n	80070ec <HAL_DMA_IRQHandler+0xd4>
 80070e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80070ea:	e01b      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 80070ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80070f0:	e018      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 80070f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070f6:	e015      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 80070f8:	2340      	movs	r3, #64	@ 0x40
 80070fa:	e013      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 80070fc:	2304      	movs	r3, #4
 80070fe:	e011      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 8007100:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007104:	e00e      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 8007106:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800710a:	e00b      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 800710c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007110:	e008      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 8007112:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007116:	e005      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 8007118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800711c:	e002      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 800711e:	2340      	movs	r3, #64	@ 0x40
 8007120:	e000      	b.n	8007124 <HAL_DMA_IRQHandler+0x10c>
 8007122:	2304      	movs	r3, #4
 8007124:	4a3d      	ldr	r2, [pc, #244]	@ (800721c <HAL_DMA_IRQHandler+0x204>)
 8007126:	6053      	str	r3, [r2, #4]
 8007128:	e057      	b.n	80071da <HAL_DMA_IRQHandler+0x1c2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a31      	ldr	r2, [pc, #196]	@ (80071f4 <HAL_DMA_IRQHandler+0x1dc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d04f      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x1bc>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a2f      	ldr	r2, [pc, #188]	@ (80071f8 <HAL_DMA_IRQHandler+0x1e0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d048      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x1b8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <HAL_DMA_IRQHandler+0x1e4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d040      	beq.n	80071ca <HAL_DMA_IRQHandler+0x1b2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2c      	ldr	r2, [pc, #176]	@ (8007200 <HAL_DMA_IRQHandler+0x1e8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d038      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x1ac>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2b      	ldr	r2, [pc, #172]	@ (8007204 <HAL_DMA_IRQHandler+0x1ec>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d030      	beq.n	80071be <HAL_DMA_IRQHandler+0x1a6>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a29      	ldr	r2, [pc, #164]	@ (8007208 <HAL_DMA_IRQHandler+0x1f0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d028      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x1a0>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a21      	ldr	r2, [pc, #132]	@ (80071f0 <HAL_DMA_IRQHandler+0x1d8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d020      	beq.n	80071b2 <HAL_DMA_IRQHandler+0x19a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a25      	ldr	r2, [pc, #148]	@ (800720c <HAL_DMA_IRQHandler+0x1f4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d019      	beq.n	80071ae <HAL_DMA_IRQHandler+0x196>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a24      	ldr	r2, [pc, #144]	@ (8007210 <HAL_DMA_IRQHandler+0x1f8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d012      	beq.n	80071aa <HAL_DMA_IRQHandler+0x192>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a22      	ldr	r2, [pc, #136]	@ (8007214 <HAL_DMA_IRQHandler+0x1fc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00a      	beq.n	80071a4 <HAL_DMA_IRQHandler+0x18c>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a21      	ldr	r2, [pc, #132]	@ (8007218 <HAL_DMA_IRQHandler+0x200>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d102      	bne.n	800719e <HAL_DMA_IRQHandler+0x186>
 8007198:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800719c:	e01b      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 800719e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80071a2:	e018      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071a8:	e015      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071aa:	2340      	movs	r3, #64	@ 0x40
 80071ac:	e013      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071ae:	2304      	movs	r3, #4
 80071b0:	e011      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80071b6:	e00e      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80071bc:	e00b      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071be:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80071c2:	e008      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071c8:	e005      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ce:	e002      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071d0:	2340      	movs	r3, #64	@ 0x40
 80071d2:	e000      	b.n	80071d6 <HAL_DMA_IRQHandler+0x1be>
 80071d4:	2304      	movs	r3, #4
 80071d6:	4a12      	ldr	r2, [pc, #72]	@ (8007220 <HAL_DMA_IRQHandler+0x208>)
 80071d8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8136 	beq.w	8007450 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80071ec:	e130      	b.n	8007450 <HAL_DMA_IRQHandler+0x438>
 80071ee:	bf00      	nop
 80071f0:	40020080 	.word	0x40020080
 80071f4:	40020008 	.word	0x40020008
 80071f8:	4002001c 	.word	0x4002001c
 80071fc:	40020030 	.word	0x40020030
 8007200:	40020044 	.word	0x40020044
 8007204:	40020058 	.word	0x40020058
 8007208:	4002006c 	.word	0x4002006c
 800720c:	40020408 	.word	0x40020408
 8007210:	4002041c 	.word	0x4002041c
 8007214:	40020430 	.word	0x40020430
 8007218:	40020444 	.word	0x40020444
 800721c:	40020400 	.word	0x40020400
 8007220:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007228:	2202      	movs	r2, #2
 800722a:	409a      	lsls	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80dd 	beq.w	80073f0 <HAL_DMA_IRQHandler+0x3d8>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80d7 	beq.w	80073f0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10b      	bne.n	8007268 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 020a 	bic.w	r2, r2, #10
 800725e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	4b7b      	ldr	r3, [pc, #492]	@ (800745c <HAL_DMA_IRQHandler+0x444>)
 8007270:	429a      	cmp	r2, r3
 8007272:	d958      	bls.n	8007326 <HAL_DMA_IRQHandler+0x30e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a79      	ldr	r2, [pc, #484]	@ (8007460 <HAL_DMA_IRQHandler+0x448>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d04f      	beq.n	800731e <HAL_DMA_IRQHandler+0x306>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a78      	ldr	r2, [pc, #480]	@ (8007464 <HAL_DMA_IRQHandler+0x44c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d048      	beq.n	800731a <HAL_DMA_IRQHandler+0x302>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a76      	ldr	r2, [pc, #472]	@ (8007468 <HAL_DMA_IRQHandler+0x450>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d040      	beq.n	8007314 <HAL_DMA_IRQHandler+0x2fc>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a75      	ldr	r2, [pc, #468]	@ (800746c <HAL_DMA_IRQHandler+0x454>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d038      	beq.n	800730e <HAL_DMA_IRQHandler+0x2f6>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a73      	ldr	r2, [pc, #460]	@ (8007470 <HAL_DMA_IRQHandler+0x458>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d030      	beq.n	8007308 <HAL_DMA_IRQHandler+0x2f0>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a72      	ldr	r2, [pc, #456]	@ (8007474 <HAL_DMA_IRQHandler+0x45c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d028      	beq.n	8007302 <HAL_DMA_IRQHandler+0x2ea>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a69      	ldr	r2, [pc, #420]	@ (800745c <HAL_DMA_IRQHandler+0x444>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d020      	beq.n	80072fc <HAL_DMA_IRQHandler+0x2e4>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a6e      	ldr	r2, [pc, #440]	@ (8007478 <HAL_DMA_IRQHandler+0x460>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d019      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x2e0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a6c      	ldr	r2, [pc, #432]	@ (800747c <HAL_DMA_IRQHandler+0x464>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d012      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x2dc>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a6b      	ldr	r2, [pc, #428]	@ (8007480 <HAL_DMA_IRQHandler+0x468>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00a      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2d6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a69      	ldr	r2, [pc, #420]	@ (8007484 <HAL_DMA_IRQHandler+0x46c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d102      	bne.n	80072e8 <HAL_DMA_IRQHandler+0x2d0>
 80072e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80072e6:	e01b      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 80072e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80072ec:	e018      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 80072ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072f2:	e015      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 80072f4:	2320      	movs	r3, #32
 80072f6:	e013      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e011      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 80072fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007300:	e00e      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 8007302:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007306:	e00b      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 8007308:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800730c:	e008      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 800730e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007312:	e005      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 8007314:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007318:	e002      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 800731a:	2320      	movs	r3, #32
 800731c:	e000      	b.n	8007320 <HAL_DMA_IRQHandler+0x308>
 800731e:	2302      	movs	r3, #2
 8007320:	4a59      	ldr	r2, [pc, #356]	@ (8007488 <HAL_DMA_IRQHandler+0x470>)
 8007322:	6053      	str	r3, [r2, #4]
 8007324:	e057      	b.n	80073d6 <HAL_DMA_IRQHandler+0x3be>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a4d      	ldr	r2, [pc, #308]	@ (8007460 <HAL_DMA_IRQHandler+0x448>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d04f      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x3b8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a4b      	ldr	r2, [pc, #300]	@ (8007464 <HAL_DMA_IRQHandler+0x44c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d048      	beq.n	80073cc <HAL_DMA_IRQHandler+0x3b4>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a4a      	ldr	r2, [pc, #296]	@ (8007468 <HAL_DMA_IRQHandler+0x450>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d040      	beq.n	80073c6 <HAL_DMA_IRQHandler+0x3ae>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a48      	ldr	r2, [pc, #288]	@ (800746c <HAL_DMA_IRQHandler+0x454>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d038      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x3a8>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a47      	ldr	r2, [pc, #284]	@ (8007470 <HAL_DMA_IRQHandler+0x458>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d030      	beq.n	80073ba <HAL_DMA_IRQHandler+0x3a2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a45      	ldr	r2, [pc, #276]	@ (8007474 <HAL_DMA_IRQHandler+0x45c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d028      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x39c>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a3d      	ldr	r2, [pc, #244]	@ (800745c <HAL_DMA_IRQHandler+0x444>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d020      	beq.n	80073ae <HAL_DMA_IRQHandler+0x396>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a41      	ldr	r2, [pc, #260]	@ (8007478 <HAL_DMA_IRQHandler+0x460>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d019      	beq.n	80073aa <HAL_DMA_IRQHandler+0x392>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a40      	ldr	r2, [pc, #256]	@ (800747c <HAL_DMA_IRQHandler+0x464>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d012      	beq.n	80073a6 <HAL_DMA_IRQHandler+0x38e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a3e      	ldr	r2, [pc, #248]	@ (8007480 <HAL_DMA_IRQHandler+0x468>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00a      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x388>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3d      	ldr	r2, [pc, #244]	@ (8007484 <HAL_DMA_IRQHandler+0x46c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d102      	bne.n	800739a <HAL_DMA_IRQHandler+0x382>
 8007394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007398:	e01b      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 800739a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800739e:	e018      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073a4:	e015      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073a6:	2320      	movs	r3, #32
 80073a8:	e013      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e011      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073b2:	e00e      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80073b8:	e00b      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80073be:	e008      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80073c4:	e005      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073ca:	e002      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073cc:	2320      	movs	r3, #32
 80073ce:	e000      	b.n	80073d2 <HAL_DMA_IRQHandler+0x3ba>
 80073d0:	2302      	movs	r3, #2
 80073d2:	4a2e      	ldr	r2, [pc, #184]	@ (800748c <HAL_DMA_IRQHandler+0x474>)
 80073d4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d034      	beq.n	8007450 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80073ee:	e02f      	b.n	8007450 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	2208      	movs	r2, #8
 80073f6:	409a      	lsls	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d028      	beq.n	8007452 <HAL_DMA_IRQHandler+0x43a>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d023      	beq.n	8007452 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 020e 	bic.w	r2, r2, #14
 8007418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007422:	2101      	movs	r1, #1
 8007424:	fa01 f202 	lsl.w	r2, r1, r2
 8007428:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
    }
  }
  return;
 8007450:	bf00      	nop
 8007452:	bf00      	nop
}
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	40020080 	.word	0x40020080
 8007460:	40020008 	.word	0x40020008
 8007464:	4002001c 	.word	0x4002001c
 8007468:	40020030 	.word	0x40020030
 800746c:	40020044 	.word	0x40020044
 8007470:	40020058 	.word	0x40020058
 8007474:	4002006c 	.word	0x4002006c
 8007478:	40020408 	.word	0x40020408
 800747c:	4002041c 	.word	0x4002041c
 8007480:	40020430 	.word	0x40020430
 8007484:	40020444 	.word	0x40020444
 8007488:	40020400 	.word	0x40020400
 800748c:	40020000 	.word	0x40020000

08007490 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a6:	2101      	movs	r1, #1
 80074a8:	fa01 f202 	lsl.w	r2, r1, r2
 80074ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b10      	cmp	r3, #16
 80074bc:	d108      	bne.n	80074d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80074ce:	e007      	b.n	80074e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	60da      	str	r2, [r3, #12]
}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr
	...

080074ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b08b      	sub	sp, #44	@ 0x2c
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80074f6:	2300      	movs	r3, #0
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80074fa:	2300      	movs	r3, #0
 80074fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074fe:	e179      	b.n	80077f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007500:	2201      	movs	r2, #1
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	429a      	cmp	r2, r3
 800751a:	f040 8168 	bne.w	80077ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	4a96      	ldr	r2, [pc, #600]	@ (800777c <HAL_GPIO_Init+0x290>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d05e      	beq.n	80075e6 <HAL_GPIO_Init+0xfa>
 8007528:	4a94      	ldr	r2, [pc, #592]	@ (800777c <HAL_GPIO_Init+0x290>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d875      	bhi.n	800761a <HAL_GPIO_Init+0x12e>
 800752e:	4a94      	ldr	r2, [pc, #592]	@ (8007780 <HAL_GPIO_Init+0x294>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d058      	beq.n	80075e6 <HAL_GPIO_Init+0xfa>
 8007534:	4a92      	ldr	r2, [pc, #584]	@ (8007780 <HAL_GPIO_Init+0x294>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d86f      	bhi.n	800761a <HAL_GPIO_Init+0x12e>
 800753a:	4a92      	ldr	r2, [pc, #584]	@ (8007784 <HAL_GPIO_Init+0x298>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d052      	beq.n	80075e6 <HAL_GPIO_Init+0xfa>
 8007540:	4a90      	ldr	r2, [pc, #576]	@ (8007784 <HAL_GPIO_Init+0x298>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d869      	bhi.n	800761a <HAL_GPIO_Init+0x12e>
 8007546:	4a90      	ldr	r2, [pc, #576]	@ (8007788 <HAL_GPIO_Init+0x29c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d04c      	beq.n	80075e6 <HAL_GPIO_Init+0xfa>
 800754c:	4a8e      	ldr	r2, [pc, #568]	@ (8007788 <HAL_GPIO_Init+0x29c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d863      	bhi.n	800761a <HAL_GPIO_Init+0x12e>
 8007552:	4a8e      	ldr	r2, [pc, #568]	@ (800778c <HAL_GPIO_Init+0x2a0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d046      	beq.n	80075e6 <HAL_GPIO_Init+0xfa>
 8007558:	4a8c      	ldr	r2, [pc, #560]	@ (800778c <HAL_GPIO_Init+0x2a0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d85d      	bhi.n	800761a <HAL_GPIO_Init+0x12e>
 800755e:	2b12      	cmp	r3, #18
 8007560:	d82a      	bhi.n	80075b8 <HAL_GPIO_Init+0xcc>
 8007562:	2b12      	cmp	r3, #18
 8007564:	d859      	bhi.n	800761a <HAL_GPIO_Init+0x12e>
 8007566:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <HAL_GPIO_Init+0x80>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	080075e7 	.word	0x080075e7
 8007570:	080075c1 	.word	0x080075c1
 8007574:	080075d3 	.word	0x080075d3
 8007578:	08007615 	.word	0x08007615
 800757c:	0800761b 	.word	0x0800761b
 8007580:	0800761b 	.word	0x0800761b
 8007584:	0800761b 	.word	0x0800761b
 8007588:	0800761b 	.word	0x0800761b
 800758c:	0800761b 	.word	0x0800761b
 8007590:	0800761b 	.word	0x0800761b
 8007594:	0800761b 	.word	0x0800761b
 8007598:	0800761b 	.word	0x0800761b
 800759c:	0800761b 	.word	0x0800761b
 80075a0:	0800761b 	.word	0x0800761b
 80075a4:	0800761b 	.word	0x0800761b
 80075a8:	0800761b 	.word	0x0800761b
 80075ac:	0800761b 	.word	0x0800761b
 80075b0:	080075c9 	.word	0x080075c9
 80075b4:	080075dd 	.word	0x080075dd
 80075b8:	4a75      	ldr	r2, [pc, #468]	@ (8007790 <HAL_GPIO_Init+0x2a4>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d013      	beq.n	80075e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80075be:	e02c      	b.n	800761a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	623b      	str	r3, [r7, #32]
          break;
 80075c6:	e029      	b.n	800761c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	3304      	adds	r3, #4
 80075ce:	623b      	str	r3, [r7, #32]
          break;
 80075d0:	e024      	b.n	800761c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	3308      	adds	r3, #8
 80075d8:	623b      	str	r3, [r7, #32]
          break;
 80075da:	e01f      	b.n	800761c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	330c      	adds	r3, #12
 80075e2:	623b      	str	r3, [r7, #32]
          break;
 80075e4:	e01a      	b.n	800761c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80075ee:	2304      	movs	r3, #4
 80075f0:	623b      	str	r3, [r7, #32]
          break;
 80075f2:	e013      	b.n	800761c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d105      	bne.n	8007608 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075fc:	2308      	movs	r3, #8
 80075fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	611a      	str	r2, [r3, #16]
          break;
 8007606:	e009      	b.n	800761c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007608:	2308      	movs	r3, #8
 800760a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	615a      	str	r2, [r3, #20]
          break;
 8007612:	e003      	b.n	800761c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007614:	2300      	movs	r3, #0
 8007616:	623b      	str	r3, [r7, #32]
          break;
 8007618:	e000      	b.n	800761c <HAL_GPIO_Init+0x130>
          break;
 800761a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2bff      	cmp	r3, #255	@ 0xff
 8007620:	d801      	bhi.n	8007626 <HAL_GPIO_Init+0x13a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	e001      	b.n	800762a <HAL_GPIO_Init+0x13e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3304      	adds	r3, #4
 800762a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2bff      	cmp	r3, #255	@ 0xff
 8007630:	d802      	bhi.n	8007638 <HAL_GPIO_Init+0x14c>
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	e002      	b.n	800763e <HAL_GPIO_Init+0x152>
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	3b08      	subs	r3, #8
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	210f      	movs	r1, #15
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	fa01 f303 	lsl.w	r3, r1, r3
 800764c:	43db      	mvns	r3, r3
 800764e:	401a      	ands	r2, r3
 8007650:	6a39      	ldr	r1, [r7, #32]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	fa01 f303 	lsl.w	r3, r1, r3
 8007658:	431a      	orrs	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80c1 	beq.w	80077ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800766c:	4b49      	ldr	r3, [pc, #292]	@ (8007794 <HAL_GPIO_Init+0x2a8>)
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	4a48      	ldr	r2, [pc, #288]	@ (8007794 <HAL_GPIO_Init+0x2a8>)
 8007672:	f043 0301 	orr.w	r3, r3, #1
 8007676:	6193      	str	r3, [r2, #24]
 8007678:	4b46      	ldr	r3, [pc, #280]	@ (8007794 <HAL_GPIO_Init+0x2a8>)
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	60bb      	str	r3, [r7, #8]
 8007682:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007684:	4a44      	ldr	r2, [pc, #272]	@ (8007798 <HAL_GPIO_Init+0x2ac>)
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	089b      	lsrs	r3, r3, #2
 800768a:	3302      	adds	r3, #2
 800768c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007690:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	220f      	movs	r2, #15
 800769c:	fa02 f303 	lsl.w	r3, r2, r3
 80076a0:	43db      	mvns	r3, r3
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4013      	ands	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3c      	ldr	r2, [pc, #240]	@ (800779c <HAL_GPIO_Init+0x2b0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d01f      	beq.n	80076f0 <HAL_GPIO_Init+0x204>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a3b      	ldr	r2, [pc, #236]	@ (80077a0 <HAL_GPIO_Init+0x2b4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d019      	beq.n	80076ec <HAL_GPIO_Init+0x200>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a3a      	ldr	r2, [pc, #232]	@ (80077a4 <HAL_GPIO_Init+0x2b8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <HAL_GPIO_Init+0x1fc>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a39      	ldr	r2, [pc, #228]	@ (80077a8 <HAL_GPIO_Init+0x2bc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00d      	beq.n	80076e4 <HAL_GPIO_Init+0x1f8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a38      	ldr	r2, [pc, #224]	@ (80077ac <HAL_GPIO_Init+0x2c0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d007      	beq.n	80076e0 <HAL_GPIO_Init+0x1f4>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a37      	ldr	r2, [pc, #220]	@ (80077b0 <HAL_GPIO_Init+0x2c4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d101      	bne.n	80076dc <HAL_GPIO_Init+0x1f0>
 80076d8:	2305      	movs	r3, #5
 80076da:	e00a      	b.n	80076f2 <HAL_GPIO_Init+0x206>
 80076dc:	2306      	movs	r3, #6
 80076de:	e008      	b.n	80076f2 <HAL_GPIO_Init+0x206>
 80076e0:	2304      	movs	r3, #4
 80076e2:	e006      	b.n	80076f2 <HAL_GPIO_Init+0x206>
 80076e4:	2303      	movs	r3, #3
 80076e6:	e004      	b.n	80076f2 <HAL_GPIO_Init+0x206>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e002      	b.n	80076f2 <HAL_GPIO_Init+0x206>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <HAL_GPIO_Init+0x206>
 80076f0:	2300      	movs	r3, #0
 80076f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f4:	f002 0203 	and.w	r2, r2, #3
 80076f8:	0092      	lsls	r2, r2, #2
 80076fa:	4093      	lsls	r3, r2
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007702:	4925      	ldr	r1, [pc, #148]	@ (8007798 <HAL_GPIO_Init+0x2ac>)
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	089b      	lsrs	r3, r3, #2
 8007708:	3302      	adds	r3, #2
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d006      	beq.n	800772a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800771c:	4b25      	ldr	r3, [pc, #148]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	4924      	ldr	r1, [pc, #144]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	4313      	orrs	r3, r2
 8007726:	608b      	str	r3, [r1, #8]
 8007728:	e006      	b.n	8007738 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800772a:	4b22      	ldr	r3, [pc, #136]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	43db      	mvns	r3, r3
 8007732:	4920      	ldr	r1, [pc, #128]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 8007734:	4013      	ands	r3, r2
 8007736:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d006      	beq.n	8007752 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007744:	4b1b      	ldr	r3, [pc, #108]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	491a      	ldr	r1, [pc, #104]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	4313      	orrs	r3, r2
 800774e:	60cb      	str	r3, [r1, #12]
 8007750:	e006      	b.n	8007760 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007752:	4b18      	ldr	r3, [pc, #96]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	43db      	mvns	r3, r3
 800775a:	4916      	ldr	r1, [pc, #88]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 800775c:	4013      	ands	r3, r2
 800775e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d025      	beq.n	80077b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800776c:	4b11      	ldr	r3, [pc, #68]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	4910      	ldr	r1, [pc, #64]	@ (80077b4 <HAL_GPIO_Init+0x2c8>)
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	4313      	orrs	r3, r2
 8007776:	604b      	str	r3, [r1, #4]
 8007778:	e025      	b.n	80077c6 <HAL_GPIO_Init+0x2da>
 800777a:	bf00      	nop
 800777c:	10320000 	.word	0x10320000
 8007780:	10310000 	.word	0x10310000
 8007784:	10220000 	.word	0x10220000
 8007788:	10210000 	.word	0x10210000
 800778c:	10120000 	.word	0x10120000
 8007790:	10110000 	.word	0x10110000
 8007794:	40021000 	.word	0x40021000
 8007798:	40010000 	.word	0x40010000
 800779c:	40010800 	.word	0x40010800
 80077a0:	40010c00 	.word	0x40010c00
 80077a4:	40011000 	.word	0x40011000
 80077a8:	40011400 	.word	0x40011400
 80077ac:	40011800 	.word	0x40011800
 80077b0:	40011c00 	.word	0x40011c00
 80077b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80077b8:	4b15      	ldr	r3, [pc, #84]	@ (8007810 <HAL_GPIO_Init+0x324>)
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	43db      	mvns	r3, r3
 80077c0:	4913      	ldr	r1, [pc, #76]	@ (8007810 <HAL_GPIO_Init+0x324>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d006      	beq.n	80077e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80077d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007810 <HAL_GPIO_Init+0x324>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	490e      	ldr	r1, [pc, #56]	@ (8007810 <HAL_GPIO_Init+0x324>)
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	4313      	orrs	r3, r2
 80077dc:	600b      	str	r3, [r1, #0]
 80077de:	e006      	b.n	80077ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <HAL_GPIO_Init+0x324>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	43db      	mvns	r3, r3
 80077e8:	4909      	ldr	r1, [pc, #36]	@ (8007810 <HAL_GPIO_Init+0x324>)
 80077ea:	4013      	ands	r3, r2
 80077ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	3301      	adds	r3, #1
 80077f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	fa22 f303 	lsr.w	r3, r2, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f47f ae7e 	bne.w	8007500 <HAL_GPIO_Init+0x14>
  }
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	372c      	adds	r7, #44	@ 0x2c
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr
 8007810:	40010400 	.word	0x40010400

08007814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	887b      	ldrh	r3, [r7, #2]
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e001      	b.n	8007836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	807b      	strh	r3, [r7, #2]
 800784e:	4613      	mov	r3, r2
 8007850:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007852:	787b      	ldrb	r3, [r7, #1]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007858:	887a      	ldrh	r2, [r7, #2]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800785e:	e003      	b.n	8007868 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	041a      	lsls	r2, r3, #16
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	611a      	str	r2, [r3, #16]
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr
	...

08007874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800787e:	4b08      	ldr	r3, [pc, #32]	@ (80078a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007880:	695a      	ldr	r2, [r3, #20]
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	4013      	ands	r3, r2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d006      	beq.n	8007898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800788a:	4a05      	ldr	r2, [pc, #20]	@ (80078a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	4618      	mov	r0, r3
 8007894:	f7fd faf0 	bl	8004e78 <HAL_GPIO_EXTI_Callback>
  }
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40010400 	.word	0x40010400

080078a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e12b      	b.n	8007b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7f9 ffbe 	bl	800184c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2224      	movs	r2, #36	@ 0x24
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007908:	f001 fbfe 	bl	8009108 <HAL_RCC_GetPCLK1Freq>
 800790c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4a81      	ldr	r2, [pc, #516]	@ (8007b18 <HAL_I2C_Init+0x274>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d807      	bhi.n	8007928 <HAL_I2C_Init+0x84>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a80      	ldr	r2, [pc, #512]	@ (8007b1c <HAL_I2C_Init+0x278>)
 800791c:	4293      	cmp	r3, r2
 800791e:	bf94      	ite	ls
 8007920:	2301      	movls	r3, #1
 8007922:	2300      	movhi	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e006      	b.n	8007936 <HAL_I2C_Init+0x92>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a7d      	ldr	r2, [pc, #500]	@ (8007b20 <HAL_I2C_Init+0x27c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	bf94      	ite	ls
 8007930:	2301      	movls	r3, #1
 8007932:	2300      	movhi	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e0e7      	b.n	8007b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a78      	ldr	r2, [pc, #480]	@ (8007b24 <HAL_I2C_Init+0x280>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	0c9b      	lsrs	r3, r3, #18
 8007948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4a6a      	ldr	r2, [pc, #424]	@ (8007b18 <HAL_I2C_Init+0x274>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d802      	bhi.n	8007978 <HAL_I2C_Init+0xd4>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3301      	adds	r3, #1
 8007976:	e009      	b.n	800798c <HAL_I2C_Init+0xe8>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	4a69      	ldr	r2, [pc, #420]	@ (8007b28 <HAL_I2C_Init+0x284>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	099b      	lsrs	r3, r3, #6
 800798a:	3301      	adds	r3, #1
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	430b      	orrs	r3, r1
 8007992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800799e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	495c      	ldr	r1, [pc, #368]	@ (8007b18 <HAL_I2C_Init+0x274>)
 80079a8:	428b      	cmp	r3, r1
 80079aa:	d819      	bhi.n	80079e0 <HAL_I2C_Init+0x13c>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	1e59      	subs	r1, r3, #1
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80079ba:	1c59      	adds	r1, r3, #1
 80079bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80079c0:	400b      	ands	r3, r1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_I2C_Init+0x138>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1e59      	subs	r1, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80079d4:	3301      	adds	r3, #1
 80079d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079da:	e051      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 80079dc:	2304      	movs	r3, #4
 80079de:	e04f      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d111      	bne.n	8007a0c <HAL_I2C_Init+0x168>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	1e58      	subs	r0, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	440b      	add	r3, r1
 80079f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80079fa:	3301      	adds	r3, #1
 80079fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e012      	b.n	8007a32 <HAL_I2C_Init+0x18e>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1e58      	subs	r0, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	0099      	lsls	r1, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a22:	3301      	adds	r3, #1
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_I2C_Init+0x196>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e022      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10e      	bne.n	8007a60 <HAL_I2C_Init+0x1bc>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1e58      	subs	r0, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6859      	ldr	r1, [r3, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	440b      	add	r3, r1
 8007a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a54:	3301      	adds	r3, #1
 8007a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a5e:	e00f      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	1e58      	subs	r0, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6859      	ldr	r1, [r3, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	0099      	lsls	r1, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a76:	3301      	adds	r3, #1
 8007a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	6809      	ldr	r1, [r1, #0]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69da      	ldr	r2, [r3, #28]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007aae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6911      	ldr	r1, [r2, #16]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68d2      	ldr	r2, [r2, #12]
 8007aba:	4311      	orrs	r1, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	000186a0 	.word	0x000186a0
 8007b1c:	001e847f 	.word	0x001e847f
 8007b20:	003d08ff 	.word	0x003d08ff
 8007b24:	431bde83 	.word	0x431bde83
 8007b28:	10624dd3 	.word	0x10624dd3

08007b2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	817b      	strh	r3, [r7, #10]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	813b      	strh	r3, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b46:	f7fe fafd 	bl	8006144 <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	f040 80d9 	bne.w	8007d0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2319      	movs	r3, #25
 8007b60:	2201      	movs	r2, #1
 8007b62:	496d      	ldr	r1, [pc, #436]	@ (8007d18 <HAL_I2C_Mem_Write+0x1ec>)
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fccd 	bl	8008504 <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
 8007b72:	e0cc      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_I2C_Mem_Write+0x56>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e0c5      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d007      	beq.n	8007ba8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2221      	movs	r2, #33	@ 0x21
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2240      	movs	r2, #64	@ 0x40
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a3a      	ldr	r2, [r7, #32]
 8007bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4a4d      	ldr	r2, [pc, #308]	@ (8007d1c <HAL_I2C_Mem_Write+0x1f0>)
 8007be8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bea:	88f8      	ldrh	r0, [r7, #6]
 8007bec:	893a      	ldrh	r2, [r7, #8]
 8007bee:	8979      	ldrh	r1, [r7, #10]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fb04 	bl	8008208 <I2C_RequestMemoryWrite>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d052      	beq.n	8007cac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e081      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fd92 	bl	8008738 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00d      	beq.n	8007c36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d107      	bne.n	8007c32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e06b      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3a:	781a      	ldrb	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d11b      	bne.n	8007cac <HAL_I2C_Mem_Write+0x180>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d017      	beq.n	8007cac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c80:	781a      	ldrb	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1aa      	bne.n	8007c0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fd85 	bl	80087c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00d      	beq.n	8007ce0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d107      	bne.n	8007cdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e016      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e000      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	00100002 	.word	0x00100002
 8007d1c:	ffff0000 	.word	0xffff0000

08007d20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	@ 0x30
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	817b      	strh	r3, [r7, #10]
 8007d32:	460b      	mov	r3, r1
 8007d34:	813b      	strh	r3, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d3e:	f7fe fa01 	bl	8006144 <HAL_GetTick>
 8007d42:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	f040 8250 	bne.w	80081f2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2319      	movs	r3, #25
 8007d58:	2201      	movs	r2, #1
 8007d5a:	4982      	ldr	r1, [pc, #520]	@ (8007f64 <HAL_I2C_Mem_Read+0x244>)
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fbd1 	bl	8008504 <I2C_WaitOnFlagUntilTimeout>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e243      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_I2C_Mem_Read+0x5a>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e23c      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d007      	beq.n	8007da0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2222      	movs	r2, #34	@ 0x22
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2240      	movs	r2, #64	@ 0x40
 8007dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a62      	ldr	r2, [pc, #392]	@ (8007f68 <HAL_I2C_Mem_Read+0x248>)
 8007de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007de2:	88f8      	ldrh	r0, [r7, #6]
 8007de4:	893a      	ldrh	r2, [r7, #8]
 8007de6:	8979      	ldrh	r1, [r7, #10]
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4603      	mov	r3, r0
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fa9e 	bl	8008334 <I2C_RequestMemoryRead>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e1f8      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d113      	bne.n	8007e32 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	e1cc      	b.n	80081cc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d11e      	bne.n	8007e78 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e4a:	b672      	cpsid	i
}
 8007e4c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	61bb      	str	r3, [r7, #24]
 8007e62:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007e74:	b662      	cpsie	i
}
 8007e76:	e035      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d11e      	bne.n	8007ebe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e90:	b672      	cpsid	i
}
 8007e92:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007eba:	b662      	cpsie	i
}
 8007ebc:	e012      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ecc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ece:	2300      	movs	r3, #0
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007ee4:	e172      	b.n	80081cc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	f200 811f 	bhi.w	800812e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d123      	bne.n	8007f40 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007efa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fcab 	bl	8008858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e173      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f3e:	e145      	b.n	80081cc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d152      	bne.n	8007fee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4906      	ldr	r1, [pc, #24]	@ (8007f6c <HAL_I2C_Mem_Read+0x24c>)
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fad6 	bl	8008504 <I2C_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e148      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
 8007f62:	bf00      	nop
 8007f64:	00100002 	.word	0x00100002
 8007f68:	ffff0000 	.word	0xffff0000
 8007f6c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007f70:	b672      	cpsid	i
}
 8007f72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007fb6:	b662      	cpsie	i
}
 8007fb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc4:	b2d2      	uxtb	r2, r2
 8007fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fcc:	1c5a      	adds	r2, r3, #1
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007fec:	e0ee      	b.n	80081cc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4981      	ldr	r1, [pc, #516]	@ (80081fc <HAL_I2C_Mem_Read+0x4dc>)
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 fa83 	bl	8008504 <I2C_WaitOnFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e0f5      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008016:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008018:	b672      	cpsid	i
}
 800801a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691a      	ldr	r2, [r3, #16]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008038:	3b01      	subs	r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008044:	b29b      	uxth	r3, r3
 8008046:	3b01      	subs	r3, #1
 8008048:	b29a      	uxth	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800804e:	4b6c      	ldr	r3, [pc, #432]	@ (8008200 <HAL_I2C_Mem_Read+0x4e0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	08db      	lsrs	r3, r3, #3
 8008054:	4a6b      	ldr	r2, [pc, #428]	@ (8008204 <HAL_I2C_Mem_Read+0x4e4>)
 8008056:	fba2 2303 	umull	r2, r3, r2, r3
 800805a:	0a1a      	lsrs	r2, r3, #8
 800805c:	4613      	mov	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	00da      	lsls	r2, r3, #3
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	3b01      	subs	r3, #1
 800806c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d118      	bne.n	80080a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808e:	f043 0220 	orr.w	r2, r3, #32
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008096:	b662      	cpsie	i
}
 8008098:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e0a6      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d1d9      	bne.n	8008068 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691a      	ldr	r2, [r3, #16]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80080f6:	b662      	cpsie	i
}
 80080f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008122:	b29b      	uxth	r3, r3
 8008124:	3b01      	subs	r3, #1
 8008126:	b29a      	uxth	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800812c:	e04e      	b.n	80081cc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800812e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008130:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fb90 	bl	8008858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e058      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b04      	cmp	r3, #4
 8008180:	d124      	bne.n	80081cc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008186:	2b03      	cmp	r3, #3
 8008188:	d107      	bne.n	800819a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008198:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f47f ae88 	bne.w	8007ee6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2220      	movs	r2, #32
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e000      	b.n	80081f4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
  }
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3728      	adds	r7, #40	@ 0x28
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	00010004 	.word	0x00010004
 8008200:	20000000 	.word	0x20000000
 8008204:	14f8b589 	.word	0x14f8b589

08008208 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af02      	add	r7, sp, #8
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	4608      	mov	r0, r1
 8008212:	4611      	mov	r1, r2
 8008214:	461a      	mov	r2, r3
 8008216:	4603      	mov	r3, r0
 8008218:	817b      	strh	r3, [r7, #10]
 800821a:	460b      	mov	r3, r1
 800821c:	813b      	strh	r3, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	2200      	movs	r2, #0
 800823a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f960 	bl	8008504 <I2C_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008258:	d103      	bne.n	8008262 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008260:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e05f      	b.n	8008326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008266:	897b      	ldrh	r3, [r7, #10]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	6a3a      	ldr	r2, [r7, #32]
 800827a:	492d      	ldr	r1, [pc, #180]	@ (8008330 <I2C_RequestMemoryWrite+0x128>)
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 f9bb 	bl	80085f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e04c      	b.n	8008326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a4:	6a39      	ldr	r1, [r7, #32]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fa46 	bl	8008738 <I2C_WaitOnTXEFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00d      	beq.n	80082ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d107      	bne.n	80082ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e02b      	b.n	8008326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d105      	bne.n	80082e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082d4:	893b      	ldrh	r3, [r7, #8]
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	611a      	str	r2, [r3, #16]
 80082de:	e021      	b.n	8008324 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082e0:	893b      	ldrh	r3, [r7, #8]
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f0:	6a39      	ldr	r1, [r7, #32]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fa20 	bl	8008738 <I2C_WaitOnTXEFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00d      	beq.n	800831a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	2b04      	cmp	r3, #4
 8008304:	d107      	bne.n	8008316 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e005      	b.n	8008326 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800831a:	893b      	ldrh	r3, [r7, #8]
 800831c:	b2da      	uxtb	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	00010002 	.word	0x00010002

08008334 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af02      	add	r7, sp, #8
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	4608      	mov	r0, r1
 800833e:	4611      	mov	r1, r2
 8008340:	461a      	mov	r2, r3
 8008342:	4603      	mov	r3, r0
 8008344:	817b      	strh	r3, [r7, #10]
 8008346:	460b      	mov	r3, r1
 8008348:	813b      	strh	r3, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800835c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800836c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	2200      	movs	r2, #0
 8008376:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f8c2 	bl	8008504 <I2C_WaitOnFlagUntilTimeout>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008394:	d103      	bne.n	800839e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800839c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e0aa      	b.n	80084f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083a2:	897b      	ldrh	r3, [r7, #10]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80083b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	6a3a      	ldr	r2, [r7, #32]
 80083b6:	4952      	ldr	r1, [pc, #328]	@ (8008500 <I2C_RequestMemoryRead+0x1cc>)
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 f91d 	bl	80085f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e097      	b.n	80084f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083e0:	6a39      	ldr	r1, [r7, #32]
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 f9a8 	bl	8008738 <I2C_WaitOnTXEFlagUntilTimeout>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00d      	beq.n	800840a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d107      	bne.n	8008406 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e076      	b.n	80084f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d105      	bne.n	800841c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008410:	893b      	ldrh	r3, [r7, #8]
 8008412:	b2da      	uxtb	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	611a      	str	r2, [r3, #16]
 800841a:	e021      	b.n	8008460 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800841c:	893b      	ldrh	r3, [r7, #8]
 800841e:	0a1b      	lsrs	r3, r3, #8
 8008420:	b29b      	uxth	r3, r3
 8008422:	b2da      	uxtb	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800842a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800842c:	6a39      	ldr	r1, [r7, #32]
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 f982 	bl	8008738 <I2C_WaitOnTXEFlagUntilTimeout>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00d      	beq.n	8008456 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843e:	2b04      	cmp	r3, #4
 8008440:	d107      	bne.n	8008452 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e050      	b.n	80084f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008456:	893b      	ldrh	r3, [r7, #8]
 8008458:	b2da      	uxtb	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008462:	6a39      	ldr	r1, [r7, #32]
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f967 	bl	8008738 <I2C_WaitOnTXEFlagUntilTimeout>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00d      	beq.n	800848c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008474:	2b04      	cmp	r3, #4
 8008476:	d107      	bne.n	8008488 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008486:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e035      	b.n	80084f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800849a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f82b 	bl	8008504 <I2C_WaitOnFlagUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00d      	beq.n	80084d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c2:	d103      	bne.n	80084cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e013      	b.n	80084f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80084d0:	897b      	ldrh	r3, [r7, #10]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	4906      	ldr	r1, [pc, #24]	@ (8008500 <I2C_RequestMemoryRead+0x1cc>)
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f886 	bl	80085f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	00010002 	.word	0x00010002

08008504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	603b      	str	r3, [r7, #0]
 8008510:	4613      	mov	r3, r2
 8008512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008514:	e048      	b.n	80085a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851c:	d044      	beq.n	80085a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800851e:	f7fd fe11 	bl	8006144 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d302      	bcc.n	8008534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d139      	bne.n	80085a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	0c1b      	lsrs	r3, r3, #16
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b01      	cmp	r3, #1
 800853c:	d10d      	bne.n	800855a <I2C_WaitOnFlagUntilTimeout+0x56>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	43da      	mvns	r2, r3
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4013      	ands	r3, r2
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	bf0c      	ite	eq
 8008550:	2301      	moveq	r3, #1
 8008552:	2300      	movne	r3, #0
 8008554:	b2db      	uxtb	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	e00c      	b.n	8008574 <I2C_WaitOnFlagUntilTimeout+0x70>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	43da      	mvns	r2, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	4013      	ands	r3, r2
 8008566:	b29b      	uxth	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	bf0c      	ite	eq
 800856c:	2301      	moveq	r3, #1
 800856e:	2300      	movne	r3, #0
 8008570:	b2db      	uxtb	r3, r3
 8008572:	461a      	mov	r2, r3
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	429a      	cmp	r2, r3
 8008578:	d116      	bne.n	80085a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008594:	f043 0220 	orr.w	r2, r3, #32
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e023      	b.n	80085f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	0c1b      	lsrs	r3, r3, #16
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d10d      	bne.n	80085ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	43da      	mvns	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4013      	ands	r3, r2
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	bf0c      	ite	eq
 80085c4:	2301      	moveq	r3, #1
 80085c6:	2300      	movne	r3, #0
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	461a      	mov	r2, r3
 80085cc:	e00c      	b.n	80085e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	43da      	mvns	r2, r3
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	4013      	ands	r3, r2
 80085da:	b29b      	uxth	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	bf0c      	ite	eq
 80085e0:	2301      	moveq	r3, #1
 80085e2:	2300      	movne	r3, #0
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	461a      	mov	r2, r3
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d093      	beq.n	8008516 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008606:	e071      	b.n	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008616:	d123      	bne.n	8008660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008626:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2220      	movs	r2, #32
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864c:	f043 0204 	orr.w	r2, r3, #4
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e067      	b.n	8008730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008666:	d041      	beq.n	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008668:	f7fd fd6c 	bl	8006144 <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d302      	bcc.n	800867e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d136      	bne.n	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	0c1b      	lsrs	r3, r3, #16
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b01      	cmp	r3, #1
 8008686:	d10c      	bne.n	80086a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	43da      	mvns	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4013      	ands	r3, r2
 8008694:	b29b      	uxth	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	bf14      	ite	ne
 800869a:	2301      	movne	r3, #1
 800869c:	2300      	moveq	r3, #0
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	e00b      	b.n	80086ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	43da      	mvns	r2, r3
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	4013      	ands	r3, r2
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bf14      	ite	ne
 80086b4:	2301      	movne	r3, #1
 80086b6:	2300      	moveq	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d016      	beq.n	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d8:	f043 0220 	orr.w	r2, r3, #32
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e021      	b.n	8008730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	0c1b      	lsrs	r3, r3, #16
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d10c      	bne.n	8008710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	43da      	mvns	r2, r3
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4013      	ands	r3, r2
 8008702:	b29b      	uxth	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	bf14      	ite	ne
 8008708:	2301      	movne	r3, #1
 800870a:	2300      	moveq	r3, #0
 800870c:	b2db      	uxtb	r3, r3
 800870e:	e00b      	b.n	8008728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	43da      	mvns	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	4013      	ands	r3, r2
 800871c:	b29b      	uxth	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	bf14      	ite	ne
 8008722:	2301      	movne	r3, #1
 8008724:	2300      	moveq	r3, #0
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	f47f af6d 	bne.w	8008608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008744:	e034      	b.n	80087b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 f8e3 	bl	8008912 <I2C_IsAcknowledgeFailed>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e034      	b.n	80087c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875c:	d028      	beq.n	80087b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800875e:	f7fd fcf1 	bl	8006144 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	429a      	cmp	r2, r3
 800876c:	d302      	bcc.n	8008774 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11d      	bne.n	80087b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800877e:	2b80      	cmp	r3, #128	@ 0x80
 8008780:	d016      	beq.n	80087b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879c:	f043 0220 	orr.w	r2, r3, #32
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e007      	b.n	80087c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ba:	2b80      	cmp	r3, #128	@ 0x80
 80087bc:	d1c3      	bne.n	8008746 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087d4:	e034      	b.n	8008840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 f89b 	bl	8008912 <I2C_IsAcknowledgeFailed>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e034      	b.n	8008850 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d028      	beq.n	8008840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ee:	f7fd fca9 	bl	8006144 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d302      	bcc.n	8008804 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d11d      	bne.n	8008840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	2b04      	cmp	r3, #4
 8008810:	d016      	beq.n	8008840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2220      	movs	r2, #32
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	f043 0220 	orr.w	r2, r3, #32
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e007      	b.n	8008850 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f003 0304 	and.w	r3, r3, #4
 800884a:	2b04      	cmp	r3, #4
 800884c:	d1c3      	bne.n	80087d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008864:	e049      	b.n	80088fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b10      	cmp	r3, #16
 8008872:	d119      	bne.n	80088a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f06f 0210 	mvn.w	r2, #16
 800887c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e030      	b.n	800890a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a8:	f7fd fc4c 	bl	8006144 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d302      	bcc.n	80088be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d11d      	bne.n	80088fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c8:	2b40      	cmp	r3, #64	@ 0x40
 80088ca:	d016      	beq.n	80088fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e6:	f043 0220 	orr.w	r2, r3, #32
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e007      	b.n	800890a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008904:	2b40      	cmp	r3, #64	@ 0x40
 8008906:	d1ae      	bne.n	8008866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008928:	d11b      	bne.n	8008962 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008932:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894e:	f043 0204 	orr.w	r2, r3, #4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	bc80      	pop	{r7}
 800896c:	4770      	bx	lr
	...

08008970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e272      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 8087 	beq.w	8008a9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008990:	4b92      	ldr	r3, [pc, #584]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f003 030c 	and.w	r3, r3, #12
 8008998:	2b04      	cmp	r3, #4
 800899a:	d00c      	beq.n	80089b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800899c:	4b8f      	ldr	r3, [pc, #572]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f003 030c 	and.w	r3, r3, #12
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d112      	bne.n	80089ce <HAL_RCC_OscConfig+0x5e>
 80089a8:	4b8c      	ldr	r3, [pc, #560]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089b4:	d10b      	bne.n	80089ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b6:	4b89      	ldr	r3, [pc, #548]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d06c      	beq.n	8008a9c <HAL_RCC_OscConfig+0x12c>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d168      	bne.n	8008a9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e24c      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d6:	d106      	bne.n	80089e6 <HAL_RCC_OscConfig+0x76>
 80089d8:	4b80      	ldr	r3, [pc, #512]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a7f      	ldr	r2, [pc, #508]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 80089de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	e02e      	b.n	8008a44 <HAL_RCC_OscConfig+0xd4>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10c      	bne.n	8008a08 <HAL_RCC_OscConfig+0x98>
 80089ee:	4b7b      	ldr	r3, [pc, #492]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a7a      	ldr	r2, [pc, #488]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 80089f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	4b78      	ldr	r3, [pc, #480]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a77      	ldr	r2, [pc, #476]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	e01d      	b.n	8008a44 <HAL_RCC_OscConfig+0xd4>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a10:	d10c      	bne.n	8008a2c <HAL_RCC_OscConfig+0xbc>
 8008a12:	4b72      	ldr	r3, [pc, #456]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a71      	ldr	r2, [pc, #452]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a6e      	ldr	r2, [pc, #440]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	e00b      	b.n	8008a44 <HAL_RCC_OscConfig+0xd4>
 8008a2c:	4b6b      	ldr	r3, [pc, #428]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a6a      	ldr	r2, [pc, #424]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	4b68      	ldr	r3, [pc, #416]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a67      	ldr	r2, [pc, #412]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d013      	beq.n	8008a74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a4c:	f7fd fb7a 	bl	8006144 <HAL_GetTick>
 8008a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a52:	e008      	b.n	8008a66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a54:	f7fd fb76 	bl	8006144 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b64      	cmp	r3, #100	@ 0x64
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e200      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a66:	4b5d      	ldr	r3, [pc, #372]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0f0      	beq.n	8008a54 <HAL_RCC_OscConfig+0xe4>
 8008a72:	e014      	b.n	8008a9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a74:	f7fd fb66 	bl	8006144 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a7c:	f7fd fb62 	bl	8006144 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b64      	cmp	r3, #100	@ 0x64
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e1ec      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a8e:	4b53      	ldr	r3, [pc, #332]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f0      	bne.n	8008a7c <HAL_RCC_OscConfig+0x10c>
 8008a9a:	e000      	b.n	8008a9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d063      	beq.n	8008b72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f003 030c 	and.w	r3, r3, #12
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008ab6:	4b49      	ldr	r3, [pc, #292]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f003 030c 	and.w	r3, r3, #12
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d11c      	bne.n	8008afc <HAL_RCC_OscConfig+0x18c>
 8008ac2:	4b46      	ldr	r3, [pc, #280]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d116      	bne.n	8008afc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ace:	4b43      	ldr	r3, [pc, #268]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <HAL_RCC_OscConfig+0x176>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d001      	beq.n	8008ae6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e1c0      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	4939      	ldr	r1, [pc, #228]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008afa:	e03a      	b.n	8008b72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d020      	beq.n	8008b46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b04:	4b36      	ldr	r3, [pc, #216]	@ (8008be0 <HAL_RCC_OscConfig+0x270>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b0a:	f7fd fb1b 	bl	8006144 <HAL_GetTick>
 8008b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b12:	f7fd fb17 	bl	8006144 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e1a1      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b24:	4b2d      	ldr	r3, [pc, #180]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0f0      	beq.n	8008b12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b30:	4b2a      	ldr	r3, [pc, #168]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	4927      	ldr	r1, [pc, #156]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	600b      	str	r3, [r1, #0]
 8008b44:	e015      	b.n	8008b72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b46:	4b26      	ldr	r3, [pc, #152]	@ (8008be0 <HAL_RCC_OscConfig+0x270>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b4c:	f7fd fafa 	bl	8006144 <HAL_GetTick>
 8008b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b52:	e008      	b.n	8008b66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b54:	f7fd faf6 	bl	8006144 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e180      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b66:	4b1d      	ldr	r3, [pc, #116]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f0      	bne.n	8008b54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0308 	and.w	r3, r3, #8
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d03a      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d019      	beq.n	8008bba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b86:	4b17      	ldr	r3, [pc, #92]	@ (8008be4 <HAL_RCC_OscConfig+0x274>)
 8008b88:	2201      	movs	r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b8c:	f7fd fada 	bl	8006144 <HAL_GetTick>
 8008b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b94:	f7fd fad6 	bl	8006144 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e160      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <HAL_RCC_OscConfig+0x26c>)
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f0      	beq.n	8008b94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	f000 fb00 	bl	80091b8 <RCC_Delay>
 8008bb8:	e01c      	b.n	8008bf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bba:	4b0a      	ldr	r3, [pc, #40]	@ (8008be4 <HAL_RCC_OscConfig+0x274>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bc0:	f7fd fac0 	bl	8006144 <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bc6:	e00f      	b.n	8008be8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bc8:	f7fd fabc 	bl	8006144 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d908      	bls.n	8008be8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e146      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
 8008bda:	bf00      	nop
 8008bdc:	40021000 	.word	0x40021000
 8008be0:	42420000 	.word	0x42420000
 8008be4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008be8:	4b92      	ldr	r3, [pc, #584]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e9      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80a6 	beq.w	8008d4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c06:	4b8b      	ldr	r3, [pc, #556]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10d      	bne.n	8008c2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c12:	4b88      	ldr	r3, [pc, #544]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	4a87      	ldr	r2, [pc, #540]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c1c:	61d3      	str	r3, [r2, #28]
 8008c1e:	4b85      	ldr	r3, [pc, #532]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c26:	60bb      	str	r3, [r7, #8]
 8008c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c2e:	4b82      	ldr	r3, [pc, #520]	@ (8008e38 <HAL_RCC_OscConfig+0x4c8>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d118      	bne.n	8008c6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8008e38 <HAL_RCC_OscConfig+0x4c8>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8008e38 <HAL_RCC_OscConfig+0x4c8>)
 8008c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c46:	f7fd fa7d 	bl	8006144 <HAL_GetTick>
 8008c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c4c:	e008      	b.n	8008c60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c4e:	f7fd fa79 	bl	8006144 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b64      	cmp	r3, #100	@ 0x64
 8008c5a:	d901      	bls.n	8008c60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e103      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c60:	4b75      	ldr	r3, [pc, #468]	@ (8008e38 <HAL_RCC_OscConfig+0x4c8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0f0      	beq.n	8008c4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d106      	bne.n	8008c82 <HAL_RCC_OscConfig+0x312>
 8008c74:	4b6f      	ldr	r3, [pc, #444]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	4a6e      	ldr	r2, [pc, #440]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c7a:	f043 0301 	orr.w	r3, r3, #1
 8008c7e:	6213      	str	r3, [r2, #32]
 8008c80:	e02d      	b.n	8008cde <HAL_RCC_OscConfig+0x36e>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10c      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x334>
 8008c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	4a69      	ldr	r2, [pc, #420]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c90:	f023 0301 	bic.w	r3, r3, #1
 8008c94:	6213      	str	r3, [r2, #32]
 8008c96:	4b67      	ldr	r3, [pc, #412]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	4a66      	ldr	r2, [pc, #408]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008c9c:	f023 0304 	bic.w	r3, r3, #4
 8008ca0:	6213      	str	r3, [r2, #32]
 8008ca2:	e01c      	b.n	8008cde <HAL_RCC_OscConfig+0x36e>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2b05      	cmp	r3, #5
 8008caa:	d10c      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x356>
 8008cac:	4b61      	ldr	r3, [pc, #388]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	4a60      	ldr	r2, [pc, #384]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008cb2:	f043 0304 	orr.w	r3, r3, #4
 8008cb6:	6213      	str	r3, [r2, #32]
 8008cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	6213      	str	r3, [r2, #32]
 8008cc4:	e00b      	b.n	8008cde <HAL_RCC_OscConfig+0x36e>
 8008cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	4a5a      	ldr	r2, [pc, #360]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008ccc:	f023 0301 	bic.w	r3, r3, #1
 8008cd0:	6213      	str	r3, [r2, #32]
 8008cd2:	4b58      	ldr	r3, [pc, #352]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	4a57      	ldr	r2, [pc, #348]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008cd8:	f023 0304 	bic.w	r3, r3, #4
 8008cdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d015      	beq.n	8008d12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ce6:	f7fd fa2d 	bl	8006144 <HAL_GetTick>
 8008cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cec:	e00a      	b.n	8008d04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cee:	f7fd fa29 	bl	8006144 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e0b1      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d04:	4b4b      	ldr	r3, [pc, #300]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0ee      	beq.n	8008cee <HAL_RCC_OscConfig+0x37e>
 8008d10:	e014      	b.n	8008d3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d12:	f7fd fa17 	bl	8006144 <HAL_GetTick>
 8008d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d18:	e00a      	b.n	8008d30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d1a:	f7fd fa13 	bl	8006144 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e09b      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d30:	4b40      	ldr	r3, [pc, #256]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1ee      	bne.n	8008d1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d105      	bne.n	8008d4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d42:	4b3c      	ldr	r3, [pc, #240]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	4a3b      	ldr	r2, [pc, #236]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8087 	beq.w	8008e66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d58:	4b36      	ldr	r3, [pc, #216]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f003 030c 	and.w	r3, r3, #12
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d061      	beq.n	8008e28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d146      	bne.n	8008dfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d6c:	4b33      	ldr	r3, [pc, #204]	@ (8008e3c <HAL_RCC_OscConfig+0x4cc>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d72:	f7fd f9e7 	bl	8006144 <HAL_GetTick>
 8008d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d78:	e008      	b.n	8008d8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d7a:	f7fd f9e3 	bl	8006144 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e06d      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d8c:	4b29      	ldr	r3, [pc, #164]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1f0      	bne.n	8008d7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008da0:	d108      	bne.n	8008db4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008da2:	4b24      	ldr	r3, [pc, #144]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	4921      	ldr	r1, [pc, #132]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008db4:	4b1f      	ldr	r3, [pc, #124]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a19      	ldr	r1, [r3, #32]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	491b      	ldr	r1, [pc, #108]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8008e3c <HAL_RCC_OscConfig+0x4cc>)
 8008dce:	2201      	movs	r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dd2:	f7fd f9b7 	bl	8006144 <HAL_GetTick>
 8008dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008dd8:	e008      	b.n	8008dec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dda:	f7fd f9b3 	bl	8006144 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d901      	bls.n	8008dec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e03d      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008dec:	4b11      	ldr	r3, [pc, #68]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0f0      	beq.n	8008dda <HAL_RCC_OscConfig+0x46a>
 8008df8:	e035      	b.n	8008e66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dfa:	4b10      	ldr	r3, [pc, #64]	@ (8008e3c <HAL_RCC_OscConfig+0x4cc>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e00:	f7fd f9a0 	bl	8006144 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e08:	f7fd f99c 	bl	8006144 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e026      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e1a:	4b06      	ldr	r3, [pc, #24]	@ (8008e34 <HAL_RCC_OscConfig+0x4c4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f0      	bne.n	8008e08 <HAL_RCC_OscConfig+0x498>
 8008e26:	e01e      	b.n	8008e66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d107      	bne.n	8008e40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e019      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
 8008e34:	40021000 	.word	0x40021000
 8008e38:	40007000 	.word	0x40007000
 8008e3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008e40:	4b0b      	ldr	r3, [pc, #44]	@ (8008e70 <HAL_RCC_OscConfig+0x500>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a1b      	ldr	r3, [r3, #32]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d106      	bne.n	8008e62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d001      	beq.n	8008e66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	40021000 	.word	0x40021000

08008e74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e0d0      	b.n	800902a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e88:	4b6a      	ldr	r3, [pc, #424]	@ (8009034 <HAL_RCC_ClockConfig+0x1c0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d910      	bls.n	8008eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e96:	4b67      	ldr	r3, [pc, #412]	@ (8009034 <HAL_RCC_ClockConfig+0x1c0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f023 0207 	bic.w	r2, r3, #7
 8008e9e:	4965      	ldr	r1, [pc, #404]	@ (8009034 <HAL_RCC_ClockConfig+0x1c0>)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ea6:	4b63      	ldr	r3, [pc, #396]	@ (8009034 <HAL_RCC_ClockConfig+0x1c0>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d001      	beq.n	8008eb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e0b8      	b.n	800902a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0302 	and.w	r3, r3, #2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d020      	beq.n	8008f06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ed0:	4b59      	ldr	r3, [pc, #356]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	4a58      	ldr	r2, [pc, #352]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008ed6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008eda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ee8:	4b53      	ldr	r3, [pc, #332]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	4a52      	ldr	r2, [pc, #328]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008eee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008ef2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ef4:	4b50      	ldr	r3, [pc, #320]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	494d      	ldr	r1, [pc, #308]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d040      	beq.n	8008f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d107      	bne.n	8008f2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f1a:	4b47      	ldr	r3, [pc, #284]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d115      	bne.n	8008f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e07f      	b.n	800902a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d107      	bne.n	8008f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f32:	4b41      	ldr	r3, [pc, #260]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e073      	b.n	800902a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f42:	4b3d      	ldr	r3, [pc, #244]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e06b      	b.n	800902a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f52:	4b39      	ldr	r3, [pc, #228]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f023 0203 	bic.w	r2, r3, #3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	4936      	ldr	r1, [pc, #216]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f64:	f7fd f8ee 	bl	8006144 <HAL_GetTick>
 8008f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f6a:	e00a      	b.n	8008f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f6c:	f7fd f8ea 	bl	8006144 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d901      	bls.n	8008f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e053      	b.n	800902a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f82:	4b2d      	ldr	r3, [pc, #180]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f003 020c 	and.w	r2, r3, #12
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d1eb      	bne.n	8008f6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f94:	4b27      	ldr	r3, [pc, #156]	@ (8009034 <HAL_RCC_ClockConfig+0x1c0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d210      	bcs.n	8008fc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fa2:	4b24      	ldr	r3, [pc, #144]	@ (8009034 <HAL_RCC_ClockConfig+0x1c0>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f023 0207 	bic.w	r2, r3, #7
 8008faa:	4922      	ldr	r1, [pc, #136]	@ (8009034 <HAL_RCC_ClockConfig+0x1c0>)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fb2:	4b20      	ldr	r3, [pc, #128]	@ (8009034 <HAL_RCC_ClockConfig+0x1c0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d001      	beq.n	8008fc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e032      	b.n	800902a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fd0:	4b19      	ldr	r3, [pc, #100]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	4916      	ldr	r1, [pc, #88]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d009      	beq.n	8009002 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008fee:	4b12      	ldr	r3, [pc, #72]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	00db      	lsls	r3, r3, #3
 8008ffc:	490e      	ldr	r1, [pc, #56]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009002:	f000 f821 	bl	8009048 <HAL_RCC_GetSysClockFreq>
 8009006:	4602      	mov	r2, r0
 8009008:	4b0b      	ldr	r3, [pc, #44]	@ (8009038 <HAL_RCC_ClockConfig+0x1c4>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	490a      	ldr	r1, [pc, #40]	@ (800903c <HAL_RCC_ClockConfig+0x1c8>)
 8009014:	5ccb      	ldrb	r3, [r1, r3]
 8009016:	fa22 f303 	lsr.w	r3, r2, r3
 800901a:	4a09      	ldr	r2, [pc, #36]	@ (8009040 <HAL_RCC_ClockConfig+0x1cc>)
 800901c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800901e:	4b09      	ldr	r3, [pc, #36]	@ (8009044 <HAL_RCC_ClockConfig+0x1d0>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4618      	mov	r0, r3
 8009024:	f7f8 fd70 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	40022000 	.word	0x40022000
 8009038:	40021000 	.word	0x40021000
 800903c:	0800f978 	.word	0x0800f978
 8009040:	20000000 	.word	0x20000000
 8009044:	20000028 	.word	0x20000028

08009048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	2300      	movs	r3, #0
 8009054:	60bb      	str	r3, [r7, #8]
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	2300      	movs	r3, #0
 800905c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009062:	4b1e      	ldr	r3, [pc, #120]	@ (80090dc <HAL_RCC_GetSysClockFreq+0x94>)
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 030c 	and.w	r3, r3, #12
 800906e:	2b04      	cmp	r3, #4
 8009070:	d002      	beq.n	8009078 <HAL_RCC_GetSysClockFreq+0x30>
 8009072:	2b08      	cmp	r3, #8
 8009074:	d003      	beq.n	800907e <HAL_RCC_GetSysClockFreq+0x36>
 8009076:	e027      	b.n	80090c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009078:	4b19      	ldr	r3, [pc, #100]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800907a:	613b      	str	r3, [r7, #16]
      break;
 800907c:	e027      	b.n	80090ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	0c9b      	lsrs	r3, r3, #18
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	4a17      	ldr	r2, [pc, #92]	@ (80090e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009088:	5cd3      	ldrb	r3, [r2, r3]
 800908a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d010      	beq.n	80090b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009096:	4b11      	ldr	r3, [pc, #68]	@ (80090dc <HAL_RCC_GetSysClockFreq+0x94>)
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	0c5b      	lsrs	r3, r3, #17
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	4a11      	ldr	r2, [pc, #68]	@ (80090e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80090a2:	5cd3      	ldrb	r3, [r2, r3]
 80090a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a0d      	ldr	r2, [pc, #52]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80090aa:	fb03 f202 	mul.w	r2, r3, r2
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	e004      	b.n	80090c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a0c      	ldr	r2, [pc, #48]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80090bc:	fb02 f303 	mul.w	r3, r2, r3
 80090c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	613b      	str	r3, [r7, #16]
      break;
 80090c6:	e002      	b.n	80090ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80090c8:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80090ca:	613b      	str	r3, [r7, #16]
      break;
 80090cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090ce:	693b      	ldr	r3, [r7, #16]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	371c      	adds	r7, #28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40021000 	.word	0x40021000
 80090e0:	00f42400 	.word	0x00f42400
 80090e4:	0800f990 	.word	0x0800f990
 80090e8:	0800f9a0 	.word	0x0800f9a0
 80090ec:	003d0900 	.word	0x003d0900
 80090f0:	007a1200 	.word	0x007a1200

080090f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090f8:	4b02      	ldr	r3, [pc, #8]	@ (8009104 <HAL_RCC_GetHCLKFreq+0x10>)
 80090fa:	681b      	ldr	r3, [r3, #0]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	bc80      	pop	{r7}
 8009102:	4770      	bx	lr
 8009104:	20000000 	.word	0x20000000

08009108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800910c:	f7ff fff2 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 8009110:	4602      	mov	r2, r0
 8009112:	4b05      	ldr	r3, [pc, #20]	@ (8009128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	0a1b      	lsrs	r3, r3, #8
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	4903      	ldr	r1, [pc, #12]	@ (800912c <HAL_RCC_GetPCLK1Freq+0x24>)
 800911e:	5ccb      	ldrb	r3, [r1, r3]
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009124:	4618      	mov	r0, r3
 8009126:	bd80      	pop	{r7, pc}
 8009128:	40021000 	.word	0x40021000
 800912c:	0800f988 	.word	0x0800f988

08009130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009134:	f7ff ffde 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 8009138:	4602      	mov	r2, r0
 800913a:	4b05      	ldr	r3, [pc, #20]	@ (8009150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	0adb      	lsrs	r3, r3, #11
 8009140:	f003 0307 	and.w	r3, r3, #7
 8009144:	4903      	ldr	r1, [pc, #12]	@ (8009154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009146:	5ccb      	ldrb	r3, [r1, r3]
 8009148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800914c:	4618      	mov	r0, r3
 800914e:	bd80      	pop	{r7, pc}
 8009150:	40021000 	.word	0x40021000
 8009154:	0800f988 	.word	0x0800f988

08009158 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	220f      	movs	r2, #15
 8009166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009168:	4b11      	ldr	r3, [pc, #68]	@ (80091b0 <HAL_RCC_GetClockConfig+0x58>)
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f003 0203 	and.w	r2, r3, #3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009174:	4b0e      	ldr	r3, [pc, #56]	@ (80091b0 <HAL_RCC_GetClockConfig+0x58>)
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009180:	4b0b      	ldr	r3, [pc, #44]	@ (80091b0 <HAL_RCC_GetClockConfig+0x58>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800918c:	4b08      	ldr	r3, [pc, #32]	@ (80091b0 <HAL_RCC_GetClockConfig+0x58>)
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	08db      	lsrs	r3, r3, #3
 8009192:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800919a:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <HAL_RCC_GetClockConfig+0x5c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0207 	and.w	r2, r3, #7
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr
 80091b0:	40021000 	.word	0x40021000
 80091b4:	40022000 	.word	0x40022000

080091b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80091c0:	4b0a      	ldr	r3, [pc, #40]	@ (80091ec <RCC_Delay+0x34>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a0a      	ldr	r2, [pc, #40]	@ (80091f0 <RCC_Delay+0x38>)
 80091c6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ca:	0a5b      	lsrs	r3, r3, #9
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	fb02 f303 	mul.w	r3, r2, r3
 80091d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80091d4:	bf00      	nop
  }
  while (Delay --);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	1e5a      	subs	r2, r3, #1
 80091da:	60fa      	str	r2, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1f9      	bne.n	80091d4 <RCC_Delay+0x1c>
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bc80      	pop	{r7}
 80091ea:	4770      	bx	lr
 80091ec:	20000000 	.word	0x20000000
 80091f0:	10624dd3 	.word	0x10624dd3

080091f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d07d      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009214:	4b4f      	ldr	r3, [pc, #316]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10d      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009220:	4b4c      	ldr	r3, [pc, #304]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	4a4b      	ldr	r2, [pc, #300]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800922a:	61d3      	str	r3, [r2, #28]
 800922c:	4b49      	ldr	r3, [pc, #292]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009234:	60bb      	str	r3, [r7, #8]
 8009236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009238:	2301      	movs	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800923c:	4b46      	ldr	r3, [pc, #280]	@ (8009358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009244:	2b00      	cmp	r3, #0
 8009246:	d118      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009248:	4b43      	ldr	r3, [pc, #268]	@ (8009358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a42      	ldr	r2, [pc, #264]	@ (8009358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800924e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009254:	f7fc ff76 	bl	8006144 <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800925a:	e008      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800925c:	f7fc ff72 	bl	8006144 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b64      	cmp	r3, #100	@ 0x64
 8009268:	d901      	bls.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e06d      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800926e:	4b3a      	ldr	r3, [pc, #232]	@ (8009358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f0      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800927a:	4b36      	ldr	r3, [pc, #216]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009282:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d02e      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	429a      	cmp	r2, r3
 8009296:	d027      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009298:	4b2e      	ldr	r3, [pc, #184]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80092a2:	4b2e      	ldr	r3, [pc, #184]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80092a4:	2201      	movs	r2, #1
 80092a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80092a8:	4b2c      	ldr	r3, [pc, #176]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80092ae:	4a29      	ldr	r2, [pc, #164]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d014      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092be:	f7fc ff41 	bl	8006144 <HAL_GetTick>
 80092c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092c4:	e00a      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092c6:	f7fc ff3d 	bl	8006144 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d901      	bls.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e036      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0ee      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	4917      	ldr	r1, [pc, #92]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d105      	bne.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009300:	4b14      	ldr	r3, [pc, #80]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	4a13      	ldr	r2, [pc, #76]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800930a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d008      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009318:	4b0e      	ldr	r3, [pc, #56]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	490b      	ldr	r1, [pc, #44]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009326:	4313      	orrs	r3, r2
 8009328:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0310 	and.w	r3, r3, #16
 8009332:	2b00      	cmp	r3, #0
 8009334:	d008      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009336:	4b07      	ldr	r3, [pc, #28]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	4904      	ldr	r1, [pc, #16]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009344:	4313      	orrs	r3, r2
 8009346:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	40021000 	.word	0x40021000
 8009358:	40007000 	.word	0x40007000
 800935c:	42420440 	.word	0x42420440

08009360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e041      	b.n	80093f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d106      	bne.n	800938c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7f8 fe02 	bl	8001f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3304      	adds	r3, #4
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f000 f9fa 	bl	8009798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b01      	cmp	r3, #1
 8009412:	d001      	beq.n	8009418 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e03c      	b.n	8009492 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a1d      	ldr	r2, [pc, #116]	@ (800949c <HAL_TIM_Base_Start+0x9c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d018      	beq.n	800945c <HAL_TIM_Base_Start+0x5c>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a1c      	ldr	r2, [pc, #112]	@ (80094a0 <HAL_TIM_Base_Start+0xa0>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <HAL_TIM_Base_Start+0x5c>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943c:	d00e      	beq.n	800945c <HAL_TIM_Base_Start+0x5c>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a18      	ldr	r2, [pc, #96]	@ (80094a4 <HAL_TIM_Base_Start+0xa4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d009      	beq.n	800945c <HAL_TIM_Base_Start+0x5c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a16      	ldr	r2, [pc, #88]	@ (80094a8 <HAL_TIM_Base_Start+0xa8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_TIM_Base_Start+0x5c>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a15      	ldr	r2, [pc, #84]	@ (80094ac <HAL_TIM_Base_Start+0xac>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d111      	bne.n	8009480 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b06      	cmp	r3, #6
 800946c:	d010      	beq.n	8009490 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 0201 	orr.w	r2, r2, #1
 800947c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800947e:	e007      	b.n	8009490 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0201 	orr.w	r2, r2, #1
 800948e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	bc80      	pop	{r7}
 800949a:	4770      	bx	lr
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40013400 	.word	0x40013400
 80094a4:	40000400 	.word	0x40000400
 80094a8:	40000800 	.word	0x40000800
 80094ac:	40000c00 	.word	0x40000c00

080094b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d001      	beq.n	80094c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e044      	b.n	8009552 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1d      	ldr	r2, [pc, #116]	@ (800955c <HAL_TIM_Base_Start_IT+0xac>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d018      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009560 <HAL_TIM_Base_Start_IT+0xb0>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d013      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094fc:	d00e      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a18      	ldr	r2, [pc, #96]	@ (8009564 <HAL_TIM_Base_Start_IT+0xb4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d009      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a16      	ldr	r2, [pc, #88]	@ (8009568 <HAL_TIM_Base_Start_IT+0xb8>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d004      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a15      	ldr	r2, [pc, #84]	@ (800956c <HAL_TIM_Base_Start_IT+0xbc>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d111      	bne.n	8009540 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b06      	cmp	r3, #6
 800952c:	d010      	beq.n	8009550 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0201 	orr.w	r2, r2, #1
 800953c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800953e:	e007      	b.n	8009550 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f042 0201 	orr.w	r2, r2, #1
 800954e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr
 800955c:	40012c00 	.word	0x40012c00
 8009560:	40013400 	.word	0x40013400
 8009564:	40000400 	.word	0x40000400
 8009568:	40000800 	.word	0x40000800
 800956c:	40000c00 	.word	0x40000c00

08009570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d020      	beq.n	80095d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01b      	beq.n	80095d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f06f 0202 	mvn.w	r2, #2
 80095a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	f003 0303 	and.w	r3, r3, #3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f8d1 	bl	8009762 <HAL_TIM_IC_CaptureCallback>
 80095c0:	e005      	b.n	80095ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f8c4 	bl	8009750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f8d3 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	f003 0304 	and.w	r3, r3, #4
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d020      	beq.n	8009620 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d01b      	beq.n	8009620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f06f 0204 	mvn.w	r2, #4
 80095f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f8ab 	bl	8009762 <HAL_TIM_IC_CaptureCallback>
 800960c:	e005      	b.n	800961a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f89e 	bl	8009750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f8ad 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f003 0308 	and.w	r3, r3, #8
 8009626:	2b00      	cmp	r3, #0
 8009628:	d020      	beq.n	800966c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b00      	cmp	r3, #0
 8009632:	d01b      	beq.n	800966c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f06f 0208 	mvn.w	r2, #8
 800963c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2204      	movs	r2, #4
 8009642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	f003 0303 	and.w	r3, r3, #3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f885 	bl	8009762 <HAL_TIM_IC_CaptureCallback>
 8009658:	e005      	b.n	8009666 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f878 	bl	8009750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f887 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f003 0310 	and.w	r3, r3, #16
 8009672:	2b00      	cmp	r3, #0
 8009674:	d020      	beq.n	80096b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f003 0310 	and.w	r3, r3, #16
 800967c:	2b00      	cmp	r3, #0
 800967e:	d01b      	beq.n	80096b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f06f 0210 	mvn.w	r2, #16
 8009688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2208      	movs	r2, #8
 800968e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f85f 	bl	8009762 <HAL_TIM_IC_CaptureCallback>
 80096a4:	e005      	b.n	80096b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f852 	bl	8009750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f861 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00c      	beq.n	80096dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d007      	beq.n	80096dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0201 	mvn.w	r2, #1
 80096d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7f8 f9c6 	bl	8001a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00c      	beq.n	8009700 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d007      	beq.n	8009700 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80096f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f947 	bl	800998e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00c      	beq.n	8009724 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800971c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f831 	bl	8009786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00c      	beq.n	8009748 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f003 0320 	and.w	r3, r3, #32
 8009734:	2b00      	cmp	r3, #0
 8009736:	d007      	beq.n	8009748 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 0220 	mvn.w	r2, #32
 8009740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f91a 	bl	800997c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr

08009762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	bc80      	pop	{r7}
 8009772:	4770      	bx	lr

08009774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	bc80      	pop	{r7}
 8009784:	4770      	bx	lr

08009786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800978e:	bf00      	nop
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	bc80      	pop	{r7}
 8009796:	4770      	bx	lr

08009798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a39      	ldr	r2, [pc, #228]	@ (8009890 <TIM_Base_SetConfig+0xf8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d013      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a38      	ldr	r2, [pc, #224]	@ (8009894 <TIM_Base_SetConfig+0xfc>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00f      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097be:	d00b      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a35      	ldr	r2, [pc, #212]	@ (8009898 <TIM_Base_SetConfig+0x100>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d007      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a34      	ldr	r2, [pc, #208]	@ (800989c <TIM_Base_SetConfig+0x104>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d003      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a33      	ldr	r2, [pc, #204]	@ (80098a0 <TIM_Base_SetConfig+0x108>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d108      	bne.n	80097ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a28      	ldr	r2, [pc, #160]	@ (8009890 <TIM_Base_SetConfig+0xf8>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d013      	beq.n	800981a <TIM_Base_SetConfig+0x82>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a27      	ldr	r2, [pc, #156]	@ (8009894 <TIM_Base_SetConfig+0xfc>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00f      	beq.n	800981a <TIM_Base_SetConfig+0x82>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009800:	d00b      	beq.n	800981a <TIM_Base_SetConfig+0x82>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a24      	ldr	r2, [pc, #144]	@ (8009898 <TIM_Base_SetConfig+0x100>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d007      	beq.n	800981a <TIM_Base_SetConfig+0x82>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a23      	ldr	r2, [pc, #140]	@ (800989c <TIM_Base_SetConfig+0x104>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d003      	beq.n	800981a <TIM_Base_SetConfig+0x82>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a22      	ldr	r2, [pc, #136]	@ (80098a0 <TIM_Base_SetConfig+0x108>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d108      	bne.n	800982c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	4313      	orrs	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a0f      	ldr	r2, [pc, #60]	@ (8009890 <TIM_Base_SetConfig+0xf8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d003      	beq.n	8009860 <TIM_Base_SetConfig+0xc8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a0e      	ldr	r2, [pc, #56]	@ (8009894 <TIM_Base_SetConfig+0xfc>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d103      	bne.n	8009868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	691a      	ldr	r2, [r3, #16]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f023 0201 	bic.w	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	611a      	str	r2, [r3, #16]
  }
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr
 8009890:	40012c00 	.word	0x40012c00
 8009894:	40013400 	.word	0x40013400
 8009898:	40000400 	.word	0x40000400
 800989c:	40000800 	.word	0x40000800
 80098a0:	40000c00 	.word	0x40000c00

080098a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d101      	bne.n	80098bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098b8:	2302      	movs	r3, #2
 80098ba:	e050      	b.n	800995e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2202      	movs	r2, #2
 80098c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009968 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d018      	beq.n	8009932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a19      	ldr	r2, [pc, #100]	@ (800996c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d013      	beq.n	8009932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009912:	d00e      	beq.n	8009932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a15      	ldr	r2, [pc, #84]	@ (8009970 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d009      	beq.n	8009932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a14      	ldr	r2, [pc, #80]	@ (8009974 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d004      	beq.n	8009932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a12      	ldr	r2, [pc, #72]	@ (8009978 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d10c      	bne.n	800994c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	4313      	orrs	r3, r2
 8009942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	bc80      	pop	{r7}
 8009966:	4770      	bx	lr
 8009968:	40012c00 	.word	0x40012c00
 800996c:	40013400 	.word	0x40013400
 8009970:	40000400 	.word	0x40000400
 8009974:	40000800 	.word	0x40000800
 8009978:	40000c00 	.word	0x40000c00

0800997c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	bc80      	pop	{r7}
 800998c:	4770      	bx	lr

0800998e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	bc80      	pop	{r7}
 800999e:	4770      	bx	lr

080099a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e042      	b.n	8009a38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7f8 fb4e 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2224      	movs	r2, #36	@ 0x24
 80099d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f82b 	bl	8009a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	691a      	ldr	r2, [r3, #16]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	695a      	ldr	r2, [r3, #20]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689a      	ldr	r2, [r3, #8]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009a7a:	f023 030c 	bic.w	r3, r3, #12
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6812      	ldr	r2, [r2, #0]
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	430b      	orrs	r3, r1
 8009a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8009b54 <UART_SetConfig+0x114>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d103      	bne.n	8009ab0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009aa8:	f7ff fb42 	bl	8009130 <HAL_RCC_GetPCLK2Freq>
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	e002      	b.n	8009ab6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009ab0:	f7ff fb2a 	bl	8009108 <HAL_RCC_GetPCLK1Freq>
 8009ab4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009a      	lsls	r2, r3, #2
 8009ac0:	441a      	add	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009acc:	4a22      	ldr	r2, [pc, #136]	@ (8009b58 <UART_SetConfig+0x118>)
 8009ace:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad2:	095b      	lsrs	r3, r3, #5
 8009ad4:	0119      	lsls	r1, r3, #4
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009a      	lsls	r2, r3, #2
 8009ae0:	441a      	add	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009aec:	4b1a      	ldr	r3, [pc, #104]	@ (8009b58 <UART_SetConfig+0x118>)
 8009aee:	fba3 0302 	umull	r0, r3, r3, r2
 8009af2:	095b      	lsrs	r3, r3, #5
 8009af4:	2064      	movs	r0, #100	@ 0x64
 8009af6:	fb00 f303 	mul.w	r3, r0, r3
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	011b      	lsls	r3, r3, #4
 8009afe:	3332      	adds	r3, #50	@ 0x32
 8009b00:	4a15      	ldr	r2, [pc, #84]	@ (8009b58 <UART_SetConfig+0x118>)
 8009b02:	fba2 2303 	umull	r2, r3, r2, r3
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b0c:	4419      	add	r1, r3
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	009a      	lsls	r2, r3, #2
 8009b18:	441a      	add	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b24:	4b0c      	ldr	r3, [pc, #48]	@ (8009b58 <UART_SetConfig+0x118>)
 8009b26:	fba3 0302 	umull	r0, r3, r3, r2
 8009b2a:	095b      	lsrs	r3, r3, #5
 8009b2c:	2064      	movs	r0, #100	@ 0x64
 8009b2e:	fb00 f303 	mul.w	r3, r0, r3
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	011b      	lsls	r3, r3, #4
 8009b36:	3332      	adds	r3, #50	@ 0x32
 8009b38:	4a07      	ldr	r2, [pc, #28]	@ (8009b58 <UART_SetConfig+0x118>)
 8009b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	f003 020f 	and.w	r2, r3, #15
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	440a      	add	r2, r1
 8009b4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009b4c:	bf00      	nop
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	40013800 	.word	0x40013800
 8009b58:	51eb851f 	.word	0x51eb851f

08009b5c <__NVIC_SetPriority>:
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	6039      	str	r1, [r7, #0]
 8009b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	db0a      	blt.n	8009b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	490c      	ldr	r1, [pc, #48]	@ (8009ba8 <__NVIC_SetPriority+0x4c>)
 8009b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b7a:	0112      	lsls	r2, r2, #4
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	440b      	add	r3, r1
 8009b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009b84:	e00a      	b.n	8009b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	4908      	ldr	r1, [pc, #32]	@ (8009bac <__NVIC_SetPriority+0x50>)
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	f003 030f 	and.w	r3, r3, #15
 8009b92:	3b04      	subs	r3, #4
 8009b94:	0112      	lsls	r2, r2, #4
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	440b      	add	r3, r1
 8009b9a:	761a      	strb	r2, [r3, #24]
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	e000e100 	.word	0xe000e100
 8009bac:	e000ed00 	.word	0xe000ed00

08009bb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bb4:	4b05      	ldr	r3, [pc, #20]	@ (8009bcc <SysTick_Handler+0x1c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009bb8:	f001 fd9c 	bl	800b6f4 <xTaskGetSchedulerState>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d001      	beq.n	8009bc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009bc2:	f002 fc01 	bl	800c3c8 <xPortSysTickHandler>
  }
}
 8009bc6:	bf00      	nop
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	e000e010 	.word	0xe000e010

08009bd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	f06f 0004 	mvn.w	r0, #4
 8009bda:	f7ff ffbf 	bl	8009b5c <__NVIC_SetPriority>
#endif
}
 8009bde:	bf00      	nop
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bea:	f3ef 8305 	mrs	r3, IPSR
 8009bee:	603b      	str	r3, [r7, #0]
  return(result);
 8009bf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009bf6:	f06f 0305 	mvn.w	r3, #5
 8009bfa:	607b      	str	r3, [r7, #4]
 8009bfc:	e00c      	b.n	8009c18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009bfe:	4b09      	ldr	r3, [pc, #36]	@ (8009c24 <osKernelInitialize+0x40>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d105      	bne.n	8009c12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c06:	4b07      	ldr	r3, [pc, #28]	@ (8009c24 <osKernelInitialize+0x40>)
 8009c08:	2201      	movs	r2, #1
 8009c0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	607b      	str	r3, [r7, #4]
 8009c10:	e002      	b.n	8009c18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295
 8009c16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c18:	687b      	ldr	r3, [r7, #4]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr
 8009c24:	20000610 	.word	0x20000610

08009c28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c2e:	f3ef 8305 	mrs	r3, IPSR
 8009c32:	603b      	str	r3, [r7, #0]
  return(result);
 8009c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c3a:	f06f 0305 	mvn.w	r3, #5
 8009c3e:	607b      	str	r3, [r7, #4]
 8009c40:	e010      	b.n	8009c64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c42:	4b0b      	ldr	r3, [pc, #44]	@ (8009c70 <osKernelStart+0x48>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d109      	bne.n	8009c5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c4a:	f7ff ffc1 	bl	8009bd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c4e:	4b08      	ldr	r3, [pc, #32]	@ (8009c70 <osKernelStart+0x48>)
 8009c50:	2202      	movs	r2, #2
 8009c52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c54:	f001 f902 	bl	800ae5c <vTaskStartScheduler>
      stat = osOK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	607b      	str	r3, [r7, #4]
 8009c5c:	e002      	b.n	8009c64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c64:	687b      	ldr	r3, [r7, #4]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000610 	.word	0x20000610

08009c74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08e      	sub	sp, #56	@ 0x38
 8009c78:	af04      	add	r7, sp, #16
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c80:	2300      	movs	r3, #0
 8009c82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c84:	f3ef 8305 	mrs	r3, IPSR
 8009c88:	617b      	str	r3, [r7, #20]
  return(result);
 8009c8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d17e      	bne.n	8009d8e <osThreadNew+0x11a>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d07b      	beq.n	8009d8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009c96:	2380      	movs	r3, #128	@ 0x80
 8009c98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009c9a:	2318      	movs	r3, #24
 8009c9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d045      	beq.n	8009d3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <osThreadNew+0x48>
        name = attr->name;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d008      	beq.n	8009ce2 <osThreadNew+0x6e>
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	2b38      	cmp	r3, #56	@ 0x38
 8009cd4:	d805      	bhi.n	8009ce2 <osThreadNew+0x6e>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <osThreadNew+0x72>
        return (NULL);
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e054      	b.n	8009d90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	089b      	lsrs	r3, r3, #2
 8009cf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00e      	beq.n	8009d1c <osThreadNew+0xa8>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	2b5b      	cmp	r3, #91	@ 0x5b
 8009d04:	d90a      	bls.n	8009d1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d006      	beq.n	8009d1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <osThreadNew+0xa8>
        mem = 1;
 8009d16:	2301      	movs	r3, #1
 8009d18:	61bb      	str	r3, [r7, #24]
 8009d1a:	e010      	b.n	8009d3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10c      	bne.n	8009d3e <osThreadNew+0xca>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d108      	bne.n	8009d3e <osThreadNew+0xca>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d104      	bne.n	8009d3e <osThreadNew+0xca>
          mem = 0;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61bb      	str	r3, [r7, #24]
 8009d38:	e001      	b.n	8009d3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d110      	bne.n	8009d66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d4c:	9202      	str	r2, [sp, #8]
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	6a3a      	ldr	r2, [r7, #32]
 8009d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 fea2 	bl	800aaa4 <xTaskCreateStatic>
 8009d60:	4603      	mov	r3, r0
 8009d62:	613b      	str	r3, [r7, #16]
 8009d64:	e013      	b.n	8009d8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d110      	bne.n	8009d8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	f107 0310 	add.w	r3, r7, #16
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fef0 	bl	800ab64 <xTaskCreate>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d001      	beq.n	8009d8e <osThreadNew+0x11a>
            hTask = NULL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d8e:	693b      	ldr	r3, [r7, #16]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3728      	adds	r7, #40	@ 0x28
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da0:	f3ef 8305 	mrs	r3, IPSR
 8009da4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009da6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <osDelay+0x1c>
    stat = osErrorISR;
 8009dac:	f06f 0305 	mvn.w	r3, #5
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	e007      	b.n	8009dc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 f816 	bl	800adf0 <vTaskDelay>
    }
  }

  return (stat);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f002 f964 	bl	800c0a4 <pvTimerGetTimerID>
 8009ddc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d005      	beq.n	8009df0 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	6852      	ldr	r2, [r2, #4]
 8009dec:	4610      	mov	r0, r2
 8009dee:	4798      	blx	r3
  }
}
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08c      	sub	sp, #48	@ 0x30
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	607a      	str	r2, [r7, #4]
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	460b      	mov	r3, r1
 8009e06:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e0c:	f3ef 8305 	mrs	r3, IPSR
 8009e10:	613b      	str	r3, [r7, #16]
  return(result);
 8009e12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d163      	bne.n	8009ee0 <osTimerNew+0xe8>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d060      	beq.n	8009ee0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009e1e:	2008      	movs	r0, #8
 8009e20:	f002 fb56 	bl	800c4d0 <pvPortMalloc>
 8009e24:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d059      	beq.n	8009ee0 <osTimerNew+0xe8>
      callb->func = func;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009e38:	7afb      	ldrb	r3, [r7, #11]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d102      	bne.n	8009e44 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	e001      	b.n	8009e48 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009e44:	2301      	movs	r3, #1
 8009e46:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009e48:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d01c      	beq.n	8009e92 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <osTimerNew+0x6e>
          name = attr->name;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d006      	beq.n	8009e7c <osTimerNew+0x84>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e74:	d902      	bls.n	8009e7c <osTimerNew+0x84>
          mem = 1;
 8009e76:	2301      	movs	r3, #1
 8009e78:	61bb      	str	r3, [r7, #24]
 8009e7a:	e00c      	b.n	8009e96 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d108      	bne.n	8009e96 <osTimerNew+0x9e>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <osTimerNew+0x9e>
            mem = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	61bb      	str	r3, [r7, #24]
 8009e90:	e001      	b.n	8009e96 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d10c      	bne.n	8009eb6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	4b12      	ldr	r3, [pc, #72]	@ (8009eec <osTimerNew+0xf4>)
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	2101      	movs	r1, #1
 8009eac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009eae:	f001 fd6e 	bl	800b98e <xTimerCreateStatic>
 8009eb2:	6238      	str	r0, [r7, #32]
 8009eb4:	e00b      	b.n	8009ece <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d108      	bne.n	8009ece <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <osTimerNew+0xf4>)
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	69fa      	ldr	r2, [r7, #28]
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009ec8:	f001 fd40 	bl	800b94c <xTimerCreate>
 8009ecc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d105      	bne.n	8009ee0 <osTimerNew+0xe8>
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <osTimerNew+0xe8>
        vPortFree (callb);
 8009eda:	6978      	ldr	r0, [r7, #20]
 8009edc:	f002 fbc6 	bl	800c66c <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3728      	adds	r7, #40	@ 0x28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	08009dcf 	.word	0x08009dcf

08009ef0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4a06      	ldr	r2, [pc, #24]	@ (8009f18 <vApplicationGetIdleTaskMemory+0x28>)
 8009f00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	4a05      	ldr	r2, [pc, #20]	@ (8009f1c <vApplicationGetIdleTaskMemory+0x2c>)
 8009f06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2280      	movs	r2, #128	@ 0x80
 8009f0c:	601a      	str	r2, [r3, #0]
}
 8009f0e:	bf00      	nop
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bc80      	pop	{r7}
 8009f16:	4770      	bx	lr
 8009f18:	20000614 	.word	0x20000614
 8009f1c:	20000670 	.word	0x20000670

08009f20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4a07      	ldr	r2, [pc, #28]	@ (8009f4c <vApplicationGetTimerTaskMemory+0x2c>)
 8009f30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	4a06      	ldr	r2, [pc, #24]	@ (8009f50 <vApplicationGetTimerTaskMemory+0x30>)
 8009f36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f3e:	601a      	str	r2, [r3, #0]
}
 8009f40:	bf00      	nop
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bc80      	pop	{r7}
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	20000870 	.word	0x20000870
 8009f50:	200008cc 	.word	0x200008cc

08009f54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f103 0208 	add.w	r2, r3, #8
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f103 0208 	add.w	r2, r3, #8
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f103 0208 	add.w	r2, r3, #8
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc80      	pop	{r7}
 8009f90:	4770      	bx	lr

08009f92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bc80      	pop	{r7}
 8009fa8:	4770      	bx	lr

08009faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009faa:	b480      	push	{r7}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	601a      	str	r2, [r3, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bc80      	pop	{r7}
 8009fee:	4770      	bx	lr

08009ff0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d103      	bne.n	800a010 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	e00c      	b.n	800a02a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3308      	adds	r3, #8
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	e002      	b.n	800a01e <vListInsert+0x2e>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	429a      	cmp	r2, r3
 800a028:	d2f6      	bcs.n	800a018 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	601a      	str	r2, [r3, #0]
}
 800a056:	bf00      	nop
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bc80      	pop	{r7}
 800a05e:	4770      	bx	lr

0800a060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	6892      	ldr	r2, [r2, #8]
 800a076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	6852      	ldr	r2, [r2, #4]
 800a080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d103      	bne.n	800a094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	1e5a      	subs	r2, r3, #1
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bc80      	pop	{r7}
 800a0b0:	4770      	bx	lr
	...

0800a0b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10b      	bne.n	800a0e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0da:	bf00      	nop
 800a0dc:	bf00      	nop
 800a0de:	e7fd      	b.n	800a0dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0e0:	f002 f8f4 	bl	800c2cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0f0:	fb01 f303 	mul.w	r3, r1, r3
 800a0f4:	441a      	add	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a110:	3b01      	subs	r3, #1
 800a112:	68f9      	ldr	r1, [r7, #12]
 800a114:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a116:	fb01 f303 	mul.w	r3, r1, r3
 800a11a:	441a      	add	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	22ff      	movs	r2, #255	@ 0xff
 800a124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	22ff      	movs	r2, #255	@ 0xff
 800a12c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d114      	bne.n	800a160 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d01a      	beq.n	800a174 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3310      	adds	r3, #16
 800a142:	4618      	mov	r0, r3
 800a144:	f001 f916 	bl	800b374 <xTaskRemoveFromEventList>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d012      	beq.n	800a174 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a14e:	4b0d      	ldr	r3, [pc, #52]	@ (800a184 <xQueueGenericReset+0xd0>)
 800a150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a154:	601a      	str	r2, [r3, #0]
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	e009      	b.n	800a174 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3310      	adds	r3, #16
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff fef5 	bl	8009f54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3324      	adds	r3, #36	@ 0x24
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff fef0 	bl	8009f54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a174:	f002 f8da 	bl	800c32c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a178:	2301      	movs	r3, #1
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	e000ed04 	.word	0xe000ed04

0800a188 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08e      	sub	sp, #56	@ 0x38
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10b      	bne.n	800a1b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10b      	bne.n	800a1d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1cc:	bf00      	nop
 800a1ce:	bf00      	nop
 800a1d0:	e7fd      	b.n	800a1ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <xQueueGenericCreateStatic+0x56>
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <xQueueGenericCreateStatic+0x5a>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <xQueueGenericCreateStatic+0x5c>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10b      	bne.n	800a200 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	623b      	str	r3, [r7, #32]
}
 800a1fa:	bf00      	nop
 800a1fc:	bf00      	nop
 800a1fe:	e7fd      	b.n	800a1fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d102      	bne.n	800a20c <xQueueGenericCreateStatic+0x84>
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <xQueueGenericCreateStatic+0x88>
 800a20c:	2301      	movs	r3, #1
 800a20e:	e000      	b.n	800a212 <xQueueGenericCreateStatic+0x8a>
 800a210:	2300      	movs	r3, #0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10b      	bne.n	800a22e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	61fb      	str	r3, [r7, #28]
}
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
 800a22c:	e7fd      	b.n	800a22a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a22e:	2350      	movs	r3, #80	@ 0x50
 800a230:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b50      	cmp	r3, #80	@ 0x50
 800a236:	d00b      	beq.n	800a250 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	61bb      	str	r3, [r7, #24]
}
 800a24a:	bf00      	nop
 800a24c:	bf00      	nop
 800a24e:	e7fd      	b.n	800a24c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a250:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00d      	beq.n	800a278 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a264:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	4613      	mov	r3, r2
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 f805 	bl	800a282 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3730      	adds	r7, #48	@ 0x30
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	607a      	str	r2, [r7, #4]
 800a28e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d103      	bne.n	800a29e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	e002      	b.n	800a2a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	69b8      	ldr	r0, [r7, #24]
 800a2b4:	f7ff fefe 	bl	800a0b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2c0:	bf00      	nop
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08e      	sub	sp, #56	@ 0x38
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10b      	bne.n	800a2fc <xQueueGenericSend+0x34>
	__asm volatile
 800a2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2f6:	bf00      	nop
 800a2f8:	bf00      	nop
 800a2fa:	e7fd      	b.n	800a2f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d103      	bne.n	800a30a <xQueueGenericSend+0x42>
 800a302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <xQueueGenericSend+0x46>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <xQueueGenericSend+0x48>
 800a30e:	2300      	movs	r3, #0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10b      	bne.n	800a32c <xQueueGenericSend+0x64>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a326:	bf00      	nop
 800a328:	bf00      	nop
 800a32a:	e7fd      	b.n	800a328 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d103      	bne.n	800a33a <xQueueGenericSend+0x72>
 800a332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a336:	2b01      	cmp	r3, #1
 800a338:	d101      	bne.n	800a33e <xQueueGenericSend+0x76>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xQueueGenericSend+0x78>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10b      	bne.n	800a35c <xQueueGenericSend+0x94>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	623b      	str	r3, [r7, #32]
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	e7fd      	b.n	800a358 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a35c:	f001 f9ca 	bl	800b6f4 <xTaskGetSchedulerState>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d102      	bne.n	800a36c <xQueueGenericSend+0xa4>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <xQueueGenericSend+0xa8>
 800a36c:	2301      	movs	r3, #1
 800a36e:	e000      	b.n	800a372 <xQueueGenericSend+0xaa>
 800a370:	2300      	movs	r3, #0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10b      	bne.n	800a38e <xQueueGenericSend+0xc6>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	61fb      	str	r3, [r7, #28]
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	e7fd      	b.n	800a38a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a38e:	f001 ff9d 	bl	800c2cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d302      	bcc.n	800a3a4 <xQueueGenericSend+0xdc>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d129      	bne.n	800a3f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3aa:	f000 fa0f 	bl	800a7cc <prvCopyDataToQueue>
 800a3ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d010      	beq.n	800a3da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ba:	3324      	adds	r3, #36	@ 0x24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 ffd9 	bl	800b374 <xTaskRemoveFromEventList>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d013      	beq.n	800a3f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3c8:	4b3f      	ldr	r3, [pc, #252]	@ (800a4c8 <xQueueGenericSend+0x200>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	e00a      	b.n	800a3f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d007      	beq.n	800a3f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3e0:	4b39      	ldr	r3, [pc, #228]	@ (800a4c8 <xQueueGenericSend+0x200>)
 800a3e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3f0:	f001 ff9c 	bl	800c32c <vPortExitCritical>
				return pdPASS;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e063      	b.n	800a4c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d103      	bne.n	800a406 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3fe:	f001 ff95 	bl	800c32c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a402:	2300      	movs	r3, #0
 800a404:	e05c      	b.n	800a4c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d106      	bne.n	800a41a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	4618      	mov	r0, r3
 800a412:	f001 f813 	bl	800b43c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a41a:	f001 ff87 	bl	800c32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a41e:	f000 fd85 	bl	800af2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a422:	f001 ff53 	bl	800c2cc <vPortEnterCritical>
 800a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a432:	d103      	bne.n	800a43c <xQueueGenericSend+0x174>
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a442:	b25b      	sxtb	r3, r3
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d103      	bne.n	800a452 <xQueueGenericSend+0x18a>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a452:	f001 ff6b 	bl	800c32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a456:	1d3a      	adds	r2, r7, #4
 800a458:	f107 0314 	add.w	r3, r7, #20
 800a45c:	4611      	mov	r1, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f001 f802 	bl	800b468 <xTaskCheckForTimeOut>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d124      	bne.n	800a4b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a46a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a46c:	f000 faa6 	bl	800a9bc <prvIsQueueFull>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d018      	beq.n	800a4a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	3310      	adds	r3, #16
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 ff26 	bl	800b2d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a486:	f000 fa31 	bl	800a8ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a48a:	f000 fd5d 	bl	800af48 <xTaskResumeAll>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	f47f af7c 	bne.w	800a38e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a496:	4b0c      	ldr	r3, [pc, #48]	@ (800a4c8 <xQueueGenericSend+0x200>)
 800a498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	e772      	b.n	800a38e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4aa:	f000 fa1f 	bl	800a8ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ae:	f000 fd4b 	bl	800af48 <xTaskResumeAll>
 800a4b2:	e76c      	b.n	800a38e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b6:	f000 fa19 	bl	800a8ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4ba:	f000 fd45 	bl	800af48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3738      	adds	r7, #56	@ 0x38
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b090      	sub	sp, #64	@ 0x40
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10b      	bne.n	800a4fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4f6:	bf00      	nop
 800a4f8:	bf00      	nop
 800a4fa:	e7fd      	b.n	800a4f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d103      	bne.n	800a50a <xQueueGenericSendFromISR+0x3e>
 800a502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <xQueueGenericSendFromISR+0x42>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e000      	b.n	800a510 <xQueueGenericSendFromISR+0x44>
 800a50e:	2300      	movs	r3, #0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10b      	bne.n	800a52c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	e7fd      	b.n	800a528 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d103      	bne.n	800a53a <xQueueGenericSendFromISR+0x6e>
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <xQueueGenericSendFromISR+0x72>
 800a53a:	2301      	movs	r3, #1
 800a53c:	e000      	b.n	800a540 <xQueueGenericSendFromISR+0x74>
 800a53e:	2300      	movs	r3, #0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10b      	bne.n	800a55c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	623b      	str	r3, [r7, #32]
}
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	e7fd      	b.n	800a558 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a55c:	f001 ff78 	bl	800c450 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a560:	f3ef 8211 	mrs	r2, BASEPRI
 800a564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	61fa      	str	r2, [r7, #28]
 800a576:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a578:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a57a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a584:	429a      	cmp	r2, r3
 800a586:	d302      	bcc.n	800a58e <xQueueGenericSendFromISR+0xc2>
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d12f      	bne.n	800a5ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a594:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a59c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	68b9      	ldr	r1, [r7, #8]
 800a5a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a5a4:	f000 f912 	bl	800a7cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b0:	d112      	bne.n	800a5d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d016      	beq.n	800a5e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5bc:	3324      	adds	r3, #36	@ 0x24
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fed8 	bl	800b374 <xTaskRemoveFromEventList>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00e      	beq.n	800a5e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	e007      	b.n	800a5e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a5dc:	3301      	adds	r3, #1
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	b25a      	sxtb	r2, r3
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a5ec:	e001      	b.n	800a5f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a600:	4618      	mov	r0, r3
 800a602:	3740      	adds	r7, #64	@ 0x40
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08c      	sub	sp, #48	@ 0x30
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a614:	2300      	movs	r3, #0
 800a616:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10b      	bne.n	800a63a <xQueueReceive+0x32>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	623b      	str	r3, [r7, #32]
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop
 800a638:	e7fd      	b.n	800a636 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d103      	bne.n	800a648 <xQueueReceive+0x40>
 800a640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <xQueueReceive+0x44>
 800a648:	2301      	movs	r3, #1
 800a64a:	e000      	b.n	800a64e <xQueueReceive+0x46>
 800a64c:	2300      	movs	r3, #0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10b      	bne.n	800a66a <xQueueReceive+0x62>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	61fb      	str	r3, [r7, #28]
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop
 800a668:	e7fd      	b.n	800a666 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a66a:	f001 f843 	bl	800b6f4 <xTaskGetSchedulerState>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xQueueReceive+0x72>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <xQueueReceive+0x76>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <xQueueReceive+0x78>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10b      	bne.n	800a69c <xQueueReceive+0x94>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	61bb      	str	r3, [r7, #24]
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	e7fd      	b.n	800a698 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a69c:	f001 fe16 	bl	800c2cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01f      	beq.n	800a6ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6ac:	68b9      	ldr	r1, [r7, #8]
 800a6ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6b0:	f000 f8f6 	bl	800a8a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b6:	1e5a      	subs	r2, r3, #1
 800a6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00f      	beq.n	800a6e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	3310      	adds	r3, #16
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fe53 	bl	800b374 <xTaskRemoveFromEventList>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d007      	beq.n	800a6e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6d4:	4b3c      	ldr	r3, [pc, #240]	@ (800a7c8 <xQueueReceive+0x1c0>)
 800a6d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6e4:	f001 fe22 	bl	800c32c <vPortExitCritical>
				return pdPASS;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e069      	b.n	800a7c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d103      	bne.n	800a6fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6f2:	f001 fe1b 	bl	800c32c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	e062      	b.n	800a7c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a700:	f107 0310 	add.w	r3, r7, #16
 800a704:	4618      	mov	r0, r3
 800a706:	f000 fe99 	bl	800b43c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a70a:	2301      	movs	r3, #1
 800a70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a70e:	f001 fe0d 	bl	800c32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a712:	f000 fc0b 	bl	800af2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a716:	f001 fdd9 	bl	800c2cc <vPortEnterCritical>
 800a71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a720:	b25b      	sxtb	r3, r3
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d103      	bne.n	800a730 <xQueueReceive+0x128>
 800a728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a736:	b25b      	sxtb	r3, r3
 800a738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73c:	d103      	bne.n	800a746 <xQueueReceive+0x13e>
 800a73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a746:	f001 fdf1 	bl	800c32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a74a:	1d3a      	adds	r2, r7, #4
 800a74c:	f107 0310 	add.w	r3, r7, #16
 800a750:	4611      	mov	r1, r2
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fe88 	bl	800b468 <xTaskCheckForTimeOut>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d123      	bne.n	800a7a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a75e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a760:	f000 f916 	bl	800a990 <prvIsQueueEmpty>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d017      	beq.n	800a79a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76c:	3324      	adds	r3, #36	@ 0x24
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	4611      	mov	r1, r2
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fdac 	bl	800b2d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a77a:	f000 f8b7 	bl	800a8ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a77e:	f000 fbe3 	bl	800af48 <xTaskResumeAll>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d189      	bne.n	800a69c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a788:	4b0f      	ldr	r3, [pc, #60]	@ (800a7c8 <xQueueReceive+0x1c0>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	e780      	b.n	800a69c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a79a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a79c:	f000 f8a6 	bl	800a8ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7a0:	f000 fbd2 	bl	800af48 <xTaskResumeAll>
 800a7a4:	e77a      	b.n	800a69c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7a8:	f000 f8a0 	bl	800a8ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ac:	f000 fbcc 	bl	800af48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7b2:	f000 f8ed 	bl	800a990 <prvIsQueueEmpty>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f43f af6f 	beq.w	800a69c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3730      	adds	r7, #48	@ 0x30
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10d      	bne.n	800a806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d14d      	bne.n	800a88e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 ff9a 	bl	800b730 <xTaskPriorityDisinherit>
 800a7fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	609a      	str	r2, [r3, #8]
 800a804:	e043      	b.n	800a88e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d119      	bne.n	800a840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6858      	ldr	r0, [r3, #4]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a814:	461a      	mov	r2, r3
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	f002 ffe3 	bl	800d7e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a824:	441a      	add	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	429a      	cmp	r2, r3
 800a834:	d32b      	bcc.n	800a88e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	605a      	str	r2, [r3, #4]
 800a83e:	e026      	b.n	800a88e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	68d8      	ldr	r0, [r3, #12]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a848:	461a      	mov	r2, r3
 800a84a:	68b9      	ldr	r1, [r7, #8]
 800a84c:	f002 ffc9 	bl	800d7e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	68da      	ldr	r2, [r3, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a858:	425b      	negs	r3, r3
 800a85a:	441a      	add	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68da      	ldr	r2, [r3, #12]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d207      	bcs.n	800a87c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	689a      	ldr	r2, [r3, #8]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a874:	425b      	negs	r3, r3
 800a876:	441a      	add	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d105      	bne.n	800a88e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a896:	697b      	ldr	r3, [r7, #20]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d018      	beq.n	800a8e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68da      	ldr	r2, [r3, #12]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ba:	441a      	add	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68da      	ldr	r2, [r3, #12]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d303      	bcc.n	800a8d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68d9      	ldr	r1, [r3, #12]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8dc:	461a      	mov	r2, r3
 800a8de:	6838      	ldr	r0, [r7, #0]
 800a8e0:	f002 ff7f 	bl	800d7e2 <memcpy>
	}
}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8f4:	f001 fcea 	bl	800c2cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a900:	e011      	b.n	800a926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a906:	2b00      	cmp	r3, #0
 800a908:	d012      	beq.n	800a930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	3324      	adds	r3, #36	@ 0x24
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fd30 	bl	800b374 <xTaskRemoveFromEventList>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a91a:	f000 fe09 	bl	800b530 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
 800a920:	3b01      	subs	r3, #1
 800a922:	b2db      	uxtb	r3, r3
 800a924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	dce9      	bgt.n	800a902 <prvUnlockQueue+0x16>
 800a92e:	e000      	b.n	800a932 <prvUnlockQueue+0x46>
					break;
 800a930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	22ff      	movs	r2, #255	@ 0xff
 800a936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a93a:	f001 fcf7 	bl	800c32c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a93e:	f001 fcc5 	bl	800c2cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a94a:	e011      	b.n	800a970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d012      	beq.n	800a97a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3310      	adds	r3, #16
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fd0b 	bl	800b374 <xTaskRemoveFromEventList>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a964:	f000 fde4 	bl	800b530 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a974:	2b00      	cmp	r3, #0
 800a976:	dce9      	bgt.n	800a94c <prvUnlockQueue+0x60>
 800a978:	e000      	b.n	800a97c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a97a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	22ff      	movs	r2, #255	@ 0xff
 800a980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a984:	f001 fcd2 	bl	800c32c <vPortExitCritical>
}
 800a988:	bf00      	nop
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a998:	f001 fc98 	bl	800c2cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d102      	bne.n	800a9aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	e001      	b.n	800a9ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9ae:	f001 fcbd 	bl	800c32c <vPortExitCritical>

	return xReturn;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9c4:	f001 fc82 	bl	800c2cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d102      	bne.n	800a9da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e001      	b.n	800a9de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9de:	f001 fca5 	bl	800c32c <vPortExitCritical>

	return xReturn;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	e014      	b.n	800aa26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9fc:	4a0e      	ldr	r2, [pc, #56]	@ (800aa38 <vQueueAddToRegistry+0x4c>)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10b      	bne.n	800aa20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa08:	490b      	ldr	r1, [pc, #44]	@ (800aa38 <vQueueAddToRegistry+0x4c>)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa12:	4a09      	ldr	r2, [pc, #36]	@ (800aa38 <vQueueAddToRegistry+0x4c>)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	4413      	add	r3, r2
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa1e:	e006      	b.n	800aa2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3301      	adds	r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b07      	cmp	r3, #7
 800aa2a:	d9e7      	bls.n	800a9fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa2c:	bf00      	nop
 800aa2e:	bf00      	nop
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bc80      	pop	{r7}
 800aa36:	4770      	bx	lr
 800aa38:	20000ccc 	.word	0x20000ccc

0800aa3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa4c:	f001 fc3e 	bl	800c2cc <vPortEnterCritical>
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa56:	b25b      	sxtb	r3, r3
 800aa58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5c:	d103      	bne.n	800aa66 <vQueueWaitForMessageRestricted+0x2a>
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa6c:	b25b      	sxtb	r3, r3
 800aa6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa72:	d103      	bne.n	800aa7c <vQueueWaitForMessageRestricted+0x40>
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa7c:	f001 fc56 	bl	800c32c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d106      	bne.n	800aa96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	3324      	adds	r3, #36	@ 0x24
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fc43 	bl	800b31c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa96:	6978      	ldr	r0, [r7, #20]
 800aa98:	f7ff ff28 	bl	800a8ec <prvUnlockQueue>
	}
 800aa9c:	bf00      	nop
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08e      	sub	sp, #56	@ 0x38
 800aaa8:	af04      	add	r7, sp, #16
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
 800aab0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10b      	bne.n	800aad0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	623b      	str	r3, [r7, #32]
}
 800aaca:	bf00      	nop
 800aacc:	bf00      	nop
 800aace:	e7fd      	b.n	800aacc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10b      	bne.n	800aaee <xTaskCreateStatic+0x4a>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	61fb      	str	r3, [r7, #28]
}
 800aae8:	bf00      	nop
 800aaea:	bf00      	nop
 800aaec:	e7fd      	b.n	800aaea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aaee:	235c      	movs	r3, #92	@ 0x5c
 800aaf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2b5c      	cmp	r3, #92	@ 0x5c
 800aaf6:	d00b      	beq.n	800ab10 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	61bb      	str	r3, [r7, #24]
}
 800ab0a:	bf00      	nop
 800ab0c:	bf00      	nop
 800ab0e:	e7fd      	b.n	800ab0c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d01e      	beq.n	800ab56 <xTaskCreateStatic+0xb2>
 800ab18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d01b      	beq.n	800ab56 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab20:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab26:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab30:	2300      	movs	r3, #0
 800ab32:	9303      	str	r3, [sp, #12]
 800ab34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab36:	9302      	str	r3, [sp, #8]
 800ab38:	f107 0314 	add.w	r3, r7, #20
 800ab3c:	9301      	str	r3, [sp, #4]
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f000 f850 	bl	800abee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab50:	f000 f8de 	bl	800ad10 <prvAddNewTaskToReadyList>
 800ab54:	e001      	b.n	800ab5a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab5a:	697b      	ldr	r3, [r7, #20]
	}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3728      	adds	r7, #40	@ 0x28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08c      	sub	sp, #48	@ 0x30
 800ab68:	af04      	add	r7, sp, #16
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	4613      	mov	r3, r2
 800ab72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab74:	88fb      	ldrh	r3, [r7, #6]
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 fca9 	bl	800c4d0 <pvPortMalloc>
 800ab7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00e      	beq.n	800aba4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab86:	205c      	movs	r0, #92	@ 0x5c
 800ab88:	f001 fca2 	bl	800c4d0 <pvPortMalloc>
 800ab8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab9a:	e005      	b.n	800aba8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab9c:	6978      	ldr	r0, [r7, #20]
 800ab9e:	f001 fd65 	bl	800c66c <vPortFree>
 800aba2:	e001      	b.n	800aba8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d017      	beq.n	800abde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abb6:	88fa      	ldrh	r2, [r7, #6]
 800abb8:	2300      	movs	r3, #0
 800abba:	9303      	str	r3, [sp, #12]
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	9302      	str	r3, [sp, #8]
 800abc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f80e 	bl	800abee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abd2:	69f8      	ldr	r0, [r7, #28]
 800abd4:	f000 f89c 	bl	800ad10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abd8:	2301      	movs	r3, #1
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	e002      	b.n	800abe4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abde:	f04f 33ff 	mov.w	r3, #4294967295
 800abe2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abe4:	69bb      	ldr	r3, [r7, #24]
	}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3720      	adds	r7, #32
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b088      	sub	sp, #32
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	607a      	str	r2, [r7, #4]
 800abfa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	461a      	mov	r2, r3
 800ac06:	21a5      	movs	r1, #165	@ 0xa5
 800ac08:	f002 fd4a 	bl	800d6a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac16:	3b01      	subs	r3, #1
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	f023 0307 	bic.w	r3, r3, #7
 800ac24:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	617b      	str	r3, [r7, #20]
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	e7fd      	b.n	800ac44 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d01f      	beq.n	800ac8e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac4e:	2300      	movs	r3, #0
 800ac50:	61fb      	str	r3, [r7, #28]
 800ac52:	e012      	b.n	800ac7a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	4413      	add	r3, r2
 800ac5a:	7819      	ldrb	r1, [r3, #0]
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	4413      	add	r3, r2
 800ac62:	3334      	adds	r3, #52	@ 0x34
 800ac64:	460a      	mov	r2, r1
 800ac66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d006      	beq.n	800ac82 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	3301      	adds	r3, #1
 800ac78:	61fb      	str	r3, [r7, #28]
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	2b0f      	cmp	r3, #15
 800ac7e:	d9e9      	bls.n	800ac54 <prvInitialiseNewTask+0x66>
 800ac80:	e000      	b.n	800ac84 <prvInitialiseNewTask+0x96>
			{
				break;
 800ac82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac8c:	e003      	b.n	800ac96 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac98:	2b37      	cmp	r3, #55	@ 0x37
 800ac9a:	d901      	bls.n	800aca0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac9c:	2337      	movs	r3, #55	@ 0x37
 800ac9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aca4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acaa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acae:	2200      	movs	r2, #0
 800acb0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb4:	3304      	adds	r3, #4
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff f96b 	bl	8009f92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbe:	3318      	adds	r3, #24
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff f966 	bl	8009f92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800accc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800acd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acda:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acde:	2200      	movs	r2, #0
 800ace0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	68f9      	ldr	r1, [r7, #12]
 800acee:	69b8      	ldr	r0, [r7, #24]
 800acf0:	f001 f9fa 	bl	800c0e8 <pxPortInitialiseStack>
 800acf4:	4602      	mov	r2, r0
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800acfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad06:	bf00      	nop
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad18:	f001 fad8 	bl	800c2cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad1c:	4b2d      	ldr	r3, [pc, #180]	@ (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3301      	adds	r3, #1
 800ad22:	4a2c      	ldr	r2, [pc, #176]	@ (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad26:	4b2c      	ldr	r3, [pc, #176]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d109      	bne.n	800ad42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad2e:	4a2a      	ldr	r2, [pc, #168]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad34:	4b27      	ldr	r3, [pc, #156]	@ (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d110      	bne.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad3c:	f000 fc1c 	bl	800b578 <prvInitialiseTaskLists>
 800ad40:	e00d      	b.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad42:	4b26      	ldr	r3, [pc, #152]	@ (800addc <prvAddNewTaskToReadyList+0xcc>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d109      	bne.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad4a:	4b23      	ldr	r3, [pc, #140]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d802      	bhi.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad58:	4a1f      	ldr	r2, [pc, #124]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad5e:	4b20      	ldr	r3, [pc, #128]	@ (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	4a1e      	ldr	r2, [pc, #120]	@ (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad68:	4b1d      	ldr	r3, [pc, #116]	@ (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad74:	4b1b      	ldr	r3, [pc, #108]	@ (800ade4 <prvAddNewTaskToReadyList+0xd4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d903      	bls.n	800ad84 <prvAddNewTaskToReadyList+0x74>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad80:	4a18      	ldr	r2, [pc, #96]	@ (800ade4 <prvAddNewTaskToReadyList+0xd4>)
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4a15      	ldr	r2, [pc, #84]	@ (800ade8 <prvAddNewTaskToReadyList+0xd8>)
 800ad92:	441a      	add	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7ff f905 	bl	8009faa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ada0:	f001 fac4 	bl	800c32c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ada4:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <prvAddNewTaskToReadyList+0xcc>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adac:	4b0a      	ldr	r3, [pc, #40]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d207      	bcs.n	800adca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adba:	4b0c      	ldr	r3, [pc, #48]	@ (800adec <prvAddNewTaskToReadyList+0xdc>)
 800adbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	200011e0 	.word	0x200011e0
 800add8:	20000d0c 	.word	0x20000d0c
 800addc:	200011ec 	.word	0x200011ec
 800ade0:	200011fc 	.word	0x200011fc
 800ade4:	200011e8 	.word	0x200011e8
 800ade8:	20000d10 	.word	0x20000d10
 800adec:	e000ed04 	.word	0xe000ed04

0800adf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d018      	beq.n	800ae34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae02:	4b14      	ldr	r3, [pc, #80]	@ (800ae54 <vTaskDelay+0x64>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00b      	beq.n	800ae22 <vTaskDelay+0x32>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	60bb      	str	r3, [r7, #8]
}
 800ae1c:	bf00      	nop
 800ae1e:	bf00      	nop
 800ae20:	e7fd      	b.n	800ae1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae22:	f000 f883 	bl	800af2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae26:	2100      	movs	r1, #0
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fcf1 	bl	800b810 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae2e:	f000 f88b 	bl	800af48 <xTaskResumeAll>
 800ae32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d107      	bne.n	800ae4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae3a:	4b07      	ldr	r3, [pc, #28]	@ (800ae58 <vTaskDelay+0x68>)
 800ae3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae4a:	bf00      	nop
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	20001208 	.word	0x20001208
 800ae58:	e000ed04 	.word	0xe000ed04

0800ae5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b08a      	sub	sp, #40	@ 0x28
 800ae60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae6a:	463a      	mov	r2, r7
 800ae6c:	1d39      	adds	r1, r7, #4
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7ff f83c 	bl	8009ef0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	9202      	str	r2, [sp, #8]
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	2300      	movs	r3, #0
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	2300      	movs	r3, #0
 800ae88:	460a      	mov	r2, r1
 800ae8a:	4922      	ldr	r1, [pc, #136]	@ (800af14 <vTaskStartScheduler+0xb8>)
 800ae8c:	4822      	ldr	r0, [pc, #136]	@ (800af18 <vTaskStartScheduler+0xbc>)
 800ae8e:	f7ff fe09 	bl	800aaa4 <xTaskCreateStatic>
 800ae92:	4603      	mov	r3, r0
 800ae94:	4a21      	ldr	r2, [pc, #132]	@ (800af1c <vTaskStartScheduler+0xc0>)
 800ae96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae98:	4b20      	ldr	r3, [pc, #128]	@ (800af1c <vTaskStartScheduler+0xc0>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aea0:	2301      	movs	r3, #1
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e001      	b.n	800aeaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d102      	bne.n	800aeb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aeb0:	f000 fd02 	bl	800b8b8 <xTimerCreateTimerTask>
 800aeb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d116      	bne.n	800aeea <vTaskStartScheduler+0x8e>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	613b      	str	r3, [r7, #16]
}
 800aece:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aed0:	4b13      	ldr	r3, [pc, #76]	@ (800af20 <vTaskStartScheduler+0xc4>)
 800aed2:	f04f 32ff 	mov.w	r2, #4294967295
 800aed6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aed8:	4b12      	ldr	r3, [pc, #72]	@ (800af24 <vTaskStartScheduler+0xc8>)
 800aeda:	2201      	movs	r2, #1
 800aedc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aede:	4b12      	ldr	r3, [pc, #72]	@ (800af28 <vTaskStartScheduler+0xcc>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aee4:	f001 f980 	bl	800c1e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aee8:	e00f      	b.n	800af0a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef0:	d10b      	bne.n	800af0a <vTaskStartScheduler+0xae>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	60fb      	str	r3, [r7, #12]
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	e7fd      	b.n	800af06 <vTaskStartScheduler+0xaa>
}
 800af0a:	bf00      	nop
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	0800f8e4 	.word	0x0800f8e4
 800af18:	0800b549 	.word	0x0800b549
 800af1c:	20001204 	.word	0x20001204
 800af20:	20001200 	.word	0x20001200
 800af24:	200011ec 	.word	0x200011ec
 800af28:	200011e4 	.word	0x200011e4

0800af2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af30:	4b04      	ldr	r3, [pc, #16]	@ (800af44 <vTaskSuspendAll+0x18>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3301      	adds	r3, #1
 800af36:	4a03      	ldr	r2, [pc, #12]	@ (800af44 <vTaskSuspendAll+0x18>)
 800af38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af3a:	bf00      	nop
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bc80      	pop	{r7}
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	20001208 	.word	0x20001208

0800af48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af52:	2300      	movs	r3, #0
 800af54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af56:	4b42      	ldr	r3, [pc, #264]	@ (800b060 <xTaskResumeAll+0x118>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10b      	bne.n	800af76 <xTaskResumeAll+0x2e>
	__asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	603b      	str	r3, [r7, #0]
}
 800af70:	bf00      	nop
 800af72:	bf00      	nop
 800af74:	e7fd      	b.n	800af72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af76:	f001 f9a9 	bl	800c2cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af7a:	4b39      	ldr	r3, [pc, #228]	@ (800b060 <xTaskResumeAll+0x118>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3b01      	subs	r3, #1
 800af80:	4a37      	ldr	r2, [pc, #220]	@ (800b060 <xTaskResumeAll+0x118>)
 800af82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af84:	4b36      	ldr	r3, [pc, #216]	@ (800b060 <xTaskResumeAll+0x118>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d162      	bne.n	800b052 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af8c:	4b35      	ldr	r3, [pc, #212]	@ (800b064 <xTaskResumeAll+0x11c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d05e      	beq.n	800b052 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af94:	e02f      	b.n	800aff6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af96:	4b34      	ldr	r3, [pc, #208]	@ (800b068 <xTaskResumeAll+0x120>)
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3318      	adds	r3, #24
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff f85c 	bl	800a060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3304      	adds	r3, #4
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff f857 	bl	800a060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb6:	4b2d      	ldr	r3, [pc, #180]	@ (800b06c <xTaskResumeAll+0x124>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d903      	bls.n	800afc6 <xTaskResumeAll+0x7e>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc2:	4a2a      	ldr	r2, [pc, #168]	@ (800b06c <xTaskResumeAll+0x124>)
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4a27      	ldr	r2, [pc, #156]	@ (800b070 <xTaskResumeAll+0x128>)
 800afd4:	441a      	add	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3304      	adds	r3, #4
 800afda:	4619      	mov	r1, r3
 800afdc:	4610      	mov	r0, r2
 800afde:	f7fe ffe4 	bl	8009faa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe6:	4b23      	ldr	r3, [pc, #140]	@ (800b074 <xTaskResumeAll+0x12c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afec:	429a      	cmp	r2, r3
 800afee:	d302      	bcc.n	800aff6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aff0:	4b21      	ldr	r3, [pc, #132]	@ (800b078 <xTaskResumeAll+0x130>)
 800aff2:	2201      	movs	r2, #1
 800aff4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aff6:	4b1c      	ldr	r3, [pc, #112]	@ (800b068 <xTaskResumeAll+0x120>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1cb      	bne.n	800af96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b004:	f000 fb56 	bl	800b6b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b008:	4b1c      	ldr	r3, [pc, #112]	@ (800b07c <xTaskResumeAll+0x134>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d010      	beq.n	800b036 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b014:	f000 f844 	bl	800b0a0 <xTaskIncrementTick>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b01e:	4b16      	ldr	r3, [pc, #88]	@ (800b078 <xTaskResumeAll+0x130>)
 800b020:	2201      	movs	r2, #1
 800b022:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3b01      	subs	r3, #1
 800b028:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1f1      	bne.n	800b014 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b030:	4b12      	ldr	r3, [pc, #72]	@ (800b07c <xTaskResumeAll+0x134>)
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b036:	4b10      	ldr	r3, [pc, #64]	@ (800b078 <xTaskResumeAll+0x130>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d009      	beq.n	800b052 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b03e:	2301      	movs	r3, #1
 800b040:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b042:	4b0f      	ldr	r3, [pc, #60]	@ (800b080 <xTaskResumeAll+0x138>)
 800b044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b052:	f001 f96b 	bl	800c32c <vPortExitCritical>

	return xAlreadyYielded;
 800b056:	68bb      	ldr	r3, [r7, #8]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20001208 	.word	0x20001208
 800b064:	200011e0 	.word	0x200011e0
 800b068:	200011a0 	.word	0x200011a0
 800b06c:	200011e8 	.word	0x200011e8
 800b070:	20000d10 	.word	0x20000d10
 800b074:	20000d0c 	.word	0x20000d0c
 800b078:	200011f4 	.word	0x200011f4
 800b07c:	200011f0 	.word	0x200011f0
 800b080:	e000ed04 	.word	0xe000ed04

0800b084 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b08a:	4b04      	ldr	r3, [pc, #16]	@ (800b09c <xTaskGetTickCount+0x18>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b090:	687b      	ldr	r3, [r7, #4]
}
 800b092:	4618      	mov	r0, r3
 800b094:	370c      	adds	r7, #12
 800b096:	46bd      	mov	sp, r7
 800b098:	bc80      	pop	{r7}
 800b09a:	4770      	bx	lr
 800b09c:	200011e4 	.word	0x200011e4

0800b0a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0aa:	4b4f      	ldr	r3, [pc, #316]	@ (800b1e8 <xTaskIncrementTick+0x148>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f040 8090 	bne.w	800b1d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0b4:	4b4d      	ldr	r3, [pc, #308]	@ (800b1ec <xTaskIncrementTick+0x14c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0bc:	4a4b      	ldr	r2, [pc, #300]	@ (800b1ec <xTaskIncrementTick+0x14c>)
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d121      	bne.n	800b10c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0c8:	4b49      	ldr	r3, [pc, #292]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00b      	beq.n	800b0ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	603b      	str	r3, [r7, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	e7fd      	b.n	800b0e6 <xTaskIncrementTick+0x46>
 800b0ea:	4b41      	ldr	r3, [pc, #260]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	4b40      	ldr	r3, [pc, #256]	@ (800b1f4 <xTaskIncrementTick+0x154>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	4a3e      	ldr	r2, [pc, #248]	@ (800b1f4 <xTaskIncrementTick+0x154>)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	4b3e      	ldr	r3, [pc, #248]	@ (800b1f8 <xTaskIncrementTick+0x158>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	4a3c      	ldr	r2, [pc, #240]	@ (800b1f8 <xTaskIncrementTick+0x158>)
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	f000 fad4 	bl	800b6b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b10c:	4b3b      	ldr	r3, [pc, #236]	@ (800b1fc <xTaskIncrementTick+0x15c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	429a      	cmp	r2, r3
 800b114:	d349      	bcc.n	800b1aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b116:	4b36      	ldr	r3, [pc, #216]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d104      	bne.n	800b12a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b120:	4b36      	ldr	r3, [pc, #216]	@ (800b1fc <xTaskIncrementTick+0x15c>)
 800b122:	f04f 32ff 	mov.w	r2, #4294967295
 800b126:	601a      	str	r2, [r3, #0]
					break;
 800b128:	e03f      	b.n	800b1aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12a:	4b31      	ldr	r3, [pc, #196]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d203      	bcs.n	800b14a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b142:	4a2e      	ldr	r2, [pc, #184]	@ (800b1fc <xTaskIncrementTick+0x15c>)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b148:	e02f      	b.n	800b1aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	3304      	adds	r3, #4
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe ff86 	bl	800a060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	3318      	adds	r3, #24
 800b160:	4618      	mov	r0, r3
 800b162:	f7fe ff7d 	bl	800a060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b16a:	4b25      	ldr	r3, [pc, #148]	@ (800b200 <xTaskIncrementTick+0x160>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d903      	bls.n	800b17a <xTaskIncrementTick+0xda>
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b176:	4a22      	ldr	r2, [pc, #136]	@ (800b200 <xTaskIncrementTick+0x160>)
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b17e:	4613      	mov	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4a1f      	ldr	r2, [pc, #124]	@ (800b204 <xTaskIncrementTick+0x164>)
 800b188:	441a      	add	r2, r3
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	3304      	adds	r3, #4
 800b18e:	4619      	mov	r1, r3
 800b190:	4610      	mov	r0, r2
 800b192:	f7fe ff0a 	bl	8009faa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b19a:	4b1b      	ldr	r3, [pc, #108]	@ (800b208 <xTaskIncrementTick+0x168>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d3b8      	bcc.n	800b116 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1a8:	e7b5      	b.n	800b116 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1aa:	4b17      	ldr	r3, [pc, #92]	@ (800b208 <xTaskIncrementTick+0x168>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1b0:	4914      	ldr	r1, [pc, #80]	@ (800b204 <xTaskIncrementTick+0x164>)
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	440b      	add	r3, r1
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d901      	bls.n	800b1c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1c6:	4b11      	ldr	r3, [pc, #68]	@ (800b20c <xTaskIncrementTick+0x16c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d007      	beq.n	800b1de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	e004      	b.n	800b1de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b210 <xTaskIncrementTick+0x170>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	4a0d      	ldr	r2, [pc, #52]	@ (800b210 <xTaskIncrementTick+0x170>)
 800b1dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1de:	697b      	ldr	r3, [r7, #20]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3718      	adds	r7, #24
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	20001208 	.word	0x20001208
 800b1ec:	200011e4 	.word	0x200011e4
 800b1f0:	20001198 	.word	0x20001198
 800b1f4:	2000119c 	.word	0x2000119c
 800b1f8:	200011f8 	.word	0x200011f8
 800b1fc:	20001200 	.word	0x20001200
 800b200:	200011e8 	.word	0x200011e8
 800b204:	20000d10 	.word	0x20000d10
 800b208:	20000d0c 	.word	0x20000d0c
 800b20c:	200011f4 	.word	0x200011f4
 800b210:	200011f0 	.word	0x200011f0

0800b214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b21a:	4b28      	ldr	r3, [pc, #160]	@ (800b2bc <vTaskSwitchContext+0xa8>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b222:	4b27      	ldr	r3, [pc, #156]	@ (800b2c0 <vTaskSwitchContext+0xac>)
 800b224:	2201      	movs	r2, #1
 800b226:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b228:	e042      	b.n	800b2b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b22a:	4b25      	ldr	r3, [pc, #148]	@ (800b2c0 <vTaskSwitchContext+0xac>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b230:	4b24      	ldr	r3, [pc, #144]	@ (800b2c4 <vTaskSwitchContext+0xb0>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	e011      	b.n	800b25c <vTaskSwitchContext+0x48>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10b      	bne.n	800b256 <vTaskSwitchContext+0x42>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	607b      	str	r3, [r7, #4]
}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	e7fd      	b.n	800b252 <vTaskSwitchContext+0x3e>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	3b01      	subs	r3, #1
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	491a      	ldr	r1, [pc, #104]	@ (800b2c8 <vTaskSwitchContext+0xb4>)
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	440b      	add	r3, r1
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0e3      	beq.n	800b238 <vTaskSwitchContext+0x24>
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	4613      	mov	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4a13      	ldr	r2, [pc, #76]	@ (800b2c8 <vTaskSwitchContext+0xb4>)
 800b27c:	4413      	add	r3, r2
 800b27e:	60bb      	str	r3, [r7, #8]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	605a      	str	r2, [r3, #4]
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	3308      	adds	r3, #8
 800b292:	429a      	cmp	r2, r3
 800b294:	d104      	bne.n	800b2a0 <vTaskSwitchContext+0x8c>
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	605a      	str	r2, [r3, #4]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	4a09      	ldr	r2, [pc, #36]	@ (800b2cc <vTaskSwitchContext+0xb8>)
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	4a06      	ldr	r2, [pc, #24]	@ (800b2c4 <vTaskSwitchContext+0xb0>)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6013      	str	r3, [r2, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bc80      	pop	{r7}
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	20001208 	.word	0x20001208
 800b2c0:	200011f4 	.word	0x200011f4
 800b2c4:	200011e8 	.word	0x200011e8
 800b2c8:	20000d10 	.word	0x20000d10
 800b2cc:	20000d0c 	.word	0x20000d0c

0800b2d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10b      	bne.n	800b2f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	60fb      	str	r3, [r7, #12]
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	e7fd      	b.n	800b2f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2f8:	4b07      	ldr	r3, [pc, #28]	@ (800b318 <vTaskPlaceOnEventList+0x48>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3318      	adds	r3, #24
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7fe fe75 	bl	8009ff0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b306:	2101      	movs	r1, #1
 800b308:	6838      	ldr	r0, [r7, #0]
 800b30a:	f000 fa81 	bl	800b810 <prvAddCurrentTaskToDelayedList>
}
 800b30e:	bf00      	nop
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20000d0c 	.word	0x20000d0c

0800b31c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10b      	bne.n	800b346 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	617b      	str	r3, [r7, #20]
}
 800b340:	bf00      	nop
 800b342:	bf00      	nop
 800b344:	e7fd      	b.n	800b342 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b346:	4b0a      	ldr	r3, [pc, #40]	@ (800b370 <vTaskPlaceOnEventListRestricted+0x54>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3318      	adds	r3, #24
 800b34c:	4619      	mov	r1, r3
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f7fe fe2b 	bl	8009faa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b35a:	f04f 33ff 	mov.w	r3, #4294967295
 800b35e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	68b8      	ldr	r0, [r7, #8]
 800b364:	f000 fa54 	bl	800b810 <prvAddCurrentTaskToDelayedList>
	}
 800b368:	bf00      	nop
 800b36a:	3718      	adds	r7, #24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20000d0c 	.word	0x20000d0c

0800b374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10b      	bne.n	800b3a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	60fb      	str	r3, [r7, #12]
}
 800b39c:	bf00      	nop
 800b39e:	bf00      	nop
 800b3a0:	e7fd      	b.n	800b39e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	3318      	adds	r3, #24
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fe5a 	bl	800a060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ac:	4b1d      	ldr	r3, [pc, #116]	@ (800b424 <xTaskRemoveFromEventList+0xb0>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d11d      	bne.n	800b3f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fe fe51 	bl	800a060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c2:	4b19      	ldr	r3, [pc, #100]	@ (800b428 <xTaskRemoveFromEventList+0xb4>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d903      	bls.n	800b3d2 <xTaskRemoveFromEventList+0x5e>
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ce:	4a16      	ldr	r2, [pc, #88]	@ (800b428 <xTaskRemoveFromEventList+0xb4>)
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4a13      	ldr	r2, [pc, #76]	@ (800b42c <xTaskRemoveFromEventList+0xb8>)
 800b3e0:	441a      	add	r2, r3
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	f7fe fdde 	bl	8009faa <vListInsertEnd>
 800b3ee:	e005      	b.n	800b3fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	3318      	adds	r3, #24
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	480e      	ldr	r0, [pc, #56]	@ (800b430 <xTaskRemoveFromEventList+0xbc>)
 800b3f8:	f7fe fdd7 	bl	8009faa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b400:	4b0c      	ldr	r3, [pc, #48]	@ (800b434 <xTaskRemoveFromEventList+0xc0>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b406:	429a      	cmp	r2, r3
 800b408:	d905      	bls.n	800b416 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b40a:	2301      	movs	r3, #1
 800b40c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b40e:	4b0a      	ldr	r3, [pc, #40]	@ (800b438 <xTaskRemoveFromEventList+0xc4>)
 800b410:	2201      	movs	r2, #1
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	e001      	b.n	800b41a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b41a:	697b      	ldr	r3, [r7, #20]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	20001208 	.word	0x20001208
 800b428:	200011e8 	.word	0x200011e8
 800b42c:	20000d10 	.word	0x20000d10
 800b430:	200011a0 	.word	0x200011a0
 800b434:	20000d0c 	.word	0x20000d0c
 800b438:	200011f4 	.word	0x200011f4

0800b43c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b444:	4b06      	ldr	r3, [pc, #24]	@ (800b460 <vTaskInternalSetTimeOutState+0x24>)
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b44c:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <vTaskInternalSetTimeOutState+0x28>)
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	605a      	str	r2, [r3, #4]
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	bc80      	pop	{r7}
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	200011f8 	.word	0x200011f8
 800b464:	200011e4 	.word	0x200011e4

0800b468 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10b      	bne.n	800b490 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	613b      	str	r3, [r7, #16]
}
 800b48a:	bf00      	nop
 800b48c:	bf00      	nop
 800b48e:	e7fd      	b.n	800b48c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10b      	bne.n	800b4ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60fb      	str	r3, [r7, #12]
}
 800b4a8:	bf00      	nop
 800b4aa:	bf00      	nop
 800b4ac:	e7fd      	b.n	800b4aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b4ae:	f000 ff0d 	bl	800c2cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b528 <xTaskCheckForTimeOut+0xc0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	69ba      	ldr	r2, [r7, #24]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ca:	d102      	bne.n	800b4d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	61fb      	str	r3, [r7, #28]
 800b4d0:	e023      	b.n	800b51a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	4b15      	ldr	r3, [pc, #84]	@ (800b52c <xTaskCheckForTimeOut+0xc4>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d007      	beq.n	800b4ee <xTaskCheckForTimeOut+0x86>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d302      	bcc.n	800b4ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	61fb      	str	r3, [r7, #28]
 800b4ec:	e015      	b.n	800b51a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d20b      	bcs.n	800b510 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	1ad2      	subs	r2, r2, r3
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7ff ff99 	bl	800b43c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b50a:	2300      	movs	r3, #0
 800b50c:	61fb      	str	r3, [r7, #28]
 800b50e:	e004      	b.n	800b51a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b516:	2301      	movs	r3, #1
 800b518:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b51a:	f000 ff07 	bl	800c32c <vPortExitCritical>

	return xReturn;
 800b51e:	69fb      	ldr	r3, [r7, #28]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3720      	adds	r7, #32
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	200011e4 	.word	0x200011e4
 800b52c:	200011f8 	.word	0x200011f8

0800b530 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b534:	4b03      	ldr	r3, [pc, #12]	@ (800b544 <vTaskMissedYield+0x14>)
 800b536:	2201      	movs	r2, #1
 800b538:	601a      	str	r2, [r3, #0]
}
 800b53a:	bf00      	nop
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	200011f4 	.word	0x200011f4

0800b548 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b550:	f000 f852 	bl	800b5f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b554:	4b06      	ldr	r3, [pc, #24]	@ (800b570 <prvIdleTask+0x28>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d9f9      	bls.n	800b550 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b55c:	4b05      	ldr	r3, [pc, #20]	@ (800b574 <prvIdleTask+0x2c>)
 800b55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b56c:	e7f0      	b.n	800b550 <prvIdleTask+0x8>
 800b56e:	bf00      	nop
 800b570:	20000d10 	.word	0x20000d10
 800b574:	e000ed04 	.word	0xe000ed04

0800b578 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b57e:	2300      	movs	r3, #0
 800b580:	607b      	str	r3, [r7, #4]
 800b582:	e00c      	b.n	800b59e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	4613      	mov	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4413      	add	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4a12      	ldr	r2, [pc, #72]	@ (800b5d8 <prvInitialiseTaskLists+0x60>)
 800b590:	4413      	add	r3, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe fcde 	bl	8009f54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3301      	adds	r3, #1
 800b59c:	607b      	str	r3, [r7, #4]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b37      	cmp	r3, #55	@ 0x37
 800b5a2:	d9ef      	bls.n	800b584 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5a4:	480d      	ldr	r0, [pc, #52]	@ (800b5dc <prvInitialiseTaskLists+0x64>)
 800b5a6:	f7fe fcd5 	bl	8009f54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5aa:	480d      	ldr	r0, [pc, #52]	@ (800b5e0 <prvInitialiseTaskLists+0x68>)
 800b5ac:	f7fe fcd2 	bl	8009f54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5b0:	480c      	ldr	r0, [pc, #48]	@ (800b5e4 <prvInitialiseTaskLists+0x6c>)
 800b5b2:	f7fe fccf 	bl	8009f54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5b6:	480c      	ldr	r0, [pc, #48]	@ (800b5e8 <prvInitialiseTaskLists+0x70>)
 800b5b8:	f7fe fccc 	bl	8009f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5bc:	480b      	ldr	r0, [pc, #44]	@ (800b5ec <prvInitialiseTaskLists+0x74>)
 800b5be:	f7fe fcc9 	bl	8009f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f0 <prvInitialiseTaskLists+0x78>)
 800b5c4:	4a05      	ldr	r2, [pc, #20]	@ (800b5dc <prvInitialiseTaskLists+0x64>)
 800b5c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b5f4 <prvInitialiseTaskLists+0x7c>)
 800b5ca:	4a05      	ldr	r2, [pc, #20]	@ (800b5e0 <prvInitialiseTaskLists+0x68>)
 800b5cc:	601a      	str	r2, [r3, #0]
}
 800b5ce:	bf00      	nop
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20000d10 	.word	0x20000d10
 800b5dc:	20001170 	.word	0x20001170
 800b5e0:	20001184 	.word	0x20001184
 800b5e4:	200011a0 	.word	0x200011a0
 800b5e8:	200011b4 	.word	0x200011b4
 800b5ec:	200011cc 	.word	0x200011cc
 800b5f0:	20001198 	.word	0x20001198
 800b5f4:	2000119c 	.word	0x2000119c

0800b5f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5fe:	e019      	b.n	800b634 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b600:	f000 fe64 	bl	800c2cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b604:	4b10      	ldr	r3, [pc, #64]	@ (800b648 <prvCheckTasksWaitingTermination+0x50>)
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3304      	adds	r3, #4
 800b610:	4618      	mov	r0, r3
 800b612:	f7fe fd25 	bl	800a060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b616:	4b0d      	ldr	r3, [pc, #52]	@ (800b64c <prvCheckTasksWaitingTermination+0x54>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	4a0b      	ldr	r2, [pc, #44]	@ (800b64c <prvCheckTasksWaitingTermination+0x54>)
 800b61e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b620:	4b0b      	ldr	r3, [pc, #44]	@ (800b650 <prvCheckTasksWaitingTermination+0x58>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3b01      	subs	r3, #1
 800b626:	4a0a      	ldr	r2, [pc, #40]	@ (800b650 <prvCheckTasksWaitingTermination+0x58>)
 800b628:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b62a:	f000 fe7f 	bl	800c32c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f810 	bl	800b654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b634:	4b06      	ldr	r3, [pc, #24]	@ (800b650 <prvCheckTasksWaitingTermination+0x58>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e1      	bne.n	800b600 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	200011b4 	.word	0x200011b4
 800b64c:	200011e0 	.word	0x200011e0
 800b650:	200011c8 	.word	0x200011c8

0800b654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b662:	2b00      	cmp	r3, #0
 800b664:	d108      	bne.n	800b678 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fffe 	bl	800c66c <vPortFree>
				vPortFree( pxTCB );
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fffb 	bl	800c66c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b676:	e019      	b.n	800b6ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d103      	bne.n	800b68a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fff2 	bl	800c66c <vPortFree>
	}
 800b688:	e010      	b.n	800b6ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b690:	2b02      	cmp	r3, #2
 800b692:	d00b      	beq.n	800b6ac <prvDeleteTCB+0x58>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	60fb      	str	r3, [r7, #12]
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	e7fd      	b.n	800b6a8 <prvDeleteTCB+0x54>
	}
 800b6ac:	bf00      	nop
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ec <prvResetNextTaskUnblockTime+0x38>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f0 <prvResetNextTaskUnblockTime+0x3c>)
 800b6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6cc:	e008      	b.n	800b6e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ce:	4b07      	ldr	r3, [pc, #28]	@ (800b6ec <prvResetNextTaskUnblockTime+0x38>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	4a04      	ldr	r2, [pc, #16]	@ (800b6f0 <prvResetNextTaskUnblockTime+0x3c>)
 800b6de:	6013      	str	r3, [r2, #0]
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bc80      	pop	{r7}
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	20001198 	.word	0x20001198
 800b6f0:	20001200 	.word	0x20001200

0800b6f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b728 <xTaskGetSchedulerState+0x34>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d102      	bne.n	800b708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b702:	2301      	movs	r3, #1
 800b704:	607b      	str	r3, [r7, #4]
 800b706:	e008      	b.n	800b71a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b708:	4b08      	ldr	r3, [pc, #32]	@ (800b72c <xTaskGetSchedulerState+0x38>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d102      	bne.n	800b716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b710:	2302      	movs	r3, #2
 800b712:	607b      	str	r3, [r7, #4]
 800b714:	e001      	b.n	800b71a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b716:	2300      	movs	r3, #0
 800b718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b71a:	687b      	ldr	r3, [r7, #4]
	}
 800b71c:	4618      	mov	r0, r3
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	bc80      	pop	{r7}
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	200011ec 	.word	0x200011ec
 800b72c:	20001208 	.word	0x20001208

0800b730 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b73c:	2300      	movs	r3, #0
 800b73e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d058      	beq.n	800b7f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b746:	4b2f      	ldr	r3, [pc, #188]	@ (800b804 <xTaskPriorityDisinherit+0xd4>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d00b      	beq.n	800b768 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	60fb      	str	r3, [r7, #12]
}
 800b762:	bf00      	nop
 800b764:	bf00      	nop
 800b766:	e7fd      	b.n	800b764 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10b      	bne.n	800b788 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	60bb      	str	r3, [r7, #8]
}
 800b782:	bf00      	nop
 800b784:	bf00      	nop
 800b786:	e7fd      	b.n	800b784 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b78c:	1e5a      	subs	r2, r3, #1
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d02c      	beq.n	800b7f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d128      	bne.n	800b7f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe fc58 	bl	800a060 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b808 <xTaskPriorityDisinherit+0xd8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d903      	bls.n	800b7d8 <xTaskPriorityDisinherit+0xa8>
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d4:	4a0c      	ldr	r2, [pc, #48]	@ (800b808 <xTaskPriorityDisinherit+0xd8>)
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4a09      	ldr	r2, [pc, #36]	@ (800b80c <xTaskPriorityDisinherit+0xdc>)
 800b7e6:	441a      	add	r2, r3
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	f7fe fbdb 	bl	8009faa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7f8:	697b      	ldr	r3, [r7, #20]
	}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	20000d0c 	.word	0x20000d0c
 800b808:	200011e8 	.word	0x200011e8
 800b80c:	20000d10 	.word	0x20000d10

0800b810 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b81a:	4b21      	ldr	r3, [pc, #132]	@ (800b8a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b820:	4b20      	ldr	r3, [pc, #128]	@ (800b8a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3304      	adds	r3, #4
 800b826:	4618      	mov	r0, r3
 800b828:	f7fe fc1a 	bl	800a060 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b832:	d10a      	bne.n	800b84a <prvAddCurrentTaskToDelayedList+0x3a>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d007      	beq.n	800b84a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b83a:	4b1a      	ldr	r3, [pc, #104]	@ (800b8a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3304      	adds	r3, #4
 800b840:	4619      	mov	r1, r3
 800b842:	4819      	ldr	r0, [pc, #100]	@ (800b8a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b844:	f7fe fbb1 	bl	8009faa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b848:	e026      	b.n	800b898 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4413      	add	r3, r2
 800b850:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b852:	4b14      	ldr	r3, [pc, #80]	@ (800b8a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d209      	bcs.n	800b876 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b862:	4b12      	ldr	r3, [pc, #72]	@ (800b8ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	4b0f      	ldr	r3, [pc, #60]	@ (800b8a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3304      	adds	r3, #4
 800b86c:	4619      	mov	r1, r3
 800b86e:	4610      	mov	r0, r2
 800b870:	f7fe fbbe 	bl	8009ff0 <vListInsert>
}
 800b874:	e010      	b.n	800b898 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b876:	4b0e      	ldr	r3, [pc, #56]	@ (800b8b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3304      	adds	r3, #4
 800b880:	4619      	mov	r1, r3
 800b882:	4610      	mov	r0, r2
 800b884:	f7fe fbb4 	bl	8009ff0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b888:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d202      	bcs.n	800b898 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b892:	4a08      	ldr	r2, [pc, #32]	@ (800b8b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	6013      	str	r3, [r2, #0]
}
 800b898:	bf00      	nop
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	200011e4 	.word	0x200011e4
 800b8a4:	20000d0c 	.word	0x20000d0c
 800b8a8:	200011cc 	.word	0x200011cc
 800b8ac:	2000119c 	.word	0x2000119c
 800b8b0:	20001198 	.word	0x20001198
 800b8b4:	20001200 	.word	0x20001200

0800b8b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08a      	sub	sp, #40	@ 0x28
 800b8bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8c2:	f000 fbaf 	bl	800c024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b93c <xTimerCreateTimerTask+0x84>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d021      	beq.n	800b912 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b8d6:	1d3a      	adds	r2, r7, #4
 800b8d8:	f107 0108 	add.w	r1, r7, #8
 800b8dc:	f107 030c 	add.w	r3, r7, #12
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fb1d 	bl	8009f20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b8e6:	6879      	ldr	r1, [r7, #4]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	9202      	str	r2, [sp, #8]
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	460a      	mov	r2, r1
 800b8f8:	4911      	ldr	r1, [pc, #68]	@ (800b940 <xTimerCreateTimerTask+0x88>)
 800b8fa:	4812      	ldr	r0, [pc, #72]	@ (800b944 <xTimerCreateTimerTask+0x8c>)
 800b8fc:	f7ff f8d2 	bl	800aaa4 <xTaskCreateStatic>
 800b900:	4603      	mov	r3, r0
 800b902:	4a11      	ldr	r2, [pc, #68]	@ (800b948 <xTimerCreateTimerTask+0x90>)
 800b904:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b906:	4b10      	ldr	r3, [pc, #64]	@ (800b948 <xTimerCreateTimerTask+0x90>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b90e:	2301      	movs	r3, #1
 800b910:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10b      	bne.n	800b930 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	613b      	str	r3, [r7, #16]
}
 800b92a:	bf00      	nop
 800b92c:	bf00      	nop
 800b92e:	e7fd      	b.n	800b92c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b930:	697b      	ldr	r3, [r7, #20]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000123c 	.word	0x2000123c
 800b940:	0800f8ec 	.word	0x0800f8ec
 800b944:	0800bbc1 	.word	0x0800bbc1
 800b948:	20001240 	.word	0x20001240

0800b94c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b088      	sub	sp, #32
 800b950:	af02      	add	r7, sp, #8
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b95a:	202c      	movs	r0, #44	@ 0x2c
 800b95c:	f000 fdb8 	bl	800c4d0 <pvPortMalloc>
 800b960:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00d      	beq.n	800b984 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 f845 	bl	800ba0e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b984:	697b      	ldr	r3, [r7, #20]
	}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b08a      	sub	sp, #40	@ 0x28
 800b992:	af02      	add	r7, sp, #8
 800b994:	60f8      	str	r0, [r7, #12]
 800b996:	60b9      	str	r1, [r7, #8]
 800b998:	607a      	str	r2, [r7, #4]
 800b99a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b99c:	232c      	movs	r3, #44	@ 0x2c
 800b99e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	2b2c      	cmp	r3, #44	@ 0x2c
 800b9a4:	d00b      	beq.n	800b9be <xTimerCreateStatic+0x30>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	61bb      	str	r3, [r7, #24]
}
 800b9b8:	bf00      	nop
 800b9ba:	bf00      	nop
 800b9bc:	e7fd      	b.n	800b9ba <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10b      	bne.n	800b9de <xTimerCreateStatic+0x50>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	617b      	str	r3, [r7, #20]
}
 800b9d8:	bf00      	nop
 800b9da:	bf00      	nop
 800b9dc:	e7fd      	b.n	800b9da <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00d      	beq.n	800ba04 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	9301      	str	r3, [sp, #4]
 800b9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 f805 	bl	800ba0e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ba04:	69fb      	ldr	r3, [r7, #28]
	}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3720      	adds	r7, #32
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b086      	sub	sp, #24
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	60f8      	str	r0, [r7, #12]
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	607a      	str	r2, [r7, #4]
 800ba1a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10b      	bne.n	800ba3a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	617b      	str	r3, [r7, #20]
}
 800ba34:	bf00      	nop
 800ba36:	bf00      	nop
 800ba38:	e7fd      	b.n	800ba36 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01e      	beq.n	800ba7e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ba40:	f000 faf0 	bl	800c024 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ba44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ba50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ba56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba58:	6a3a      	ldr	r2, [r7, #32]
 800ba5a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe fa96 	bl	8009f92 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d008      	beq.n	800ba7e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba72:	f043 0304 	orr.w	r3, r3, #4
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ba7e:	bf00      	nop
 800ba80:	3718      	adds	r7, #24
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08a      	sub	sp, #40	@ 0x28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10b      	bne.n	800bab8 <xTimerGenericCommand+0x30>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	623b      	str	r3, [r7, #32]
}
 800bab2:	bf00      	nop
 800bab4:	bf00      	nop
 800bab6:	e7fd      	b.n	800bab4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bab8:	4b19      	ldr	r3, [pc, #100]	@ (800bb20 <xTimerGenericCommand+0x98>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d02a      	beq.n	800bb16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2b05      	cmp	r3, #5
 800bad0:	dc18      	bgt.n	800bb04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bad2:	f7ff fe0f 	bl	800b6f4 <xTaskGetSchedulerState>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d109      	bne.n	800baf0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800badc:	4b10      	ldr	r3, [pc, #64]	@ (800bb20 <xTimerGenericCommand+0x98>)
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	f107 0110 	add.w	r1, r7, #16
 800bae4:	2300      	movs	r3, #0
 800bae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bae8:	f7fe fbee 	bl	800a2c8 <xQueueGenericSend>
 800baec:	6278      	str	r0, [r7, #36]	@ 0x24
 800baee:	e012      	b.n	800bb16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800baf0:	4b0b      	ldr	r3, [pc, #44]	@ (800bb20 <xTimerGenericCommand+0x98>)
 800baf2:	6818      	ldr	r0, [r3, #0]
 800baf4:	f107 0110 	add.w	r1, r7, #16
 800baf8:	2300      	movs	r3, #0
 800bafa:	2200      	movs	r2, #0
 800bafc:	f7fe fbe4 	bl	800a2c8 <xQueueGenericSend>
 800bb00:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb02:	e008      	b.n	800bb16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb04:	4b06      	ldr	r3, [pc, #24]	@ (800bb20 <xTimerGenericCommand+0x98>)
 800bb06:	6818      	ldr	r0, [r3, #0]
 800bb08:	f107 0110 	add.w	r1, r7, #16
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	f7fe fcdc 	bl	800a4cc <xQueueGenericSendFromISR>
 800bb14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3728      	adds	r7, #40	@ 0x28
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	2000123c 	.word	0x2000123c

0800bb24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af02      	add	r7, sp, #8
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb2e:	4b23      	ldr	r3, [pc, #140]	@ (800bbbc <prvProcessExpiredTimer+0x98>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe fa8f 	bl	800a060 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d023      	beq.n	800bb98 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	699a      	ldr	r2, [r3, #24]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	18d1      	adds	r1, r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	6978      	ldr	r0, [r7, #20]
 800bb5e:	f000 f8d3 	bl	800bd08 <prvInsertTimerInActiveList>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d020      	beq.n	800bbaa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb68:	2300      	movs	r3, #0
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	2100      	movs	r1, #0
 800bb72:	6978      	ldr	r0, [r7, #20]
 800bb74:	f7ff ff88 	bl	800ba88 <xTimerGenericCommand>
 800bb78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d114      	bne.n	800bbaa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	60fb      	str	r3, [r7, #12]
}
 800bb92:	bf00      	nop
 800bb94:	bf00      	nop
 800bb96:	e7fd      	b.n	800bb94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb9e:	f023 0301 	bic.w	r3, r3, #1
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	6978      	ldr	r0, [r7, #20]
 800bbb0:	4798      	blx	r3
}
 800bbb2:	bf00      	nop
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20001234 	.word	0x20001234

0800bbc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbc8:	f107 0308 	add.w	r3, r7, #8
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 f859 	bl	800bc84 <prvGetNextExpireTime>
 800bbd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 f805 	bl	800bbe8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbde:	f000 f8d5 	bl	800bd8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbe2:	bf00      	nop
 800bbe4:	e7f0      	b.n	800bbc8 <prvTimerTask+0x8>
	...

0800bbe8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbf2:	f7ff f99b 	bl	800af2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbf6:	f107 0308 	add.w	r3, r7, #8
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 f864 	bl	800bcc8 <prvSampleTimeNow>
 800bc00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d130      	bne.n	800bc6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10a      	bne.n	800bc24 <prvProcessTimerOrBlockTask+0x3c>
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d806      	bhi.n	800bc24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc16:	f7ff f997 	bl	800af48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc1a:	68f9      	ldr	r1, [r7, #12]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff ff81 	bl	800bb24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc22:	e024      	b.n	800bc6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d008      	beq.n	800bc3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc2a:	4b13      	ldr	r3, [pc, #76]	@ (800bc78 <prvProcessTimerOrBlockTask+0x90>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <prvProcessTimerOrBlockTask+0x50>
 800bc34:	2301      	movs	r3, #1
 800bc36:	e000      	b.n	800bc3a <prvProcessTimerOrBlockTask+0x52>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc3c:	4b0f      	ldr	r3, [pc, #60]	@ (800bc7c <prvProcessTimerOrBlockTask+0x94>)
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f7fe fef7 	bl	800aa3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc4e:	f7ff f97b 	bl	800af48 <xTaskResumeAll>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10a      	bne.n	800bc6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc58:	4b09      	ldr	r3, [pc, #36]	@ (800bc80 <prvProcessTimerOrBlockTask+0x98>)
 800bc5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc5e:	601a      	str	r2, [r3, #0]
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	f3bf 8f6f 	isb	sy
}
 800bc68:	e001      	b.n	800bc6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc6a:	f7ff f96d 	bl	800af48 <xTaskResumeAll>
}
 800bc6e:	bf00      	nop
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20001238 	.word	0x20001238
 800bc7c:	2000123c 	.word	0x2000123c
 800bc80:	e000ed04 	.word	0xe000ed04

0800bc84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc8c:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc4 <prvGetNextExpireTime+0x40>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d101      	bne.n	800bc9a <prvGetNextExpireTime+0x16>
 800bc96:	2201      	movs	r2, #1
 800bc98:	e000      	b.n	800bc9c <prvGetNextExpireTime+0x18>
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d105      	bne.n	800bcb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bca8:	4b06      	ldr	r3, [pc, #24]	@ (800bcc4 <prvGetNextExpireTime+0x40>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e001      	b.n	800bcb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bc80      	pop	{r7}
 800bcc2:	4770      	bx	lr
 800bcc4:	20001234 	.word	0x20001234

0800bcc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcd0:	f7ff f9d8 	bl	800b084 <xTaskGetTickCount>
 800bcd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd04 <prvSampleTimeNow+0x3c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d205      	bcs.n	800bcec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bce0:	f000 f93a 	bl	800bf58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e002      	b.n	800bcf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcf2:	4a04      	ldr	r2, [pc, #16]	@ (800bd04 <prvSampleTimeNow+0x3c>)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20001244 	.word	0x20001244

0800bd08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
 800bd14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d812      	bhi.n	800bd54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	1ad2      	subs	r2, r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d302      	bcc.n	800bd42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	e01b      	b.n	800bd7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd42:	4b10      	ldr	r3, [pc, #64]	@ (800bd84 <prvInsertTimerInActiveList+0x7c>)
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7fe f94f 	bl	8009ff0 <vListInsert>
 800bd52:	e012      	b.n	800bd7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d206      	bcs.n	800bd6a <prvInsertTimerInActiveList+0x62>
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d302      	bcc.n	800bd6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd64:	2301      	movs	r3, #1
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	e007      	b.n	800bd7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd6a:	4b07      	ldr	r3, [pc, #28]	@ (800bd88 <prvInsertTimerInActiveList+0x80>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3304      	adds	r3, #4
 800bd72:	4619      	mov	r1, r3
 800bd74:	4610      	mov	r0, r2
 800bd76:	f7fe f93b 	bl	8009ff0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd7a:	697b      	ldr	r3, [r7, #20]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20001238 	.word	0x20001238
 800bd88:	20001234 	.word	0x20001234

0800bd8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08e      	sub	sp, #56	@ 0x38
 800bd90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd92:	e0ce      	b.n	800bf32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	da19      	bge.n	800bdce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd9a:	1d3b      	adds	r3, r7, #4
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10b      	bne.n	800bdbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	61fb      	str	r3, [r7, #28]
}
 800bdb8:	bf00      	nop
 800bdba:	bf00      	nop
 800bdbc:	e7fd      	b.n	800bdba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdc4:	6850      	ldr	r0, [r2, #4]
 800bdc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdc8:	6892      	ldr	r2, [r2, #8]
 800bdca:	4611      	mov	r1, r2
 800bdcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f2c0 80ae 	blt.w	800bf32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d004      	beq.n	800bdec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde4:	3304      	adds	r3, #4
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe f93a 	bl	800a060 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdec:	463b      	mov	r3, r7
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff ff6a 	bl	800bcc8 <prvSampleTimeNow>
 800bdf4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b09      	cmp	r3, #9
 800bdfa:	f200 8097 	bhi.w	800bf2c <prvProcessReceivedCommands+0x1a0>
 800bdfe:	a201      	add	r2, pc, #4	@ (adr r2, 800be04 <prvProcessReceivedCommands+0x78>)
 800be00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be04:	0800be2d 	.word	0x0800be2d
 800be08:	0800be2d 	.word	0x0800be2d
 800be0c:	0800be2d 	.word	0x0800be2d
 800be10:	0800bea3 	.word	0x0800bea3
 800be14:	0800beb7 	.word	0x0800beb7
 800be18:	0800bf03 	.word	0x0800bf03
 800be1c:	0800be2d 	.word	0x0800be2d
 800be20:	0800be2d 	.word	0x0800be2d
 800be24:	0800bea3 	.word	0x0800bea3
 800be28:	0800beb7 	.word	0x0800beb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be32:	f043 0301 	orr.w	r3, r3, #1
 800be36:	b2da      	uxtb	r2, r3
 800be38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be42:	699b      	ldr	r3, [r3, #24]
 800be44:	18d1      	adds	r1, r2, r3
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be4c:	f7ff ff5c 	bl	800bd08 <prvInsertTimerInActiveList>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d06c      	beq.n	800bf30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d061      	beq.n	800bf30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	441a      	add	r2, r3
 800be74:	2300      	movs	r3, #0
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	2300      	movs	r3, #0
 800be7a:	2100      	movs	r1, #0
 800be7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be7e:	f7ff fe03 	bl	800ba88 <xTimerGenericCommand>
 800be82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be84:	6a3b      	ldr	r3, [r7, #32]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d152      	bne.n	800bf30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	61bb      	str	r3, [r7, #24]
}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	e7fd      	b.n	800be9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bea8:	f023 0301 	bic.w	r3, r3, #1
 800beac:	b2da      	uxtb	r2, r3
 800beae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800beb4:	e03d      	b.n	800bf32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800beb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bebc:	f043 0301 	orr.w	r3, r3, #1
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800becc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10b      	bne.n	800beee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	617b      	str	r3, [r7, #20]
}
 800bee8:	bf00      	nop
 800beea:	bf00      	nop
 800beec:	e7fd      	b.n	800beea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800beee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef0:	699a      	ldr	r2, [r3, #24]
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	18d1      	adds	r1, r2, r3
 800bef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800befa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800befc:	f7ff ff04 	bl	800bd08 <prvInsertTimerInActiveList>
					break;
 800bf00:	e017      	b.n	800bf32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d103      	bne.n	800bf18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bf10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf12:	f000 fbab 	bl	800c66c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf16:	e00c      	b.n	800bf32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf1e:	f023 0301 	bic.w	r3, r3, #1
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf2a:	e002      	b.n	800bf32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bf2c:	bf00      	nop
 800bf2e:	e000      	b.n	800bf32 <prvProcessReceivedCommands+0x1a6>
					break;
 800bf30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf32:	4b08      	ldr	r3, [pc, #32]	@ (800bf54 <prvProcessReceivedCommands+0x1c8>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	1d39      	adds	r1, r7, #4
 800bf38:	2200      	movs	r2, #0
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fb64 	bl	800a608 <xQueueReceive>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f47f af26 	bne.w	800bd94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf48:	bf00      	nop
 800bf4a:	bf00      	nop
 800bf4c:	3730      	adds	r7, #48	@ 0x30
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	2000123c 	.word	0x2000123c

0800bf58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf5e:	e049      	b.n	800bff4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf60:	4b2e      	ldr	r3, [pc, #184]	@ (800c01c <prvSwitchTimerLists+0xc4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf6a:	4b2c      	ldr	r3, [pc, #176]	@ (800c01c <prvSwitchTimerLists+0xc4>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	3304      	adds	r3, #4
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fe f871 	bl	800a060 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf8c:	f003 0304 	and.w	r3, r3, #4
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d02f      	beq.n	800bff4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d90e      	bls.n	800bfc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfb2:	4b1a      	ldr	r3, [pc, #104]	@ (800c01c <prvSwitchTimerLists+0xc4>)
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	4619      	mov	r1, r3
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	f7fe f817 	bl	8009ff0 <vListInsert>
 800bfc2:	e017      	b.n	800bff4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	2300      	movs	r3, #0
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	2100      	movs	r1, #0
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f7ff fd5a 	bl	800ba88 <xTimerGenericCommand>
 800bfd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10b      	bne.n	800bff4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	603b      	str	r3, [r7, #0]
}
 800bfee:	bf00      	nop
 800bff0:	bf00      	nop
 800bff2:	e7fd      	b.n	800bff0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bff4:	4b09      	ldr	r3, [pc, #36]	@ (800c01c <prvSwitchTimerLists+0xc4>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1b0      	bne.n	800bf60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bffe:	4b07      	ldr	r3, [pc, #28]	@ (800c01c <prvSwitchTimerLists+0xc4>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c004:	4b06      	ldr	r3, [pc, #24]	@ (800c020 <prvSwitchTimerLists+0xc8>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a04      	ldr	r2, [pc, #16]	@ (800c01c <prvSwitchTimerLists+0xc4>)
 800c00a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c00c:	4a04      	ldr	r2, [pc, #16]	@ (800c020 <prvSwitchTimerLists+0xc8>)
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	6013      	str	r3, [r2, #0]
}
 800c012:	bf00      	nop
 800c014:	3718      	adds	r7, #24
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20001234 	.word	0x20001234
 800c020:	20001238 	.word	0x20001238

0800c024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c02a:	f000 f94f 	bl	800c2cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c02e:	4b15      	ldr	r3, [pc, #84]	@ (800c084 <prvCheckForValidListAndQueue+0x60>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d120      	bne.n	800c078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c036:	4814      	ldr	r0, [pc, #80]	@ (800c088 <prvCheckForValidListAndQueue+0x64>)
 800c038:	f7fd ff8c 	bl	8009f54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c03c:	4813      	ldr	r0, [pc, #76]	@ (800c08c <prvCheckForValidListAndQueue+0x68>)
 800c03e:	f7fd ff89 	bl	8009f54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c042:	4b13      	ldr	r3, [pc, #76]	@ (800c090 <prvCheckForValidListAndQueue+0x6c>)
 800c044:	4a10      	ldr	r2, [pc, #64]	@ (800c088 <prvCheckForValidListAndQueue+0x64>)
 800c046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c048:	4b12      	ldr	r3, [pc, #72]	@ (800c094 <prvCheckForValidListAndQueue+0x70>)
 800c04a:	4a10      	ldr	r2, [pc, #64]	@ (800c08c <prvCheckForValidListAndQueue+0x68>)
 800c04c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c04e:	2300      	movs	r3, #0
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	4b11      	ldr	r3, [pc, #68]	@ (800c098 <prvCheckForValidListAndQueue+0x74>)
 800c054:	4a11      	ldr	r2, [pc, #68]	@ (800c09c <prvCheckForValidListAndQueue+0x78>)
 800c056:	2110      	movs	r1, #16
 800c058:	200a      	movs	r0, #10
 800c05a:	f7fe f895 	bl	800a188 <xQueueGenericCreateStatic>
 800c05e:	4603      	mov	r3, r0
 800c060:	4a08      	ldr	r2, [pc, #32]	@ (800c084 <prvCheckForValidListAndQueue+0x60>)
 800c062:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c064:	4b07      	ldr	r3, [pc, #28]	@ (800c084 <prvCheckForValidListAndQueue+0x60>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d005      	beq.n	800c078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c06c:	4b05      	ldr	r3, [pc, #20]	@ (800c084 <prvCheckForValidListAndQueue+0x60>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	490b      	ldr	r1, [pc, #44]	@ (800c0a0 <prvCheckForValidListAndQueue+0x7c>)
 800c072:	4618      	mov	r0, r3
 800c074:	f7fe fcba 	bl	800a9ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c078:	f000 f958 	bl	800c32c <vPortExitCritical>
}
 800c07c:	bf00      	nop
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	2000123c 	.word	0x2000123c
 800c088:	2000120c 	.word	0x2000120c
 800c08c:	20001220 	.word	0x20001220
 800c090:	20001234 	.word	0x20001234
 800c094:	20001238 	.word	0x20001238
 800c098:	200012e8 	.word	0x200012e8
 800c09c:	20001248 	.word	0x20001248
 800c0a0:	0800f8f4 	.word	0x0800f8f4

0800c0a4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10b      	bne.n	800c0ce <pvTimerGetTimerID+0x2a>
	__asm volatile
 800c0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	60fb      	str	r3, [r7, #12]
}
 800c0c8:	bf00      	nop
 800c0ca:	bf00      	nop
 800c0cc:	e7fd      	b.n	800c0ca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c0ce:	f000 f8fd 	bl	800c2cc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	69db      	ldr	r3, [r3, #28]
 800c0d6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c0d8:	f000 f928 	bl	800c32c <vPortExitCritical>

	return pvReturn;
 800c0dc:	693b      	ldr	r3, [r7, #16]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3718      	adds	r7, #24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	3b04      	subs	r3, #4
 800c0f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3b04      	subs	r3, #4
 800c106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	f023 0201 	bic.w	r2, r3, #1
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3b04      	subs	r3, #4
 800c116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c118:	4a08      	ldr	r2, [pc, #32]	@ (800c13c <pxPortInitialiseStack+0x54>)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3b14      	subs	r3, #20
 800c122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3b20      	subs	r3, #32
 800c12e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c130:	68fb      	ldr	r3, [r7, #12]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	bc80      	pop	{r7}
 800c13a:	4770      	bx	lr
 800c13c:	0800c141 	.word	0x0800c141

0800c140 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c146:	2300      	movs	r3, #0
 800c148:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c14a:	4b12      	ldr	r3, [pc, #72]	@ (800c194 <prvTaskExitError+0x54>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c152:	d00b      	beq.n	800c16c <prvTaskExitError+0x2c>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	60fb      	str	r3, [r7, #12]
}
 800c166:	bf00      	nop
 800c168:	bf00      	nop
 800c16a:	e7fd      	b.n	800c168 <prvTaskExitError+0x28>
	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c170:	f383 8811 	msr	BASEPRI, r3
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	60bb      	str	r3, [r7, #8]
}
 800c17e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c180:	bf00      	nop
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d0fc      	beq.n	800c182 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c188:	bf00      	nop
 800c18a:	bf00      	nop
 800c18c:	3714      	adds	r7, #20
 800c18e:	46bd      	mov	sp, r7
 800c190:	bc80      	pop	{r7}
 800c192:	4770      	bx	lr
 800c194:	20000030 	.word	0x20000030
	...

0800c1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c1a0:	4b07      	ldr	r3, [pc, #28]	@ (800c1c0 <pxCurrentTCBConst2>)
 800c1a2:	6819      	ldr	r1, [r3, #0]
 800c1a4:	6808      	ldr	r0, [r1, #0]
 800c1a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c1aa:	f380 8809 	msr	PSP, r0
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f04f 0000 	mov.w	r0, #0
 800c1b6:	f380 8811 	msr	BASEPRI, r0
 800c1ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800c1be:	4770      	bx	lr

0800c1c0 <pxCurrentTCBConst2>:
 800c1c0:	20000d0c 	.word	0x20000d0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1c4:	bf00      	nop
 800c1c6:	bf00      	nop

0800c1c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c1c8:	4806      	ldr	r0, [pc, #24]	@ (800c1e4 <prvPortStartFirstTask+0x1c>)
 800c1ca:	6800      	ldr	r0, [r0, #0]
 800c1cc:	6800      	ldr	r0, [r0, #0]
 800c1ce:	f380 8808 	msr	MSP, r0
 800c1d2:	b662      	cpsie	i
 800c1d4:	b661      	cpsie	f
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	df00      	svc	0
 800c1e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1e2:	bf00      	nop
 800c1e4:	e000ed08 	.word	0xe000ed08

0800c1e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1ee:	4b32      	ldr	r3, [pc, #200]	@ (800c2b8 <xPortStartScheduler+0xd0>)
 800c1f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	22ff      	movs	r2, #255	@ 0xff
 800c1fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	b2db      	uxtb	r3, r3
 800c206:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c208:	78fb      	ldrb	r3, [r7, #3]
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c210:	b2da      	uxtb	r2, r3
 800c212:	4b2a      	ldr	r3, [pc, #168]	@ (800c2bc <xPortStartScheduler+0xd4>)
 800c214:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c216:	4b2a      	ldr	r3, [pc, #168]	@ (800c2c0 <xPortStartScheduler+0xd8>)
 800c218:	2207      	movs	r2, #7
 800c21a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c21c:	e009      	b.n	800c232 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c21e:	4b28      	ldr	r3, [pc, #160]	@ (800c2c0 <xPortStartScheduler+0xd8>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3b01      	subs	r3, #1
 800c224:	4a26      	ldr	r2, [pc, #152]	@ (800c2c0 <xPortStartScheduler+0xd8>)
 800c226:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c228:	78fb      	ldrb	r3, [r7, #3]
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c232:	78fb      	ldrb	r3, [r7, #3]
 800c234:	b2db      	uxtb	r3, r3
 800c236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c23a:	2b80      	cmp	r3, #128	@ 0x80
 800c23c:	d0ef      	beq.n	800c21e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c23e:	4b20      	ldr	r3, [pc, #128]	@ (800c2c0 <xPortStartScheduler+0xd8>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f1c3 0307 	rsb	r3, r3, #7
 800c246:	2b04      	cmp	r3, #4
 800c248:	d00b      	beq.n	800c262 <xPortStartScheduler+0x7a>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	60bb      	str	r3, [r7, #8]
}
 800c25c:	bf00      	nop
 800c25e:	bf00      	nop
 800c260:	e7fd      	b.n	800c25e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c262:	4b17      	ldr	r3, [pc, #92]	@ (800c2c0 <xPortStartScheduler+0xd8>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	4a15      	ldr	r2, [pc, #84]	@ (800c2c0 <xPortStartScheduler+0xd8>)
 800c26a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c26c:	4b14      	ldr	r3, [pc, #80]	@ (800c2c0 <xPortStartScheduler+0xd8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c274:	4a12      	ldr	r2, [pc, #72]	@ (800c2c0 <xPortStartScheduler+0xd8>)
 800c276:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c280:	4b10      	ldr	r3, [pc, #64]	@ (800c2c4 <xPortStartScheduler+0xdc>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a0f      	ldr	r2, [pc, #60]	@ (800c2c4 <xPortStartScheduler+0xdc>)
 800c286:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c28a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c28c:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c4 <xPortStartScheduler+0xdc>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0c      	ldr	r2, [pc, #48]	@ (800c2c4 <xPortStartScheduler+0xdc>)
 800c292:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c296:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c298:	f000 f8b8 	bl	800c40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c29c:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c8 <xPortStartScheduler+0xe0>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2a2:	f7ff ff91 	bl	800c1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2a6:	f7fe ffb5 	bl	800b214 <vTaskSwitchContext>
	prvTaskExitError();
 800c2aa:	f7ff ff49 	bl	800c140 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	e000e400 	.word	0xe000e400
 800c2bc:	20001338 	.word	0x20001338
 800c2c0:	2000133c 	.word	0x2000133c
 800c2c4:	e000ed20 	.word	0xe000ed20
 800c2c8:	20000030 	.word	0x20000030

0800c2cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	607b      	str	r3, [r7, #4]
}
 800c2e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c324 <vPortEnterCritical+0x58>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	4a0d      	ldr	r2, [pc, #52]	@ (800c324 <vPortEnterCritical+0x58>)
 800c2ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c324 <vPortEnterCritical+0x58>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d110      	bne.n	800c31a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c328 <vPortEnterCritical+0x5c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00b      	beq.n	800c31a <vPortEnterCritical+0x4e>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	603b      	str	r3, [r7, #0]
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop
 800c318:	e7fd      	b.n	800c316 <vPortEnterCritical+0x4a>
	}
}
 800c31a:	bf00      	nop
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	bc80      	pop	{r7}
 800c322:	4770      	bx	lr
 800c324:	20000030 	.word	0x20000030
 800c328:	e000ed04 	.word	0xe000ed04

0800c32c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c332:	4b12      	ldr	r3, [pc, #72]	@ (800c37c <vPortExitCritical+0x50>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10b      	bne.n	800c352 <vPortExitCritical+0x26>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	607b      	str	r3, [r7, #4]
}
 800c34c:	bf00      	nop
 800c34e:	bf00      	nop
 800c350:	e7fd      	b.n	800c34e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c352:	4b0a      	ldr	r3, [pc, #40]	@ (800c37c <vPortExitCritical+0x50>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3b01      	subs	r3, #1
 800c358:	4a08      	ldr	r2, [pc, #32]	@ (800c37c <vPortExitCritical+0x50>)
 800c35a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c35c:	4b07      	ldr	r3, [pc, #28]	@ (800c37c <vPortExitCritical+0x50>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d105      	bne.n	800c370 <vPortExitCritical+0x44>
 800c364:	2300      	movs	r3, #0
 800c366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f383 8811 	msr	BASEPRI, r3
}
 800c36e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	bc80      	pop	{r7}
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	20000030 	.word	0x20000030

0800c380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c380:	f3ef 8009 	mrs	r0, PSP
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	4b0d      	ldr	r3, [pc, #52]	@ (800c3c0 <pxCurrentTCBConst>)
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c390:	6010      	str	r0, [r2, #0]
 800c392:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c396:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c39a:	f380 8811 	msr	BASEPRI, r0
 800c39e:	f7fe ff39 	bl	800b214 <vTaskSwitchContext>
 800c3a2:	f04f 0000 	mov.w	r0, #0
 800c3a6:	f380 8811 	msr	BASEPRI, r0
 800c3aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c3ae:	6819      	ldr	r1, [r3, #0]
 800c3b0:	6808      	ldr	r0, [r1, #0]
 800c3b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c3b6:	f380 8809 	msr	PSP, r0
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	4770      	bx	lr

0800c3c0 <pxCurrentTCBConst>:
 800c3c0:	20000d0c 	.word	0x20000d0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop

0800c3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	607b      	str	r3, [r7, #4]
}
 800c3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3e2:	f7fe fe5d 	bl	800b0a0 <xTaskIncrementTick>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d003      	beq.n	800c3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3ec:	4b06      	ldr	r3, [pc, #24]	@ (800c408 <xPortSysTickHandler+0x40>)
 800c3ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	f383 8811 	msr	BASEPRI, r3
}
 800c3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	e000ed04 	.word	0xe000ed04

0800c40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c40c:	b480      	push	{r7}
 800c40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c410:	4b0a      	ldr	r3, [pc, #40]	@ (800c43c <vPortSetupTimerInterrupt+0x30>)
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c416:	4b0a      	ldr	r3, [pc, #40]	@ (800c440 <vPortSetupTimerInterrupt+0x34>)
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c41c:	4b09      	ldr	r3, [pc, #36]	@ (800c444 <vPortSetupTimerInterrupt+0x38>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a09      	ldr	r2, [pc, #36]	@ (800c448 <vPortSetupTimerInterrupt+0x3c>)
 800c422:	fba2 2303 	umull	r2, r3, r2, r3
 800c426:	099b      	lsrs	r3, r3, #6
 800c428:	4a08      	ldr	r2, [pc, #32]	@ (800c44c <vPortSetupTimerInterrupt+0x40>)
 800c42a:	3b01      	subs	r3, #1
 800c42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c42e:	4b03      	ldr	r3, [pc, #12]	@ (800c43c <vPortSetupTimerInterrupt+0x30>)
 800c430:	2207      	movs	r2, #7
 800c432:	601a      	str	r2, [r3, #0]
}
 800c434:	bf00      	nop
 800c436:	46bd      	mov	sp, r7
 800c438:	bc80      	pop	{r7}
 800c43a:	4770      	bx	lr
 800c43c:	e000e010 	.word	0xe000e010
 800c440:	e000e018 	.word	0xe000e018
 800c444:	20000000 	.word	0x20000000
 800c448:	10624dd3 	.word	0x10624dd3
 800c44c:	e000e014 	.word	0xe000e014

0800c450 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c456:	f3ef 8305 	mrs	r3, IPSR
 800c45a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b0f      	cmp	r3, #15
 800c460:	d915      	bls.n	800c48e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c462:	4a17      	ldr	r2, [pc, #92]	@ (800c4c0 <vPortValidateInterruptPriority+0x70>)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4413      	add	r3, r2
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c46c:	4b15      	ldr	r3, [pc, #84]	@ (800c4c4 <vPortValidateInterruptPriority+0x74>)
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	7afa      	ldrb	r2, [r7, #11]
 800c472:	429a      	cmp	r2, r3
 800c474:	d20b      	bcs.n	800c48e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	607b      	str	r3, [r7, #4]
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	e7fd      	b.n	800c48a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c48e:	4b0e      	ldr	r3, [pc, #56]	@ (800c4c8 <vPortValidateInterruptPriority+0x78>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c496:	4b0d      	ldr	r3, [pc, #52]	@ (800c4cc <vPortValidateInterruptPriority+0x7c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d90b      	bls.n	800c4b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	603b      	str	r3, [r7, #0]
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	e7fd      	b.n	800c4b2 <vPortValidateInterruptPriority+0x62>
	}
 800c4b6:	bf00      	nop
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bc80      	pop	{r7}
 800c4be:	4770      	bx	lr
 800c4c0:	e000e3f0 	.word	0xe000e3f0
 800c4c4:	20001338 	.word	0x20001338
 800c4c8:	e000ed0c 	.word	0xe000ed0c
 800c4cc:	2000133c 	.word	0x2000133c

0800c4d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08a      	sub	sp, #40	@ 0x28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4dc:	f7fe fd26 	bl	800af2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4e0:	4b5c      	ldr	r3, [pc, #368]	@ (800c654 <pvPortMalloc+0x184>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4e8:	f000 f924 	bl	800c734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4ec:	4b5a      	ldr	r3, [pc, #360]	@ (800c658 <pvPortMalloc+0x188>)
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f040 8095 	bne.w	800c624 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d01e      	beq.n	800c53e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c500:	2208      	movs	r2, #8
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4413      	add	r3, r2
 800c506:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f003 0307 	and.w	r3, r3, #7
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d015      	beq.n	800c53e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f023 0307 	bic.w	r3, r3, #7
 800c518:	3308      	adds	r3, #8
 800c51a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f003 0307 	and.w	r3, r3, #7
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00b      	beq.n	800c53e <pvPortMalloc+0x6e>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	617b      	str	r3, [r7, #20]
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d06f      	beq.n	800c624 <pvPortMalloc+0x154>
 800c544:	4b45      	ldr	r3, [pc, #276]	@ (800c65c <pvPortMalloc+0x18c>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d86a      	bhi.n	800c624 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c54e:	4b44      	ldr	r3, [pc, #272]	@ (800c660 <pvPortMalloc+0x190>)
 800c550:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c552:	4b43      	ldr	r3, [pc, #268]	@ (800c660 <pvPortMalloc+0x190>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c558:	e004      	b.n	800c564 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d903      	bls.n	800c576 <pvPortMalloc+0xa6>
 800c56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1f1      	bne.n	800c55a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c576:	4b37      	ldr	r3, [pc, #220]	@ (800c654 <pvPortMalloc+0x184>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d051      	beq.n	800c624 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2208      	movs	r2, #8
 800c586:	4413      	add	r3, r2
 800c588:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	1ad2      	subs	r2, r2, r3
 800c59a:	2308      	movs	r3, #8
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d920      	bls.n	800c5e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	f003 0307 	and.w	r3, r3, #7
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00b      	beq.n	800c5cc <pvPortMalloc+0xfc>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	613b      	str	r3, [r7, #16]
}
 800c5c6:	bf00      	nop
 800c5c8:	bf00      	nop
 800c5ca:	e7fd      	b.n	800c5c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	1ad2      	subs	r2, r2, r3
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5de:	69b8      	ldr	r0, [r7, #24]
 800c5e0:	f000 f90a 	bl	800c7f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5e4:	4b1d      	ldr	r3, [pc, #116]	@ (800c65c <pvPortMalloc+0x18c>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	4a1b      	ldr	r2, [pc, #108]	@ (800c65c <pvPortMalloc+0x18c>)
 800c5f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5f2:	4b1a      	ldr	r3, [pc, #104]	@ (800c65c <pvPortMalloc+0x18c>)
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c664 <pvPortMalloc+0x194>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d203      	bcs.n	800c606 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5fe:	4b17      	ldr	r3, [pc, #92]	@ (800c65c <pvPortMalloc+0x18c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4a18      	ldr	r2, [pc, #96]	@ (800c664 <pvPortMalloc+0x194>)
 800c604:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	4b13      	ldr	r3, [pc, #76]	@ (800c658 <pvPortMalloc+0x188>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	431a      	orrs	r2, r3
 800c610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c612:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c61a:	4b13      	ldr	r3, [pc, #76]	@ (800c668 <pvPortMalloc+0x198>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3301      	adds	r3, #1
 800c620:	4a11      	ldr	r2, [pc, #68]	@ (800c668 <pvPortMalloc+0x198>)
 800c622:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c624:	f7fe fc90 	bl	800af48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	f003 0307 	and.w	r3, r3, #7
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00b      	beq.n	800c64a <pvPortMalloc+0x17a>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	60fb      	str	r3, [r7, #12]
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	e7fd      	b.n	800c646 <pvPortMalloc+0x176>
	return pvReturn;
 800c64a:	69fb      	ldr	r3, [r7, #28]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3728      	adds	r7, #40	@ 0x28
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20002330 	.word	0x20002330
 800c658:	20002344 	.word	0x20002344
 800c65c:	20002334 	.word	0x20002334
 800c660:	20002328 	.word	0x20002328
 800c664:	20002338 	.word	0x20002338
 800c668:	2000233c 	.word	0x2000233c

0800c66c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d04f      	beq.n	800c71e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c67e:	2308      	movs	r3, #8
 800c680:	425b      	negs	r3, r3
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	4413      	add	r3, r2
 800c686:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	685a      	ldr	r2, [r3, #4]
 800c690:	4b25      	ldr	r3, [pc, #148]	@ (800c728 <vPortFree+0xbc>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4013      	ands	r3, r2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10b      	bne.n	800c6b2 <vPortFree+0x46>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	60fb      	str	r3, [r7, #12]
}
 800c6ac:	bf00      	nop
 800c6ae:	bf00      	nop
 800c6b0:	e7fd      	b.n	800c6ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00b      	beq.n	800c6d2 <vPortFree+0x66>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	60bb      	str	r3, [r7, #8]
}
 800c6cc:	bf00      	nop
 800c6ce:	bf00      	nop
 800c6d0:	e7fd      	b.n	800c6ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	4b14      	ldr	r3, [pc, #80]	@ (800c728 <vPortFree+0xbc>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4013      	ands	r3, r2
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d01e      	beq.n	800c71e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d11a      	bne.n	800c71e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	685a      	ldr	r2, [r3, #4]
 800c6ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c728 <vPortFree+0xbc>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	43db      	mvns	r3, r3
 800c6f2:	401a      	ands	r2, r3
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6f8:	f7fe fc18 	bl	800af2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	4b0a      	ldr	r3, [pc, #40]	@ (800c72c <vPortFree+0xc0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4413      	add	r3, r2
 800c706:	4a09      	ldr	r2, [pc, #36]	@ (800c72c <vPortFree+0xc0>)
 800c708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c70a:	6938      	ldr	r0, [r7, #16]
 800c70c:	f000 f874 	bl	800c7f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c710:	4b07      	ldr	r3, [pc, #28]	@ (800c730 <vPortFree+0xc4>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3301      	adds	r3, #1
 800c716:	4a06      	ldr	r2, [pc, #24]	@ (800c730 <vPortFree+0xc4>)
 800c718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c71a:	f7fe fc15 	bl	800af48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c71e:	bf00      	nop
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20002344 	.word	0x20002344
 800c72c:	20002334 	.word	0x20002334
 800c730:	20002340 	.word	0x20002340

0800c734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c73a:	f640 73e8 	movw	r3, #4072	@ 0xfe8
 800c73e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c740:	4b27      	ldr	r3, [pc, #156]	@ (800c7e0 <prvHeapInit+0xac>)
 800c742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f003 0307 	and.w	r3, r3, #7
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00c      	beq.n	800c768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3307      	adds	r3, #7
 800c752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f023 0307 	bic.w	r3, r3, #7
 800c75a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	4a1f      	ldr	r2, [pc, #124]	@ (800c7e0 <prvHeapInit+0xac>)
 800c764:	4413      	add	r3, r2
 800c766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c76c:	4a1d      	ldr	r2, [pc, #116]	@ (800c7e4 <prvHeapInit+0xb0>)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c772:	4b1c      	ldr	r3, [pc, #112]	@ (800c7e4 <prvHeapInit+0xb0>)
 800c774:	2200      	movs	r2, #0
 800c776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	4413      	add	r3, r2
 800c77e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c780:	2208      	movs	r2, #8
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	1a9b      	subs	r3, r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f023 0307 	bic.w	r3, r3, #7
 800c78e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	4a15      	ldr	r2, [pc, #84]	@ (800c7e8 <prvHeapInit+0xb4>)
 800c794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c796:	4b14      	ldr	r3, [pc, #80]	@ (800c7e8 <prvHeapInit+0xb4>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2200      	movs	r2, #0
 800c79c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c79e:	4b12      	ldr	r3, [pc, #72]	@ (800c7e8 <prvHeapInit+0xb4>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	1ad2      	subs	r2, r2, r3
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e8 <prvHeapInit+0xb4>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c7ec <prvHeapInit+0xb8>)
 800c7c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	4a09      	ldr	r2, [pc, #36]	@ (800c7f0 <prvHeapInit+0xbc>)
 800c7ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7cc:	4b09      	ldr	r3, [pc, #36]	@ (800c7f4 <prvHeapInit+0xc0>)
 800c7ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c7d2:	601a      	str	r2, [r3, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bc80      	pop	{r7}
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	20001340 	.word	0x20001340
 800c7e4:	20002328 	.word	0x20002328
 800c7e8:	20002330 	.word	0x20002330
 800c7ec:	20002338 	.word	0x20002338
 800c7f0:	20002334 	.word	0x20002334
 800c7f4:	20002344 	.word	0x20002344

0800c7f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b085      	sub	sp, #20
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c800:	4b27      	ldr	r3, [pc, #156]	@ (800c8a0 <prvInsertBlockIntoFreeList+0xa8>)
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e002      	b.n	800c80c <prvInsertBlockIntoFreeList+0x14>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	429a      	cmp	r2, r3
 800c814:	d8f7      	bhi.n	800c806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	4413      	add	r3, r2
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	429a      	cmp	r2, r3
 800c826:	d108      	bne.n	800c83a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	441a      	add	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	441a      	add	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d118      	bne.n	800c880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	4b14      	ldr	r3, [pc, #80]	@ (800c8a4 <prvInsertBlockIntoFreeList+0xac>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	429a      	cmp	r2, r3
 800c858:	d00d      	beq.n	800c876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	441a      	add	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	601a      	str	r2, [r3, #0]
 800c874:	e008      	b.n	800c888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c876:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a4 <prvInsertBlockIntoFreeList+0xac>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	601a      	str	r2, [r3, #0]
 800c87e:	e003      	b.n	800c888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d002      	beq.n	800c896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c896:	bf00      	nop
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bc80      	pop	{r7}
 800c89e:	4770      	bx	lr
 800c8a0:	20002328 	.word	0x20002328
 800c8a4:	20002330 	.word	0x20002330

0800c8a8 <atoi>:
 800c8a8:	220a      	movs	r2, #10
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	f000 b87a 	b.w	800c9a4 <strtol>

0800c8b0 <_strtol_l.isra.0>:
 800c8b0:	2b24      	cmp	r3, #36	@ 0x24
 800c8b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b6:	4686      	mov	lr, r0
 800c8b8:	4690      	mov	r8, r2
 800c8ba:	d801      	bhi.n	800c8c0 <_strtol_l.isra.0+0x10>
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d106      	bne.n	800c8ce <_strtol_l.isra.0+0x1e>
 800c8c0:	f000 ff54 	bl	800d76c <__errno>
 800c8c4:	2316      	movs	r3, #22
 800c8c6:	6003      	str	r3, [r0, #0]
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ce:	460d      	mov	r5, r1
 800c8d0:	4833      	ldr	r0, [pc, #204]	@ (800c9a0 <_strtol_l.isra.0+0xf0>)
 800c8d2:	462a      	mov	r2, r5
 800c8d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8d8:	5d06      	ldrb	r6, [r0, r4]
 800c8da:	f016 0608 	ands.w	r6, r6, #8
 800c8de:	d1f8      	bne.n	800c8d2 <_strtol_l.isra.0+0x22>
 800c8e0:	2c2d      	cmp	r4, #45	@ 0x2d
 800c8e2:	d110      	bne.n	800c906 <_strtol_l.isra.0+0x56>
 800c8e4:	2601      	movs	r6, #1
 800c8e6:	782c      	ldrb	r4, [r5, #0]
 800c8e8:	1c95      	adds	r5, r2, #2
 800c8ea:	f033 0210 	bics.w	r2, r3, #16
 800c8ee:	d115      	bne.n	800c91c <_strtol_l.isra.0+0x6c>
 800c8f0:	2c30      	cmp	r4, #48	@ 0x30
 800c8f2:	d10d      	bne.n	800c910 <_strtol_l.isra.0+0x60>
 800c8f4:	782a      	ldrb	r2, [r5, #0]
 800c8f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8fa:	2a58      	cmp	r2, #88	@ 0x58
 800c8fc:	d108      	bne.n	800c910 <_strtol_l.isra.0+0x60>
 800c8fe:	786c      	ldrb	r4, [r5, #1]
 800c900:	3502      	adds	r5, #2
 800c902:	2310      	movs	r3, #16
 800c904:	e00a      	b.n	800c91c <_strtol_l.isra.0+0x6c>
 800c906:	2c2b      	cmp	r4, #43	@ 0x2b
 800c908:	bf04      	itt	eq
 800c90a:	782c      	ldrbeq	r4, [r5, #0]
 800c90c:	1c95      	addeq	r5, r2, #2
 800c90e:	e7ec      	b.n	800c8ea <_strtol_l.isra.0+0x3a>
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1f6      	bne.n	800c902 <_strtol_l.isra.0+0x52>
 800c914:	2c30      	cmp	r4, #48	@ 0x30
 800c916:	bf14      	ite	ne
 800c918:	230a      	movne	r3, #10
 800c91a:	2308      	moveq	r3, #8
 800c91c:	2200      	movs	r2, #0
 800c91e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c922:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c926:	fbbc f9f3 	udiv	r9, ip, r3
 800c92a:	4610      	mov	r0, r2
 800c92c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c930:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c934:	2f09      	cmp	r7, #9
 800c936:	d80f      	bhi.n	800c958 <_strtol_l.isra.0+0xa8>
 800c938:	463c      	mov	r4, r7
 800c93a:	42a3      	cmp	r3, r4
 800c93c:	dd1b      	ble.n	800c976 <_strtol_l.isra.0+0xc6>
 800c93e:	1c57      	adds	r7, r2, #1
 800c940:	d007      	beq.n	800c952 <_strtol_l.isra.0+0xa2>
 800c942:	4581      	cmp	r9, r0
 800c944:	d314      	bcc.n	800c970 <_strtol_l.isra.0+0xc0>
 800c946:	d101      	bne.n	800c94c <_strtol_l.isra.0+0x9c>
 800c948:	45a2      	cmp	sl, r4
 800c94a:	db11      	blt.n	800c970 <_strtol_l.isra.0+0xc0>
 800c94c:	2201      	movs	r2, #1
 800c94e:	fb00 4003 	mla	r0, r0, r3, r4
 800c952:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c956:	e7eb      	b.n	800c930 <_strtol_l.isra.0+0x80>
 800c958:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c95c:	2f19      	cmp	r7, #25
 800c95e:	d801      	bhi.n	800c964 <_strtol_l.isra.0+0xb4>
 800c960:	3c37      	subs	r4, #55	@ 0x37
 800c962:	e7ea      	b.n	800c93a <_strtol_l.isra.0+0x8a>
 800c964:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c968:	2f19      	cmp	r7, #25
 800c96a:	d804      	bhi.n	800c976 <_strtol_l.isra.0+0xc6>
 800c96c:	3c57      	subs	r4, #87	@ 0x57
 800c96e:	e7e4      	b.n	800c93a <_strtol_l.isra.0+0x8a>
 800c970:	f04f 32ff 	mov.w	r2, #4294967295
 800c974:	e7ed      	b.n	800c952 <_strtol_l.isra.0+0xa2>
 800c976:	1c53      	adds	r3, r2, #1
 800c978:	d108      	bne.n	800c98c <_strtol_l.isra.0+0xdc>
 800c97a:	2322      	movs	r3, #34	@ 0x22
 800c97c:	4660      	mov	r0, ip
 800c97e:	f8ce 3000 	str.w	r3, [lr]
 800c982:	f1b8 0f00 	cmp.w	r8, #0
 800c986:	d0a0      	beq.n	800c8ca <_strtol_l.isra.0+0x1a>
 800c988:	1e69      	subs	r1, r5, #1
 800c98a:	e006      	b.n	800c99a <_strtol_l.isra.0+0xea>
 800c98c:	b106      	cbz	r6, 800c990 <_strtol_l.isra.0+0xe0>
 800c98e:	4240      	negs	r0, r0
 800c990:	f1b8 0f00 	cmp.w	r8, #0
 800c994:	d099      	beq.n	800c8ca <_strtol_l.isra.0+0x1a>
 800c996:	2a00      	cmp	r2, #0
 800c998:	d1f6      	bne.n	800c988 <_strtol_l.isra.0+0xd8>
 800c99a:	f8c8 1000 	str.w	r1, [r8]
 800c99e:	e794      	b.n	800c8ca <_strtol_l.isra.0+0x1a>
 800c9a0:	0800f9a3 	.word	0x0800f9a3

0800c9a4 <strtol>:
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	460a      	mov	r2, r1
 800c9a8:	4601      	mov	r1, r0
 800c9aa:	4802      	ldr	r0, [pc, #8]	@ (800c9b4 <strtol+0x10>)
 800c9ac:	6800      	ldr	r0, [r0, #0]
 800c9ae:	f7ff bf7f 	b.w	800c8b0 <_strtol_l.isra.0>
 800c9b2:	bf00      	nop
 800c9b4:	200001ac 	.word	0x200001ac

0800c9b8 <__cvt>:
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9be:	461d      	mov	r5, r3
 800c9c0:	bfbb      	ittet	lt
 800c9c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800c9c6:	461d      	movlt	r5, r3
 800c9c8:	2300      	movge	r3, #0
 800c9ca:	232d      	movlt	r3, #45	@ 0x2d
 800c9cc:	b088      	sub	sp, #32
 800c9ce:	4614      	mov	r4, r2
 800c9d0:	bfb8      	it	lt
 800c9d2:	4614      	movlt	r4, r2
 800c9d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c9d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c9d8:	7013      	strb	r3, [r2, #0]
 800c9da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c9dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800c9e0:	f023 0820 	bic.w	r8, r3, #32
 800c9e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c9e8:	d005      	beq.n	800c9f6 <__cvt+0x3e>
 800c9ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c9ee:	d100      	bne.n	800c9f2 <__cvt+0x3a>
 800c9f0:	3601      	adds	r6, #1
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	e000      	b.n	800c9f8 <__cvt+0x40>
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	aa07      	add	r2, sp, #28
 800c9fa:	9204      	str	r2, [sp, #16]
 800c9fc:	aa06      	add	r2, sp, #24
 800c9fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ca02:	e9cd 3600 	strd	r3, r6, [sp]
 800ca06:	4622      	mov	r2, r4
 800ca08:	462b      	mov	r3, r5
 800ca0a:	f000 ff81 	bl	800d910 <_dtoa_r>
 800ca0e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ca12:	4607      	mov	r7, r0
 800ca14:	d119      	bne.n	800ca4a <__cvt+0x92>
 800ca16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca18:	07db      	lsls	r3, r3, #31
 800ca1a:	d50e      	bpl.n	800ca3a <__cvt+0x82>
 800ca1c:	eb00 0906 	add.w	r9, r0, r6
 800ca20:	2200      	movs	r2, #0
 800ca22:	2300      	movs	r3, #0
 800ca24:	4620      	mov	r0, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f4 f82e 	bl	8000a88 <__aeabi_dcmpeq>
 800ca2c:	b108      	cbz	r0, 800ca32 <__cvt+0x7a>
 800ca2e:	f8cd 901c 	str.w	r9, [sp, #28]
 800ca32:	2230      	movs	r2, #48	@ 0x30
 800ca34:	9b07      	ldr	r3, [sp, #28]
 800ca36:	454b      	cmp	r3, r9
 800ca38:	d31e      	bcc.n	800ca78 <__cvt+0xc0>
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	9b07      	ldr	r3, [sp, #28]
 800ca3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ca40:	1bdb      	subs	r3, r3, r7
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	b008      	add	sp, #32
 800ca46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca4a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca4e:	eb00 0906 	add.w	r9, r0, r6
 800ca52:	d1e5      	bne.n	800ca20 <__cvt+0x68>
 800ca54:	7803      	ldrb	r3, [r0, #0]
 800ca56:	2b30      	cmp	r3, #48	@ 0x30
 800ca58:	d10a      	bne.n	800ca70 <__cvt+0xb8>
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	4620      	mov	r0, r4
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7f4 f811 	bl	8000a88 <__aeabi_dcmpeq>
 800ca66:	b918      	cbnz	r0, 800ca70 <__cvt+0xb8>
 800ca68:	f1c6 0601 	rsb	r6, r6, #1
 800ca6c:	f8ca 6000 	str.w	r6, [sl]
 800ca70:	f8da 3000 	ldr.w	r3, [sl]
 800ca74:	4499      	add	r9, r3
 800ca76:	e7d3      	b.n	800ca20 <__cvt+0x68>
 800ca78:	1c59      	adds	r1, r3, #1
 800ca7a:	9107      	str	r1, [sp, #28]
 800ca7c:	701a      	strb	r2, [r3, #0]
 800ca7e:	e7d9      	b.n	800ca34 <__cvt+0x7c>

0800ca80 <__exponent>:
 800ca80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca82:	2900      	cmp	r1, #0
 800ca84:	bfb6      	itet	lt
 800ca86:	232d      	movlt	r3, #45	@ 0x2d
 800ca88:	232b      	movge	r3, #43	@ 0x2b
 800ca8a:	4249      	neglt	r1, r1
 800ca8c:	2909      	cmp	r1, #9
 800ca8e:	7002      	strb	r2, [r0, #0]
 800ca90:	7043      	strb	r3, [r0, #1]
 800ca92:	dd29      	ble.n	800cae8 <__exponent+0x68>
 800ca94:	f10d 0307 	add.w	r3, sp, #7
 800ca98:	461d      	mov	r5, r3
 800ca9a:	270a      	movs	r7, #10
 800ca9c:	fbb1 f6f7 	udiv	r6, r1, r7
 800caa0:	461a      	mov	r2, r3
 800caa2:	fb07 1416 	mls	r4, r7, r6, r1
 800caa6:	3430      	adds	r4, #48	@ 0x30
 800caa8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800caac:	460c      	mov	r4, r1
 800caae:	2c63      	cmp	r4, #99	@ 0x63
 800cab0:	4631      	mov	r1, r6
 800cab2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cab6:	dcf1      	bgt.n	800ca9c <__exponent+0x1c>
 800cab8:	3130      	adds	r1, #48	@ 0x30
 800caba:	1e94      	subs	r4, r2, #2
 800cabc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cac0:	4623      	mov	r3, r4
 800cac2:	1c41      	adds	r1, r0, #1
 800cac4:	42ab      	cmp	r3, r5
 800cac6:	d30a      	bcc.n	800cade <__exponent+0x5e>
 800cac8:	f10d 0309 	add.w	r3, sp, #9
 800cacc:	1a9b      	subs	r3, r3, r2
 800cace:	42ac      	cmp	r4, r5
 800cad0:	bf88      	it	hi
 800cad2:	2300      	movhi	r3, #0
 800cad4:	3302      	adds	r3, #2
 800cad6:	4403      	add	r3, r0
 800cad8:	1a18      	subs	r0, r3, r0
 800cada:	b003      	add	sp, #12
 800cadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cade:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cae2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cae6:	e7ed      	b.n	800cac4 <__exponent+0x44>
 800cae8:	2330      	movs	r3, #48	@ 0x30
 800caea:	3130      	adds	r1, #48	@ 0x30
 800caec:	7083      	strb	r3, [r0, #2]
 800caee:	70c1      	strb	r1, [r0, #3]
 800caf0:	1d03      	adds	r3, r0, #4
 800caf2:	e7f1      	b.n	800cad8 <__exponent+0x58>

0800caf4 <_printf_float>:
 800caf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf8:	b091      	sub	sp, #68	@ 0x44
 800cafa:	460c      	mov	r4, r1
 800cafc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800cb00:	4616      	mov	r6, r2
 800cb02:	461f      	mov	r7, r3
 800cb04:	4605      	mov	r5, r0
 800cb06:	f000 fde7 	bl	800d6d8 <_localeconv_r>
 800cb0a:	6803      	ldr	r3, [r0, #0]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	9308      	str	r3, [sp, #32]
 800cb10:	f7f3 fb8e 	bl	8000230 <strlen>
 800cb14:	2300      	movs	r3, #0
 800cb16:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb18:	f8d8 3000 	ldr.w	r3, [r8]
 800cb1c:	9009      	str	r0, [sp, #36]	@ 0x24
 800cb1e:	3307      	adds	r3, #7
 800cb20:	f023 0307 	bic.w	r3, r3, #7
 800cb24:	f103 0208 	add.w	r2, r3, #8
 800cb28:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cb2c:	f8d4 b000 	ldr.w	fp, [r4]
 800cb30:	f8c8 2000 	str.w	r2, [r8]
 800cb34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cb3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb3e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cb42:	f04f 32ff 	mov.w	r2, #4294967295
 800cb46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cb4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cb4e:	4b9c      	ldr	r3, [pc, #624]	@ (800cdc0 <_printf_float+0x2cc>)
 800cb50:	f7f3 ffcc 	bl	8000aec <__aeabi_dcmpun>
 800cb54:	bb70      	cbnz	r0, 800cbb4 <_printf_float+0xc0>
 800cb56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb5e:	4b98      	ldr	r3, [pc, #608]	@ (800cdc0 <_printf_float+0x2cc>)
 800cb60:	f7f3 ffa6 	bl	8000ab0 <__aeabi_dcmple>
 800cb64:	bb30      	cbnz	r0, 800cbb4 <_printf_float+0xc0>
 800cb66:	2200      	movs	r2, #0
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	4649      	mov	r1, r9
 800cb6e:	f7f3 ff95 	bl	8000a9c <__aeabi_dcmplt>
 800cb72:	b110      	cbz	r0, 800cb7a <_printf_float+0x86>
 800cb74:	232d      	movs	r3, #45	@ 0x2d
 800cb76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb7a:	4a92      	ldr	r2, [pc, #584]	@ (800cdc4 <_printf_float+0x2d0>)
 800cb7c:	4b92      	ldr	r3, [pc, #584]	@ (800cdc8 <_printf_float+0x2d4>)
 800cb7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb82:	bf8c      	ite	hi
 800cb84:	4690      	movhi	r8, r2
 800cb86:	4698      	movls	r8, r3
 800cb88:	2303      	movs	r3, #3
 800cb8a:	f04f 0900 	mov.w	r9, #0
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	f02b 0304 	bic.w	r3, fp, #4
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	4633      	mov	r3, r6
 800cb98:	4621      	mov	r1, r4
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	9700      	str	r7, [sp, #0]
 800cb9e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800cba0:	f000 f9d4 	bl	800cf4c <_printf_common>
 800cba4:	3001      	adds	r0, #1
 800cba6:	f040 8090 	bne.w	800ccca <_printf_float+0x1d6>
 800cbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cbae:	b011      	add	sp, #68	@ 0x44
 800cbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb4:	4642      	mov	r2, r8
 800cbb6:	464b      	mov	r3, r9
 800cbb8:	4640      	mov	r0, r8
 800cbba:	4649      	mov	r1, r9
 800cbbc:	f7f3 ff96 	bl	8000aec <__aeabi_dcmpun>
 800cbc0:	b148      	cbz	r0, 800cbd6 <_printf_float+0xe2>
 800cbc2:	464b      	mov	r3, r9
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	bfb8      	it	lt
 800cbc8:	232d      	movlt	r3, #45	@ 0x2d
 800cbca:	4a80      	ldr	r2, [pc, #512]	@ (800cdcc <_printf_float+0x2d8>)
 800cbcc:	bfb8      	it	lt
 800cbce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cbd2:	4b7f      	ldr	r3, [pc, #508]	@ (800cdd0 <_printf_float+0x2dc>)
 800cbd4:	e7d3      	b.n	800cb7e <_printf_float+0x8a>
 800cbd6:	6863      	ldr	r3, [r4, #4]
 800cbd8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800cbdc:	1c5a      	adds	r2, r3, #1
 800cbde:	d13f      	bne.n	800cc60 <_printf_float+0x16c>
 800cbe0:	2306      	movs	r3, #6
 800cbe2:	6063      	str	r3, [r4, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800cbea:	6023      	str	r3, [r4, #0]
 800cbec:	9206      	str	r2, [sp, #24]
 800cbee:	aa0e      	add	r2, sp, #56	@ 0x38
 800cbf0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800cbf4:	aa0d      	add	r2, sp, #52	@ 0x34
 800cbf6:	9203      	str	r2, [sp, #12]
 800cbf8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800cbfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cc00:	6863      	ldr	r3, [r4, #4]
 800cc02:	4642      	mov	r2, r8
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	4628      	mov	r0, r5
 800cc08:	464b      	mov	r3, r9
 800cc0a:	910a      	str	r1, [sp, #40]	@ 0x28
 800cc0c:	f7ff fed4 	bl	800c9b8 <__cvt>
 800cc10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc12:	4680      	mov	r8, r0
 800cc14:	2947      	cmp	r1, #71	@ 0x47
 800cc16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cc18:	d128      	bne.n	800cc6c <_printf_float+0x178>
 800cc1a:	1cc8      	adds	r0, r1, #3
 800cc1c:	db02      	blt.n	800cc24 <_printf_float+0x130>
 800cc1e:	6863      	ldr	r3, [r4, #4]
 800cc20:	4299      	cmp	r1, r3
 800cc22:	dd40      	ble.n	800cca6 <_printf_float+0x1b2>
 800cc24:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc28:	fa5f fa8a 	uxtb.w	sl, sl
 800cc2c:	4652      	mov	r2, sl
 800cc2e:	3901      	subs	r1, #1
 800cc30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cc34:	910d      	str	r1, [sp, #52]	@ 0x34
 800cc36:	f7ff ff23 	bl	800ca80 <__exponent>
 800cc3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc3c:	4681      	mov	r9, r0
 800cc3e:	1813      	adds	r3, r2, r0
 800cc40:	2a01      	cmp	r2, #1
 800cc42:	6123      	str	r3, [r4, #16]
 800cc44:	dc02      	bgt.n	800cc4c <_printf_float+0x158>
 800cc46:	6822      	ldr	r2, [r4, #0]
 800cc48:	07d2      	lsls	r2, r2, #31
 800cc4a:	d501      	bpl.n	800cc50 <_printf_float+0x15c>
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d09e      	beq.n	800cb96 <_printf_float+0xa2>
 800cc58:	232d      	movs	r3, #45	@ 0x2d
 800cc5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc5e:	e79a      	b.n	800cb96 <_printf_float+0xa2>
 800cc60:	2947      	cmp	r1, #71	@ 0x47
 800cc62:	d1bf      	bne.n	800cbe4 <_printf_float+0xf0>
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1bd      	bne.n	800cbe4 <_printf_float+0xf0>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e7ba      	b.n	800cbe2 <_printf_float+0xee>
 800cc6c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc70:	d9dc      	bls.n	800cc2c <_printf_float+0x138>
 800cc72:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cc76:	d118      	bne.n	800ccaa <_printf_float+0x1b6>
 800cc78:	2900      	cmp	r1, #0
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	dd0b      	ble.n	800cc96 <_printf_float+0x1a2>
 800cc7e:	6121      	str	r1, [r4, #16]
 800cc80:	b913      	cbnz	r3, 800cc88 <_printf_float+0x194>
 800cc82:	6822      	ldr	r2, [r4, #0]
 800cc84:	07d0      	lsls	r0, r2, #31
 800cc86:	d502      	bpl.n	800cc8e <_printf_float+0x19a>
 800cc88:	3301      	adds	r3, #1
 800cc8a:	440b      	add	r3, r1
 800cc8c:	6123      	str	r3, [r4, #16]
 800cc8e:	f04f 0900 	mov.w	r9, #0
 800cc92:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cc94:	e7dc      	b.n	800cc50 <_printf_float+0x15c>
 800cc96:	b913      	cbnz	r3, 800cc9e <_printf_float+0x1aa>
 800cc98:	6822      	ldr	r2, [r4, #0]
 800cc9a:	07d2      	lsls	r2, r2, #31
 800cc9c:	d501      	bpl.n	800cca2 <_printf_float+0x1ae>
 800cc9e:	3302      	adds	r3, #2
 800cca0:	e7f4      	b.n	800cc8c <_printf_float+0x198>
 800cca2:	2301      	movs	r3, #1
 800cca4:	e7f2      	b.n	800cc8c <_printf_float+0x198>
 800cca6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ccaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccac:	4299      	cmp	r1, r3
 800ccae:	db05      	blt.n	800ccbc <_printf_float+0x1c8>
 800ccb0:	6823      	ldr	r3, [r4, #0]
 800ccb2:	6121      	str	r1, [r4, #16]
 800ccb4:	07d8      	lsls	r0, r3, #31
 800ccb6:	d5ea      	bpl.n	800cc8e <_printf_float+0x19a>
 800ccb8:	1c4b      	adds	r3, r1, #1
 800ccba:	e7e7      	b.n	800cc8c <_printf_float+0x198>
 800ccbc:	2900      	cmp	r1, #0
 800ccbe:	bfcc      	ite	gt
 800ccc0:	2201      	movgt	r2, #1
 800ccc2:	f1c1 0202 	rsble	r2, r1, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	e7e0      	b.n	800cc8c <_printf_float+0x198>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	055a      	lsls	r2, r3, #21
 800ccce:	d407      	bmi.n	800cce0 <_printf_float+0x1ec>
 800ccd0:	6923      	ldr	r3, [r4, #16]
 800ccd2:	4642      	mov	r2, r8
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b8      	blx	r7
 800ccda:	3001      	adds	r0, #1
 800ccdc:	d12b      	bne.n	800cd36 <_printf_float+0x242>
 800ccde:	e764      	b.n	800cbaa <_printf_float+0xb6>
 800cce0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cce4:	f240 80dc 	bls.w	800cea0 <_printf_float+0x3ac>
 800cce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ccec:	2200      	movs	r2, #0
 800ccee:	2300      	movs	r3, #0
 800ccf0:	f7f3 feca 	bl	8000a88 <__aeabi_dcmpeq>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d033      	beq.n	800cd60 <_printf_float+0x26c>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	4a35      	ldr	r2, [pc, #212]	@ (800cdd4 <_printf_float+0x2e0>)
 800cd00:	47b8      	blx	r7
 800cd02:	3001      	adds	r0, #1
 800cd04:	f43f af51 	beq.w	800cbaa <_printf_float+0xb6>
 800cd08:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800cd0c:	4543      	cmp	r3, r8
 800cd0e:	db02      	blt.n	800cd16 <_printf_float+0x222>
 800cd10:	6823      	ldr	r3, [r4, #0]
 800cd12:	07d8      	lsls	r0, r3, #31
 800cd14:	d50f      	bpl.n	800cd36 <_printf_float+0x242>
 800cd16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	47b8      	blx	r7
 800cd20:	3001      	adds	r0, #1
 800cd22:	f43f af42 	beq.w	800cbaa <_printf_float+0xb6>
 800cd26:	f04f 0900 	mov.w	r9, #0
 800cd2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd2e:	f104 0a1a 	add.w	sl, r4, #26
 800cd32:	45c8      	cmp	r8, r9
 800cd34:	dc09      	bgt.n	800cd4a <_printf_float+0x256>
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	079b      	lsls	r3, r3, #30
 800cd3a:	f100 8102 	bmi.w	800cf42 <_printf_float+0x44e>
 800cd3e:	68e0      	ldr	r0, [r4, #12]
 800cd40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd42:	4298      	cmp	r0, r3
 800cd44:	bfb8      	it	lt
 800cd46:	4618      	movlt	r0, r3
 800cd48:	e731      	b.n	800cbae <_printf_float+0xba>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4652      	mov	r2, sl
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4628      	mov	r0, r5
 800cd52:	47b8      	blx	r7
 800cd54:	3001      	adds	r0, #1
 800cd56:	f43f af28 	beq.w	800cbaa <_printf_float+0xb6>
 800cd5a:	f109 0901 	add.w	r9, r9, #1
 800cd5e:	e7e8      	b.n	800cd32 <_printf_float+0x23e>
 800cd60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	dc38      	bgt.n	800cdd8 <_printf_float+0x2e4>
 800cd66:	2301      	movs	r3, #1
 800cd68:	4631      	mov	r1, r6
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	4a19      	ldr	r2, [pc, #100]	@ (800cdd4 <_printf_float+0x2e0>)
 800cd6e:	47b8      	blx	r7
 800cd70:	3001      	adds	r0, #1
 800cd72:	f43f af1a 	beq.w	800cbaa <_printf_float+0xb6>
 800cd76:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800cd7a:	ea59 0303 	orrs.w	r3, r9, r3
 800cd7e:	d102      	bne.n	800cd86 <_printf_float+0x292>
 800cd80:	6823      	ldr	r3, [r4, #0]
 800cd82:	07d9      	lsls	r1, r3, #31
 800cd84:	d5d7      	bpl.n	800cd36 <_printf_float+0x242>
 800cd86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	47b8      	blx	r7
 800cd90:	3001      	adds	r0, #1
 800cd92:	f43f af0a 	beq.w	800cbaa <_printf_float+0xb6>
 800cd96:	f04f 0a00 	mov.w	sl, #0
 800cd9a:	f104 0b1a 	add.w	fp, r4, #26
 800cd9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cda0:	425b      	negs	r3, r3
 800cda2:	4553      	cmp	r3, sl
 800cda4:	dc01      	bgt.n	800cdaa <_printf_float+0x2b6>
 800cda6:	464b      	mov	r3, r9
 800cda8:	e793      	b.n	800ccd2 <_printf_float+0x1de>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	465a      	mov	r2, fp
 800cdae:	4631      	mov	r1, r6
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	47b8      	blx	r7
 800cdb4:	3001      	adds	r0, #1
 800cdb6:	f43f aef8 	beq.w	800cbaa <_printf_float+0xb6>
 800cdba:	f10a 0a01 	add.w	sl, sl, #1
 800cdbe:	e7ee      	b.n	800cd9e <_printf_float+0x2aa>
 800cdc0:	7fefffff 	.word	0x7fefffff
 800cdc4:	0800faa7 	.word	0x0800faa7
 800cdc8:	0800faa3 	.word	0x0800faa3
 800cdcc:	0800faaf 	.word	0x0800faaf
 800cdd0:	0800faab 	.word	0x0800faab
 800cdd4:	0800fab3 	.word	0x0800fab3
 800cdd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cdda:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800cdde:	4553      	cmp	r3, sl
 800cde0:	bfa8      	it	ge
 800cde2:	4653      	movge	r3, sl
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	4699      	mov	r9, r3
 800cde8:	dc36      	bgt.n	800ce58 <_printf_float+0x364>
 800cdea:	f04f 0b00 	mov.w	fp, #0
 800cdee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cdf2:	f104 021a 	add.w	r2, r4, #26
 800cdf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cdf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdfa:	eba3 0309 	sub.w	r3, r3, r9
 800cdfe:	455b      	cmp	r3, fp
 800ce00:	dc31      	bgt.n	800ce66 <_printf_float+0x372>
 800ce02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce04:	459a      	cmp	sl, r3
 800ce06:	dc3a      	bgt.n	800ce7e <_printf_float+0x38a>
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	07da      	lsls	r2, r3, #31
 800ce0c:	d437      	bmi.n	800ce7e <_printf_float+0x38a>
 800ce0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce10:	ebaa 0903 	sub.w	r9, sl, r3
 800ce14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce16:	ebaa 0303 	sub.w	r3, sl, r3
 800ce1a:	4599      	cmp	r9, r3
 800ce1c:	bfa8      	it	ge
 800ce1e:	4699      	movge	r9, r3
 800ce20:	f1b9 0f00 	cmp.w	r9, #0
 800ce24:	dc33      	bgt.n	800ce8e <_printf_float+0x39a>
 800ce26:	f04f 0800 	mov.w	r8, #0
 800ce2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce2e:	f104 0b1a 	add.w	fp, r4, #26
 800ce32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce34:	ebaa 0303 	sub.w	r3, sl, r3
 800ce38:	eba3 0309 	sub.w	r3, r3, r9
 800ce3c:	4543      	cmp	r3, r8
 800ce3e:	f77f af7a 	ble.w	800cd36 <_printf_float+0x242>
 800ce42:	2301      	movs	r3, #1
 800ce44:	465a      	mov	r2, fp
 800ce46:	4631      	mov	r1, r6
 800ce48:	4628      	mov	r0, r5
 800ce4a:	47b8      	blx	r7
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	f43f aeac 	beq.w	800cbaa <_printf_float+0xb6>
 800ce52:	f108 0801 	add.w	r8, r8, #1
 800ce56:	e7ec      	b.n	800ce32 <_printf_float+0x33e>
 800ce58:	4642      	mov	r2, r8
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	47b8      	blx	r7
 800ce60:	3001      	adds	r0, #1
 800ce62:	d1c2      	bne.n	800cdea <_printf_float+0x2f6>
 800ce64:	e6a1      	b.n	800cbaa <_printf_float+0xb6>
 800ce66:	2301      	movs	r3, #1
 800ce68:	4631      	mov	r1, r6
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	920a      	str	r2, [sp, #40]	@ 0x28
 800ce6e:	47b8      	blx	r7
 800ce70:	3001      	adds	r0, #1
 800ce72:	f43f ae9a 	beq.w	800cbaa <_printf_float+0xb6>
 800ce76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce78:	f10b 0b01 	add.w	fp, fp, #1
 800ce7c:	e7bb      	b.n	800cdf6 <_printf_float+0x302>
 800ce7e:	4631      	mov	r1, r6
 800ce80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ce84:	4628      	mov	r0, r5
 800ce86:	47b8      	blx	r7
 800ce88:	3001      	adds	r0, #1
 800ce8a:	d1c0      	bne.n	800ce0e <_printf_float+0x31a>
 800ce8c:	e68d      	b.n	800cbaa <_printf_float+0xb6>
 800ce8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce90:	464b      	mov	r3, r9
 800ce92:	4631      	mov	r1, r6
 800ce94:	4628      	mov	r0, r5
 800ce96:	4442      	add	r2, r8
 800ce98:	47b8      	blx	r7
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	d1c3      	bne.n	800ce26 <_printf_float+0x332>
 800ce9e:	e684      	b.n	800cbaa <_printf_float+0xb6>
 800cea0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800cea4:	f1ba 0f01 	cmp.w	sl, #1
 800cea8:	dc01      	bgt.n	800ceae <_printf_float+0x3ba>
 800ceaa:	07db      	lsls	r3, r3, #31
 800ceac:	d536      	bpl.n	800cf1c <_printf_float+0x428>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	4642      	mov	r2, r8
 800ceb2:	4631      	mov	r1, r6
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	47b8      	blx	r7
 800ceb8:	3001      	adds	r0, #1
 800ceba:	f43f ae76 	beq.w	800cbaa <_printf_float+0xb6>
 800cebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cec2:	4631      	mov	r1, r6
 800cec4:	4628      	mov	r0, r5
 800cec6:	47b8      	blx	r7
 800cec8:	3001      	adds	r0, #1
 800ceca:	f43f ae6e 	beq.w	800cbaa <_printf_float+0xb6>
 800cece:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ced2:	2200      	movs	r2, #0
 800ced4:	2300      	movs	r3, #0
 800ced6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ceda:	f7f3 fdd5 	bl	8000a88 <__aeabi_dcmpeq>
 800cede:	b9c0      	cbnz	r0, 800cf12 <_printf_float+0x41e>
 800cee0:	4653      	mov	r3, sl
 800cee2:	f108 0201 	add.w	r2, r8, #1
 800cee6:	4631      	mov	r1, r6
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b8      	blx	r7
 800ceec:	3001      	adds	r0, #1
 800ceee:	d10c      	bne.n	800cf0a <_printf_float+0x416>
 800cef0:	e65b      	b.n	800cbaa <_printf_float+0xb6>
 800cef2:	2301      	movs	r3, #1
 800cef4:	465a      	mov	r2, fp
 800cef6:	4631      	mov	r1, r6
 800cef8:	4628      	mov	r0, r5
 800cefa:	47b8      	blx	r7
 800cefc:	3001      	adds	r0, #1
 800cefe:	f43f ae54 	beq.w	800cbaa <_printf_float+0xb6>
 800cf02:	f108 0801 	add.w	r8, r8, #1
 800cf06:	45d0      	cmp	r8, sl
 800cf08:	dbf3      	blt.n	800cef2 <_printf_float+0x3fe>
 800cf0a:	464b      	mov	r3, r9
 800cf0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cf10:	e6e0      	b.n	800ccd4 <_printf_float+0x1e0>
 800cf12:	f04f 0800 	mov.w	r8, #0
 800cf16:	f104 0b1a 	add.w	fp, r4, #26
 800cf1a:	e7f4      	b.n	800cf06 <_printf_float+0x412>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	4642      	mov	r2, r8
 800cf20:	e7e1      	b.n	800cee6 <_printf_float+0x3f2>
 800cf22:	2301      	movs	r3, #1
 800cf24:	464a      	mov	r2, r9
 800cf26:	4631      	mov	r1, r6
 800cf28:	4628      	mov	r0, r5
 800cf2a:	47b8      	blx	r7
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	f43f ae3c 	beq.w	800cbaa <_printf_float+0xb6>
 800cf32:	f108 0801 	add.w	r8, r8, #1
 800cf36:	68e3      	ldr	r3, [r4, #12]
 800cf38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cf3a:	1a5b      	subs	r3, r3, r1
 800cf3c:	4543      	cmp	r3, r8
 800cf3e:	dcf0      	bgt.n	800cf22 <_printf_float+0x42e>
 800cf40:	e6fd      	b.n	800cd3e <_printf_float+0x24a>
 800cf42:	f04f 0800 	mov.w	r8, #0
 800cf46:	f104 0919 	add.w	r9, r4, #25
 800cf4a:	e7f4      	b.n	800cf36 <_printf_float+0x442>

0800cf4c <_printf_common>:
 800cf4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf50:	4616      	mov	r6, r2
 800cf52:	4698      	mov	r8, r3
 800cf54:	688a      	ldr	r2, [r1, #8]
 800cf56:	690b      	ldr	r3, [r1, #16]
 800cf58:	4607      	mov	r7, r0
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	bfb8      	it	lt
 800cf5e:	4613      	movlt	r3, r2
 800cf60:	6033      	str	r3, [r6, #0]
 800cf62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf66:	460c      	mov	r4, r1
 800cf68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf6c:	b10a      	cbz	r2, 800cf72 <_printf_common+0x26>
 800cf6e:	3301      	adds	r3, #1
 800cf70:	6033      	str	r3, [r6, #0]
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	0699      	lsls	r1, r3, #26
 800cf76:	bf42      	ittt	mi
 800cf78:	6833      	ldrmi	r3, [r6, #0]
 800cf7a:	3302      	addmi	r3, #2
 800cf7c:	6033      	strmi	r3, [r6, #0]
 800cf7e:	6825      	ldr	r5, [r4, #0]
 800cf80:	f015 0506 	ands.w	r5, r5, #6
 800cf84:	d106      	bne.n	800cf94 <_printf_common+0x48>
 800cf86:	f104 0a19 	add.w	sl, r4, #25
 800cf8a:	68e3      	ldr	r3, [r4, #12]
 800cf8c:	6832      	ldr	r2, [r6, #0]
 800cf8e:	1a9b      	subs	r3, r3, r2
 800cf90:	42ab      	cmp	r3, r5
 800cf92:	dc2b      	bgt.n	800cfec <_printf_common+0xa0>
 800cf94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf98:	6822      	ldr	r2, [r4, #0]
 800cf9a:	3b00      	subs	r3, #0
 800cf9c:	bf18      	it	ne
 800cf9e:	2301      	movne	r3, #1
 800cfa0:	0692      	lsls	r2, r2, #26
 800cfa2:	d430      	bmi.n	800d006 <_printf_common+0xba>
 800cfa4:	4641      	mov	r1, r8
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cfac:	47c8      	blx	r9
 800cfae:	3001      	adds	r0, #1
 800cfb0:	d023      	beq.n	800cffa <_printf_common+0xae>
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	6922      	ldr	r2, [r4, #16]
 800cfb6:	f003 0306 	and.w	r3, r3, #6
 800cfba:	2b04      	cmp	r3, #4
 800cfbc:	bf14      	ite	ne
 800cfbe:	2500      	movne	r5, #0
 800cfc0:	6833      	ldreq	r3, [r6, #0]
 800cfc2:	f04f 0600 	mov.w	r6, #0
 800cfc6:	bf08      	it	eq
 800cfc8:	68e5      	ldreq	r5, [r4, #12]
 800cfca:	f104 041a 	add.w	r4, r4, #26
 800cfce:	bf08      	it	eq
 800cfd0:	1aed      	subeq	r5, r5, r3
 800cfd2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cfd6:	bf08      	it	eq
 800cfd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	bfc4      	itt	gt
 800cfe0:	1a9b      	subgt	r3, r3, r2
 800cfe2:	18ed      	addgt	r5, r5, r3
 800cfe4:	42b5      	cmp	r5, r6
 800cfe6:	d11a      	bne.n	800d01e <_printf_common+0xd2>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e008      	b.n	800cffe <_printf_common+0xb2>
 800cfec:	2301      	movs	r3, #1
 800cfee:	4652      	mov	r2, sl
 800cff0:	4641      	mov	r1, r8
 800cff2:	4638      	mov	r0, r7
 800cff4:	47c8      	blx	r9
 800cff6:	3001      	adds	r0, #1
 800cff8:	d103      	bne.n	800d002 <_printf_common+0xb6>
 800cffa:	f04f 30ff 	mov.w	r0, #4294967295
 800cffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d002:	3501      	adds	r5, #1
 800d004:	e7c1      	b.n	800cf8a <_printf_common+0x3e>
 800d006:	2030      	movs	r0, #48	@ 0x30
 800d008:	18e1      	adds	r1, r4, r3
 800d00a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d00e:	1c5a      	adds	r2, r3, #1
 800d010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d014:	4422      	add	r2, r4
 800d016:	3302      	adds	r3, #2
 800d018:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d01c:	e7c2      	b.n	800cfa4 <_printf_common+0x58>
 800d01e:	2301      	movs	r3, #1
 800d020:	4622      	mov	r2, r4
 800d022:	4641      	mov	r1, r8
 800d024:	4638      	mov	r0, r7
 800d026:	47c8      	blx	r9
 800d028:	3001      	adds	r0, #1
 800d02a:	d0e6      	beq.n	800cffa <_printf_common+0xae>
 800d02c:	3601      	adds	r6, #1
 800d02e:	e7d9      	b.n	800cfe4 <_printf_common+0x98>

0800d030 <_printf_i>:
 800d030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d034:	7e0f      	ldrb	r7, [r1, #24]
 800d036:	4691      	mov	r9, r2
 800d038:	2f78      	cmp	r7, #120	@ 0x78
 800d03a:	4680      	mov	r8, r0
 800d03c:	460c      	mov	r4, r1
 800d03e:	469a      	mov	sl, r3
 800d040:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d046:	d807      	bhi.n	800d058 <_printf_i+0x28>
 800d048:	2f62      	cmp	r7, #98	@ 0x62
 800d04a:	d80a      	bhi.n	800d062 <_printf_i+0x32>
 800d04c:	2f00      	cmp	r7, #0
 800d04e:	f000 80d1 	beq.w	800d1f4 <_printf_i+0x1c4>
 800d052:	2f58      	cmp	r7, #88	@ 0x58
 800d054:	f000 80b8 	beq.w	800d1c8 <_printf_i+0x198>
 800d058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d05c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d060:	e03a      	b.n	800d0d8 <_printf_i+0xa8>
 800d062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d066:	2b15      	cmp	r3, #21
 800d068:	d8f6      	bhi.n	800d058 <_printf_i+0x28>
 800d06a:	a101      	add	r1, pc, #4	@ (adr r1, 800d070 <_printf_i+0x40>)
 800d06c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d070:	0800d0c9 	.word	0x0800d0c9
 800d074:	0800d0dd 	.word	0x0800d0dd
 800d078:	0800d059 	.word	0x0800d059
 800d07c:	0800d059 	.word	0x0800d059
 800d080:	0800d059 	.word	0x0800d059
 800d084:	0800d059 	.word	0x0800d059
 800d088:	0800d0dd 	.word	0x0800d0dd
 800d08c:	0800d059 	.word	0x0800d059
 800d090:	0800d059 	.word	0x0800d059
 800d094:	0800d059 	.word	0x0800d059
 800d098:	0800d059 	.word	0x0800d059
 800d09c:	0800d1db 	.word	0x0800d1db
 800d0a0:	0800d107 	.word	0x0800d107
 800d0a4:	0800d195 	.word	0x0800d195
 800d0a8:	0800d059 	.word	0x0800d059
 800d0ac:	0800d059 	.word	0x0800d059
 800d0b0:	0800d1fd 	.word	0x0800d1fd
 800d0b4:	0800d059 	.word	0x0800d059
 800d0b8:	0800d107 	.word	0x0800d107
 800d0bc:	0800d059 	.word	0x0800d059
 800d0c0:	0800d059 	.word	0x0800d059
 800d0c4:	0800d19d 	.word	0x0800d19d
 800d0c8:	6833      	ldr	r3, [r6, #0]
 800d0ca:	1d1a      	adds	r2, r3, #4
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6032      	str	r2, [r6, #0]
 800d0d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e09c      	b.n	800d216 <_printf_i+0x1e6>
 800d0dc:	6833      	ldr	r3, [r6, #0]
 800d0de:	6820      	ldr	r0, [r4, #0]
 800d0e0:	1d19      	adds	r1, r3, #4
 800d0e2:	6031      	str	r1, [r6, #0]
 800d0e4:	0606      	lsls	r6, r0, #24
 800d0e6:	d501      	bpl.n	800d0ec <_printf_i+0xbc>
 800d0e8:	681d      	ldr	r5, [r3, #0]
 800d0ea:	e003      	b.n	800d0f4 <_printf_i+0xc4>
 800d0ec:	0645      	lsls	r5, r0, #25
 800d0ee:	d5fb      	bpl.n	800d0e8 <_printf_i+0xb8>
 800d0f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d0f4:	2d00      	cmp	r5, #0
 800d0f6:	da03      	bge.n	800d100 <_printf_i+0xd0>
 800d0f8:	232d      	movs	r3, #45	@ 0x2d
 800d0fa:	426d      	negs	r5, r5
 800d0fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d100:	230a      	movs	r3, #10
 800d102:	4858      	ldr	r0, [pc, #352]	@ (800d264 <_printf_i+0x234>)
 800d104:	e011      	b.n	800d12a <_printf_i+0xfa>
 800d106:	6821      	ldr	r1, [r4, #0]
 800d108:	6833      	ldr	r3, [r6, #0]
 800d10a:	0608      	lsls	r0, r1, #24
 800d10c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d110:	d402      	bmi.n	800d118 <_printf_i+0xe8>
 800d112:	0649      	lsls	r1, r1, #25
 800d114:	bf48      	it	mi
 800d116:	b2ad      	uxthmi	r5, r5
 800d118:	2f6f      	cmp	r7, #111	@ 0x6f
 800d11a:	6033      	str	r3, [r6, #0]
 800d11c:	bf14      	ite	ne
 800d11e:	230a      	movne	r3, #10
 800d120:	2308      	moveq	r3, #8
 800d122:	4850      	ldr	r0, [pc, #320]	@ (800d264 <_printf_i+0x234>)
 800d124:	2100      	movs	r1, #0
 800d126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d12a:	6866      	ldr	r6, [r4, #4]
 800d12c:	2e00      	cmp	r6, #0
 800d12e:	60a6      	str	r6, [r4, #8]
 800d130:	db05      	blt.n	800d13e <_printf_i+0x10e>
 800d132:	6821      	ldr	r1, [r4, #0]
 800d134:	432e      	orrs	r6, r5
 800d136:	f021 0104 	bic.w	r1, r1, #4
 800d13a:	6021      	str	r1, [r4, #0]
 800d13c:	d04b      	beq.n	800d1d6 <_printf_i+0x1a6>
 800d13e:	4616      	mov	r6, r2
 800d140:	fbb5 f1f3 	udiv	r1, r5, r3
 800d144:	fb03 5711 	mls	r7, r3, r1, r5
 800d148:	5dc7      	ldrb	r7, [r0, r7]
 800d14a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d14e:	462f      	mov	r7, r5
 800d150:	42bb      	cmp	r3, r7
 800d152:	460d      	mov	r5, r1
 800d154:	d9f4      	bls.n	800d140 <_printf_i+0x110>
 800d156:	2b08      	cmp	r3, #8
 800d158:	d10b      	bne.n	800d172 <_printf_i+0x142>
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	07df      	lsls	r7, r3, #31
 800d15e:	d508      	bpl.n	800d172 <_printf_i+0x142>
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	6861      	ldr	r1, [r4, #4]
 800d164:	4299      	cmp	r1, r3
 800d166:	bfde      	ittt	le
 800d168:	2330      	movle	r3, #48	@ 0x30
 800d16a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d16e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d172:	1b92      	subs	r2, r2, r6
 800d174:	6122      	str	r2, [r4, #16]
 800d176:	464b      	mov	r3, r9
 800d178:	4621      	mov	r1, r4
 800d17a:	4640      	mov	r0, r8
 800d17c:	f8cd a000 	str.w	sl, [sp]
 800d180:	aa03      	add	r2, sp, #12
 800d182:	f7ff fee3 	bl	800cf4c <_printf_common>
 800d186:	3001      	adds	r0, #1
 800d188:	d14a      	bne.n	800d220 <_printf_i+0x1f0>
 800d18a:	f04f 30ff 	mov.w	r0, #4294967295
 800d18e:	b004      	add	sp, #16
 800d190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	f043 0320 	orr.w	r3, r3, #32
 800d19a:	6023      	str	r3, [r4, #0]
 800d19c:	2778      	movs	r7, #120	@ 0x78
 800d19e:	4832      	ldr	r0, [pc, #200]	@ (800d268 <_printf_i+0x238>)
 800d1a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	6831      	ldr	r1, [r6, #0]
 800d1a8:	061f      	lsls	r7, r3, #24
 800d1aa:	f851 5b04 	ldr.w	r5, [r1], #4
 800d1ae:	d402      	bmi.n	800d1b6 <_printf_i+0x186>
 800d1b0:	065f      	lsls	r7, r3, #25
 800d1b2:	bf48      	it	mi
 800d1b4:	b2ad      	uxthmi	r5, r5
 800d1b6:	6031      	str	r1, [r6, #0]
 800d1b8:	07d9      	lsls	r1, r3, #31
 800d1ba:	bf44      	itt	mi
 800d1bc:	f043 0320 	orrmi.w	r3, r3, #32
 800d1c0:	6023      	strmi	r3, [r4, #0]
 800d1c2:	b11d      	cbz	r5, 800d1cc <_printf_i+0x19c>
 800d1c4:	2310      	movs	r3, #16
 800d1c6:	e7ad      	b.n	800d124 <_printf_i+0xf4>
 800d1c8:	4826      	ldr	r0, [pc, #152]	@ (800d264 <_printf_i+0x234>)
 800d1ca:	e7e9      	b.n	800d1a0 <_printf_i+0x170>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	f023 0320 	bic.w	r3, r3, #32
 800d1d2:	6023      	str	r3, [r4, #0]
 800d1d4:	e7f6      	b.n	800d1c4 <_printf_i+0x194>
 800d1d6:	4616      	mov	r6, r2
 800d1d8:	e7bd      	b.n	800d156 <_printf_i+0x126>
 800d1da:	6833      	ldr	r3, [r6, #0]
 800d1dc:	6825      	ldr	r5, [r4, #0]
 800d1de:	1d18      	adds	r0, r3, #4
 800d1e0:	6961      	ldr	r1, [r4, #20]
 800d1e2:	6030      	str	r0, [r6, #0]
 800d1e4:	062e      	lsls	r6, r5, #24
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	d501      	bpl.n	800d1ee <_printf_i+0x1be>
 800d1ea:	6019      	str	r1, [r3, #0]
 800d1ec:	e002      	b.n	800d1f4 <_printf_i+0x1c4>
 800d1ee:	0668      	lsls	r0, r5, #25
 800d1f0:	d5fb      	bpl.n	800d1ea <_printf_i+0x1ba>
 800d1f2:	8019      	strh	r1, [r3, #0]
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	4616      	mov	r6, r2
 800d1f8:	6123      	str	r3, [r4, #16]
 800d1fa:	e7bc      	b.n	800d176 <_printf_i+0x146>
 800d1fc:	6833      	ldr	r3, [r6, #0]
 800d1fe:	2100      	movs	r1, #0
 800d200:	1d1a      	adds	r2, r3, #4
 800d202:	6032      	str	r2, [r6, #0]
 800d204:	681e      	ldr	r6, [r3, #0]
 800d206:	6862      	ldr	r2, [r4, #4]
 800d208:	4630      	mov	r0, r6
 800d20a:	f000 fadc 	bl	800d7c6 <memchr>
 800d20e:	b108      	cbz	r0, 800d214 <_printf_i+0x1e4>
 800d210:	1b80      	subs	r0, r0, r6
 800d212:	6060      	str	r0, [r4, #4]
 800d214:	6863      	ldr	r3, [r4, #4]
 800d216:	6123      	str	r3, [r4, #16]
 800d218:	2300      	movs	r3, #0
 800d21a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d21e:	e7aa      	b.n	800d176 <_printf_i+0x146>
 800d220:	4632      	mov	r2, r6
 800d222:	4649      	mov	r1, r9
 800d224:	4640      	mov	r0, r8
 800d226:	6923      	ldr	r3, [r4, #16]
 800d228:	47d0      	blx	sl
 800d22a:	3001      	adds	r0, #1
 800d22c:	d0ad      	beq.n	800d18a <_printf_i+0x15a>
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	079b      	lsls	r3, r3, #30
 800d232:	d413      	bmi.n	800d25c <_printf_i+0x22c>
 800d234:	68e0      	ldr	r0, [r4, #12]
 800d236:	9b03      	ldr	r3, [sp, #12]
 800d238:	4298      	cmp	r0, r3
 800d23a:	bfb8      	it	lt
 800d23c:	4618      	movlt	r0, r3
 800d23e:	e7a6      	b.n	800d18e <_printf_i+0x15e>
 800d240:	2301      	movs	r3, #1
 800d242:	4632      	mov	r2, r6
 800d244:	4649      	mov	r1, r9
 800d246:	4640      	mov	r0, r8
 800d248:	47d0      	blx	sl
 800d24a:	3001      	adds	r0, #1
 800d24c:	d09d      	beq.n	800d18a <_printf_i+0x15a>
 800d24e:	3501      	adds	r5, #1
 800d250:	68e3      	ldr	r3, [r4, #12]
 800d252:	9903      	ldr	r1, [sp, #12]
 800d254:	1a5b      	subs	r3, r3, r1
 800d256:	42ab      	cmp	r3, r5
 800d258:	dcf2      	bgt.n	800d240 <_printf_i+0x210>
 800d25a:	e7eb      	b.n	800d234 <_printf_i+0x204>
 800d25c:	2500      	movs	r5, #0
 800d25e:	f104 0619 	add.w	r6, r4, #25
 800d262:	e7f5      	b.n	800d250 <_printf_i+0x220>
 800d264:	0800fab5 	.word	0x0800fab5
 800d268:	0800fac6 	.word	0x0800fac6

0800d26c <std>:
 800d26c:	2300      	movs	r3, #0
 800d26e:	b510      	push	{r4, lr}
 800d270:	4604      	mov	r4, r0
 800d272:	e9c0 3300 	strd	r3, r3, [r0]
 800d276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d27a:	6083      	str	r3, [r0, #8]
 800d27c:	8181      	strh	r1, [r0, #12]
 800d27e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d280:	81c2      	strh	r2, [r0, #14]
 800d282:	6183      	str	r3, [r0, #24]
 800d284:	4619      	mov	r1, r3
 800d286:	2208      	movs	r2, #8
 800d288:	305c      	adds	r0, #92	@ 0x5c
 800d28a:	f000 fa09 	bl	800d6a0 <memset>
 800d28e:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c4 <std+0x58>)
 800d290:	6224      	str	r4, [r4, #32]
 800d292:	6263      	str	r3, [r4, #36]	@ 0x24
 800d294:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <std+0x5c>)
 800d296:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d298:	4b0c      	ldr	r3, [pc, #48]	@ (800d2cc <std+0x60>)
 800d29a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d29c:	4b0c      	ldr	r3, [pc, #48]	@ (800d2d0 <std+0x64>)
 800d29e:	6323      	str	r3, [r4, #48]	@ 0x30
 800d2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d2d4 <std+0x68>)
 800d2a2:	429c      	cmp	r4, r3
 800d2a4:	d006      	beq.n	800d2b4 <std+0x48>
 800d2a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d2aa:	4294      	cmp	r4, r2
 800d2ac:	d002      	beq.n	800d2b4 <std+0x48>
 800d2ae:	33d0      	adds	r3, #208	@ 0xd0
 800d2b0:	429c      	cmp	r4, r3
 800d2b2:	d105      	bne.n	800d2c0 <std+0x54>
 800d2b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2bc:	f000 ba80 	b.w	800d7c0 <__retarget_lock_init_recursive>
 800d2c0:	bd10      	pop	{r4, pc}
 800d2c2:	bf00      	nop
 800d2c4:	0800d4f1 	.word	0x0800d4f1
 800d2c8:	0800d513 	.word	0x0800d513
 800d2cc:	0800d54b 	.word	0x0800d54b
 800d2d0:	0800d56f 	.word	0x0800d56f
 800d2d4:	20002348 	.word	0x20002348

0800d2d8 <stdio_exit_handler>:
 800d2d8:	4a02      	ldr	r2, [pc, #8]	@ (800d2e4 <stdio_exit_handler+0xc>)
 800d2da:	4903      	ldr	r1, [pc, #12]	@ (800d2e8 <stdio_exit_handler+0x10>)
 800d2dc:	4803      	ldr	r0, [pc, #12]	@ (800d2ec <stdio_exit_handler+0x14>)
 800d2de:	f000 b869 	b.w	800d3b4 <_fwalk_sglue>
 800d2e2:	bf00      	nop
 800d2e4:	20000034 	.word	0x20000034
 800d2e8:	0800f195 	.word	0x0800f195
 800d2ec:	200001b0 	.word	0x200001b0

0800d2f0 <cleanup_stdio>:
 800d2f0:	6841      	ldr	r1, [r0, #4]
 800d2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d324 <cleanup_stdio+0x34>)
 800d2f4:	b510      	push	{r4, lr}
 800d2f6:	4299      	cmp	r1, r3
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	d001      	beq.n	800d300 <cleanup_stdio+0x10>
 800d2fc:	f001 ff4a 	bl	800f194 <_fflush_r>
 800d300:	68a1      	ldr	r1, [r4, #8]
 800d302:	4b09      	ldr	r3, [pc, #36]	@ (800d328 <cleanup_stdio+0x38>)
 800d304:	4299      	cmp	r1, r3
 800d306:	d002      	beq.n	800d30e <cleanup_stdio+0x1e>
 800d308:	4620      	mov	r0, r4
 800d30a:	f001 ff43 	bl	800f194 <_fflush_r>
 800d30e:	68e1      	ldr	r1, [r4, #12]
 800d310:	4b06      	ldr	r3, [pc, #24]	@ (800d32c <cleanup_stdio+0x3c>)
 800d312:	4299      	cmp	r1, r3
 800d314:	d004      	beq.n	800d320 <cleanup_stdio+0x30>
 800d316:	4620      	mov	r0, r4
 800d318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d31c:	f001 bf3a 	b.w	800f194 <_fflush_r>
 800d320:	bd10      	pop	{r4, pc}
 800d322:	bf00      	nop
 800d324:	20002348 	.word	0x20002348
 800d328:	200023b0 	.word	0x200023b0
 800d32c:	20002418 	.word	0x20002418

0800d330 <global_stdio_init.part.0>:
 800d330:	b510      	push	{r4, lr}
 800d332:	4b0b      	ldr	r3, [pc, #44]	@ (800d360 <global_stdio_init.part.0+0x30>)
 800d334:	4c0b      	ldr	r4, [pc, #44]	@ (800d364 <global_stdio_init.part.0+0x34>)
 800d336:	4a0c      	ldr	r2, [pc, #48]	@ (800d368 <global_stdio_init.part.0+0x38>)
 800d338:	4620      	mov	r0, r4
 800d33a:	601a      	str	r2, [r3, #0]
 800d33c:	2104      	movs	r1, #4
 800d33e:	2200      	movs	r2, #0
 800d340:	f7ff ff94 	bl	800d26c <std>
 800d344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d348:	2201      	movs	r2, #1
 800d34a:	2109      	movs	r1, #9
 800d34c:	f7ff ff8e 	bl	800d26c <std>
 800d350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d354:	2202      	movs	r2, #2
 800d356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d35a:	2112      	movs	r1, #18
 800d35c:	f7ff bf86 	b.w	800d26c <std>
 800d360:	20002480 	.word	0x20002480
 800d364:	20002348 	.word	0x20002348
 800d368:	0800d2d9 	.word	0x0800d2d9

0800d36c <__sfp_lock_acquire>:
 800d36c:	4801      	ldr	r0, [pc, #4]	@ (800d374 <__sfp_lock_acquire+0x8>)
 800d36e:	f000 ba28 	b.w	800d7c2 <__retarget_lock_acquire_recursive>
 800d372:	bf00      	nop
 800d374:	20002489 	.word	0x20002489

0800d378 <__sfp_lock_release>:
 800d378:	4801      	ldr	r0, [pc, #4]	@ (800d380 <__sfp_lock_release+0x8>)
 800d37a:	f000 ba23 	b.w	800d7c4 <__retarget_lock_release_recursive>
 800d37e:	bf00      	nop
 800d380:	20002489 	.word	0x20002489

0800d384 <__sinit>:
 800d384:	b510      	push	{r4, lr}
 800d386:	4604      	mov	r4, r0
 800d388:	f7ff fff0 	bl	800d36c <__sfp_lock_acquire>
 800d38c:	6a23      	ldr	r3, [r4, #32]
 800d38e:	b11b      	cbz	r3, 800d398 <__sinit+0x14>
 800d390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d394:	f7ff bff0 	b.w	800d378 <__sfp_lock_release>
 800d398:	4b04      	ldr	r3, [pc, #16]	@ (800d3ac <__sinit+0x28>)
 800d39a:	6223      	str	r3, [r4, #32]
 800d39c:	4b04      	ldr	r3, [pc, #16]	@ (800d3b0 <__sinit+0x2c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1f5      	bne.n	800d390 <__sinit+0xc>
 800d3a4:	f7ff ffc4 	bl	800d330 <global_stdio_init.part.0>
 800d3a8:	e7f2      	b.n	800d390 <__sinit+0xc>
 800d3aa:	bf00      	nop
 800d3ac:	0800d2f1 	.word	0x0800d2f1
 800d3b0:	20002480 	.word	0x20002480

0800d3b4 <_fwalk_sglue>:
 800d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b8:	4607      	mov	r7, r0
 800d3ba:	4688      	mov	r8, r1
 800d3bc:	4614      	mov	r4, r2
 800d3be:	2600      	movs	r6, #0
 800d3c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3c4:	f1b9 0901 	subs.w	r9, r9, #1
 800d3c8:	d505      	bpl.n	800d3d6 <_fwalk_sglue+0x22>
 800d3ca:	6824      	ldr	r4, [r4, #0]
 800d3cc:	2c00      	cmp	r4, #0
 800d3ce:	d1f7      	bne.n	800d3c0 <_fwalk_sglue+0xc>
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d6:	89ab      	ldrh	r3, [r5, #12]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d907      	bls.n	800d3ec <_fwalk_sglue+0x38>
 800d3dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	d003      	beq.n	800d3ec <_fwalk_sglue+0x38>
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	47c0      	blx	r8
 800d3ea:	4306      	orrs	r6, r0
 800d3ec:	3568      	adds	r5, #104	@ 0x68
 800d3ee:	e7e9      	b.n	800d3c4 <_fwalk_sglue+0x10>

0800d3f0 <_puts_r>:
 800d3f0:	6a03      	ldr	r3, [r0, #32]
 800d3f2:	b570      	push	{r4, r5, r6, lr}
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	460e      	mov	r6, r1
 800d3f8:	6884      	ldr	r4, [r0, #8]
 800d3fa:	b90b      	cbnz	r3, 800d400 <_puts_r+0x10>
 800d3fc:	f7ff ffc2 	bl	800d384 <__sinit>
 800d400:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d402:	07db      	lsls	r3, r3, #31
 800d404:	d405      	bmi.n	800d412 <_puts_r+0x22>
 800d406:	89a3      	ldrh	r3, [r4, #12]
 800d408:	0598      	lsls	r0, r3, #22
 800d40a:	d402      	bmi.n	800d412 <_puts_r+0x22>
 800d40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d40e:	f000 f9d8 	bl	800d7c2 <__retarget_lock_acquire_recursive>
 800d412:	89a3      	ldrh	r3, [r4, #12]
 800d414:	0719      	lsls	r1, r3, #28
 800d416:	d502      	bpl.n	800d41e <_puts_r+0x2e>
 800d418:	6923      	ldr	r3, [r4, #16]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d135      	bne.n	800d48a <_puts_r+0x9a>
 800d41e:	4621      	mov	r1, r4
 800d420:	4628      	mov	r0, r5
 800d422:	f000 f8e7 	bl	800d5f4 <__swsetup_r>
 800d426:	b380      	cbz	r0, 800d48a <_puts_r+0x9a>
 800d428:	f04f 35ff 	mov.w	r5, #4294967295
 800d42c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d42e:	07da      	lsls	r2, r3, #31
 800d430:	d405      	bmi.n	800d43e <_puts_r+0x4e>
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	059b      	lsls	r3, r3, #22
 800d436:	d402      	bmi.n	800d43e <_puts_r+0x4e>
 800d438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d43a:	f000 f9c3 	bl	800d7c4 <__retarget_lock_release_recursive>
 800d43e:	4628      	mov	r0, r5
 800d440:	bd70      	pop	{r4, r5, r6, pc}
 800d442:	2b00      	cmp	r3, #0
 800d444:	da04      	bge.n	800d450 <_puts_r+0x60>
 800d446:	69a2      	ldr	r2, [r4, #24]
 800d448:	429a      	cmp	r2, r3
 800d44a:	dc17      	bgt.n	800d47c <_puts_r+0x8c>
 800d44c:	290a      	cmp	r1, #10
 800d44e:	d015      	beq.n	800d47c <_puts_r+0x8c>
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	6022      	str	r2, [r4, #0]
 800d456:	7019      	strb	r1, [r3, #0]
 800d458:	68a3      	ldr	r3, [r4, #8]
 800d45a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d45e:	3b01      	subs	r3, #1
 800d460:	60a3      	str	r3, [r4, #8]
 800d462:	2900      	cmp	r1, #0
 800d464:	d1ed      	bne.n	800d442 <_puts_r+0x52>
 800d466:	2b00      	cmp	r3, #0
 800d468:	da11      	bge.n	800d48e <_puts_r+0x9e>
 800d46a:	4622      	mov	r2, r4
 800d46c:	210a      	movs	r1, #10
 800d46e:	4628      	mov	r0, r5
 800d470:	f000 f881 	bl	800d576 <__swbuf_r>
 800d474:	3001      	adds	r0, #1
 800d476:	d0d7      	beq.n	800d428 <_puts_r+0x38>
 800d478:	250a      	movs	r5, #10
 800d47a:	e7d7      	b.n	800d42c <_puts_r+0x3c>
 800d47c:	4622      	mov	r2, r4
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 f879 	bl	800d576 <__swbuf_r>
 800d484:	3001      	adds	r0, #1
 800d486:	d1e7      	bne.n	800d458 <_puts_r+0x68>
 800d488:	e7ce      	b.n	800d428 <_puts_r+0x38>
 800d48a:	3e01      	subs	r6, #1
 800d48c:	e7e4      	b.n	800d458 <_puts_r+0x68>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	6022      	str	r2, [r4, #0]
 800d494:	220a      	movs	r2, #10
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	e7ee      	b.n	800d478 <_puts_r+0x88>
	...

0800d49c <puts>:
 800d49c:	4b02      	ldr	r3, [pc, #8]	@ (800d4a8 <puts+0xc>)
 800d49e:	4601      	mov	r1, r0
 800d4a0:	6818      	ldr	r0, [r3, #0]
 800d4a2:	f7ff bfa5 	b.w	800d3f0 <_puts_r>
 800d4a6:	bf00      	nop
 800d4a8:	200001ac 	.word	0x200001ac

0800d4ac <siprintf>:
 800d4ac:	b40e      	push	{r1, r2, r3}
 800d4ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d4b2:	b510      	push	{r4, lr}
 800d4b4:	2400      	movs	r4, #0
 800d4b6:	b09d      	sub	sp, #116	@ 0x74
 800d4b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d4ba:	9002      	str	r0, [sp, #8]
 800d4bc:	9006      	str	r0, [sp, #24]
 800d4be:	9107      	str	r1, [sp, #28]
 800d4c0:	9104      	str	r1, [sp, #16]
 800d4c2:	4809      	ldr	r0, [pc, #36]	@ (800d4e8 <siprintf+0x3c>)
 800d4c4:	4909      	ldr	r1, [pc, #36]	@ (800d4ec <siprintf+0x40>)
 800d4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ca:	9105      	str	r1, [sp, #20]
 800d4cc:	6800      	ldr	r0, [r0, #0]
 800d4ce:	a902      	add	r1, sp, #8
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d4d4:	f001 fce2 	bl	800ee9c <_svfiprintf_r>
 800d4d8:	9b02      	ldr	r3, [sp, #8]
 800d4da:	701c      	strb	r4, [r3, #0]
 800d4dc:	b01d      	add	sp, #116	@ 0x74
 800d4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4e2:	b003      	add	sp, #12
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	200001ac 	.word	0x200001ac
 800d4ec:	ffff0208 	.word	0xffff0208

0800d4f0 <__sread>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f8:	f000 f914 	bl	800d724 <_read_r>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	bfab      	itete	ge
 800d500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d502:	89a3      	ldrhlt	r3, [r4, #12]
 800d504:	181b      	addge	r3, r3, r0
 800d506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d50a:	bfac      	ite	ge
 800d50c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d50e:	81a3      	strhlt	r3, [r4, #12]
 800d510:	bd10      	pop	{r4, pc}

0800d512 <__swrite>:
 800d512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d516:	461f      	mov	r7, r3
 800d518:	898b      	ldrh	r3, [r1, #12]
 800d51a:	4605      	mov	r5, r0
 800d51c:	05db      	lsls	r3, r3, #23
 800d51e:	460c      	mov	r4, r1
 800d520:	4616      	mov	r6, r2
 800d522:	d505      	bpl.n	800d530 <__swrite+0x1e>
 800d524:	2302      	movs	r3, #2
 800d526:	2200      	movs	r2, #0
 800d528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52c:	f000 f8e8 	bl	800d700 <_lseek_r>
 800d530:	89a3      	ldrh	r3, [r4, #12]
 800d532:	4632      	mov	r2, r6
 800d534:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d538:	81a3      	strh	r3, [r4, #12]
 800d53a:	4628      	mov	r0, r5
 800d53c:	463b      	mov	r3, r7
 800d53e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d546:	f000 b8ff 	b.w	800d748 <_write_r>

0800d54a <__sseek>:
 800d54a:	b510      	push	{r4, lr}
 800d54c:	460c      	mov	r4, r1
 800d54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d552:	f000 f8d5 	bl	800d700 <_lseek_r>
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	bf15      	itete	ne
 800d55c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d55e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d566:	81a3      	strheq	r3, [r4, #12]
 800d568:	bf18      	it	ne
 800d56a:	81a3      	strhne	r3, [r4, #12]
 800d56c:	bd10      	pop	{r4, pc}

0800d56e <__sclose>:
 800d56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d572:	f000 b8b5 	b.w	800d6e0 <_close_r>

0800d576 <__swbuf_r>:
 800d576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d578:	460e      	mov	r6, r1
 800d57a:	4614      	mov	r4, r2
 800d57c:	4605      	mov	r5, r0
 800d57e:	b118      	cbz	r0, 800d588 <__swbuf_r+0x12>
 800d580:	6a03      	ldr	r3, [r0, #32]
 800d582:	b90b      	cbnz	r3, 800d588 <__swbuf_r+0x12>
 800d584:	f7ff fefe 	bl	800d384 <__sinit>
 800d588:	69a3      	ldr	r3, [r4, #24]
 800d58a:	60a3      	str	r3, [r4, #8]
 800d58c:	89a3      	ldrh	r3, [r4, #12]
 800d58e:	071a      	lsls	r2, r3, #28
 800d590:	d501      	bpl.n	800d596 <__swbuf_r+0x20>
 800d592:	6923      	ldr	r3, [r4, #16]
 800d594:	b943      	cbnz	r3, 800d5a8 <__swbuf_r+0x32>
 800d596:	4621      	mov	r1, r4
 800d598:	4628      	mov	r0, r5
 800d59a:	f000 f82b 	bl	800d5f4 <__swsetup_r>
 800d59e:	b118      	cbz	r0, 800d5a8 <__swbuf_r+0x32>
 800d5a0:	f04f 37ff 	mov.w	r7, #4294967295
 800d5a4:	4638      	mov	r0, r7
 800d5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	6922      	ldr	r2, [r4, #16]
 800d5ac:	b2f6      	uxtb	r6, r6
 800d5ae:	1a98      	subs	r0, r3, r2
 800d5b0:	6963      	ldr	r3, [r4, #20]
 800d5b2:	4637      	mov	r7, r6
 800d5b4:	4283      	cmp	r3, r0
 800d5b6:	dc05      	bgt.n	800d5c4 <__swbuf_r+0x4e>
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f001 fdea 	bl	800f194 <_fflush_r>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d1ed      	bne.n	800d5a0 <__swbuf_r+0x2a>
 800d5c4:	68a3      	ldr	r3, [r4, #8]
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	60a3      	str	r3, [r4, #8]
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	1c5a      	adds	r2, r3, #1
 800d5ce:	6022      	str	r2, [r4, #0]
 800d5d0:	701e      	strb	r6, [r3, #0]
 800d5d2:	6962      	ldr	r2, [r4, #20]
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d004      	beq.n	800d5e4 <__swbuf_r+0x6e>
 800d5da:	89a3      	ldrh	r3, [r4, #12]
 800d5dc:	07db      	lsls	r3, r3, #31
 800d5de:	d5e1      	bpl.n	800d5a4 <__swbuf_r+0x2e>
 800d5e0:	2e0a      	cmp	r6, #10
 800d5e2:	d1df      	bne.n	800d5a4 <__swbuf_r+0x2e>
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f001 fdd4 	bl	800f194 <_fflush_r>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d0d9      	beq.n	800d5a4 <__swbuf_r+0x2e>
 800d5f0:	e7d6      	b.n	800d5a0 <__swbuf_r+0x2a>
	...

0800d5f4 <__swsetup_r>:
 800d5f4:	b538      	push	{r3, r4, r5, lr}
 800d5f6:	4b29      	ldr	r3, [pc, #164]	@ (800d69c <__swsetup_r+0xa8>)
 800d5f8:	4605      	mov	r5, r0
 800d5fa:	6818      	ldr	r0, [r3, #0]
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	b118      	cbz	r0, 800d608 <__swsetup_r+0x14>
 800d600:	6a03      	ldr	r3, [r0, #32]
 800d602:	b90b      	cbnz	r3, 800d608 <__swsetup_r+0x14>
 800d604:	f7ff febe 	bl	800d384 <__sinit>
 800d608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d60c:	0719      	lsls	r1, r3, #28
 800d60e:	d422      	bmi.n	800d656 <__swsetup_r+0x62>
 800d610:	06da      	lsls	r2, r3, #27
 800d612:	d407      	bmi.n	800d624 <__swsetup_r+0x30>
 800d614:	2209      	movs	r2, #9
 800d616:	602a      	str	r2, [r5, #0]
 800d618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d61c:	f04f 30ff 	mov.w	r0, #4294967295
 800d620:	81a3      	strh	r3, [r4, #12]
 800d622:	e033      	b.n	800d68c <__swsetup_r+0x98>
 800d624:	0758      	lsls	r0, r3, #29
 800d626:	d512      	bpl.n	800d64e <__swsetup_r+0x5a>
 800d628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d62a:	b141      	cbz	r1, 800d63e <__swsetup_r+0x4a>
 800d62c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d630:	4299      	cmp	r1, r3
 800d632:	d002      	beq.n	800d63a <__swsetup_r+0x46>
 800d634:	4628      	mov	r0, r5
 800d636:	f000 ff3f 	bl	800e4b8 <_free_r>
 800d63a:	2300      	movs	r3, #0
 800d63c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d644:	81a3      	strh	r3, [r4, #12]
 800d646:	2300      	movs	r3, #0
 800d648:	6063      	str	r3, [r4, #4]
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	6023      	str	r3, [r4, #0]
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	f043 0308 	orr.w	r3, r3, #8
 800d654:	81a3      	strh	r3, [r4, #12]
 800d656:	6923      	ldr	r3, [r4, #16]
 800d658:	b94b      	cbnz	r3, 800d66e <__swsetup_r+0x7a>
 800d65a:	89a3      	ldrh	r3, [r4, #12]
 800d65c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d664:	d003      	beq.n	800d66e <__swsetup_r+0x7a>
 800d666:	4621      	mov	r1, r4
 800d668:	4628      	mov	r0, r5
 800d66a:	f001 fde0 	bl	800f22e <__smakebuf_r>
 800d66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d672:	f013 0201 	ands.w	r2, r3, #1
 800d676:	d00a      	beq.n	800d68e <__swsetup_r+0x9a>
 800d678:	2200      	movs	r2, #0
 800d67a:	60a2      	str	r2, [r4, #8]
 800d67c:	6962      	ldr	r2, [r4, #20]
 800d67e:	4252      	negs	r2, r2
 800d680:	61a2      	str	r2, [r4, #24]
 800d682:	6922      	ldr	r2, [r4, #16]
 800d684:	b942      	cbnz	r2, 800d698 <__swsetup_r+0xa4>
 800d686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d68a:	d1c5      	bne.n	800d618 <__swsetup_r+0x24>
 800d68c:	bd38      	pop	{r3, r4, r5, pc}
 800d68e:	0799      	lsls	r1, r3, #30
 800d690:	bf58      	it	pl
 800d692:	6962      	ldrpl	r2, [r4, #20]
 800d694:	60a2      	str	r2, [r4, #8]
 800d696:	e7f4      	b.n	800d682 <__swsetup_r+0x8e>
 800d698:	2000      	movs	r0, #0
 800d69a:	e7f7      	b.n	800d68c <__swsetup_r+0x98>
 800d69c:	200001ac 	.word	0x200001ac

0800d6a0 <memset>:
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	4402      	add	r2, r0
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d100      	bne.n	800d6aa <memset+0xa>
 800d6a8:	4770      	bx	lr
 800d6aa:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ae:	e7f9      	b.n	800d6a4 <memset+0x4>

0800d6b0 <strncpy>:
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	b510      	push	{r4, lr}
 800d6b4:	3901      	subs	r1, #1
 800d6b6:	b132      	cbz	r2, 800d6c6 <strncpy+0x16>
 800d6b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d6bc:	3a01      	subs	r2, #1
 800d6be:	f803 4b01 	strb.w	r4, [r3], #1
 800d6c2:	2c00      	cmp	r4, #0
 800d6c4:	d1f7      	bne.n	800d6b6 <strncpy+0x6>
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	441a      	add	r2, r3
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d100      	bne.n	800d6d0 <strncpy+0x20>
 800d6ce:	bd10      	pop	{r4, pc}
 800d6d0:	f803 1b01 	strb.w	r1, [r3], #1
 800d6d4:	e7f9      	b.n	800d6ca <strncpy+0x1a>
	...

0800d6d8 <_localeconv_r>:
 800d6d8:	4800      	ldr	r0, [pc, #0]	@ (800d6dc <_localeconv_r+0x4>)
 800d6da:	4770      	bx	lr
 800d6dc:	20000130 	.word	0x20000130

0800d6e0 <_close_r>:
 800d6e0:	b538      	push	{r3, r4, r5, lr}
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	4d05      	ldr	r5, [pc, #20]	@ (800d6fc <_close_r+0x1c>)
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	4608      	mov	r0, r1
 800d6ea:	602b      	str	r3, [r5, #0]
 800d6ec:	f7f4 fb77 	bl	8001dde <_close>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d102      	bne.n	800d6fa <_close_r+0x1a>
 800d6f4:	682b      	ldr	r3, [r5, #0]
 800d6f6:	b103      	cbz	r3, 800d6fa <_close_r+0x1a>
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	20002484 	.word	0x20002484

0800d700 <_lseek_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	4611      	mov	r1, r2
 800d708:	2200      	movs	r2, #0
 800d70a:	4d05      	ldr	r5, [pc, #20]	@ (800d720 <_lseek_r+0x20>)
 800d70c:	602a      	str	r2, [r5, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	f7f4 fb89 	bl	8001e26 <_lseek>
 800d714:	1c43      	adds	r3, r0, #1
 800d716:	d102      	bne.n	800d71e <_lseek_r+0x1e>
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	b103      	cbz	r3, 800d71e <_lseek_r+0x1e>
 800d71c:	6023      	str	r3, [r4, #0]
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	20002484 	.word	0x20002484

0800d724 <_read_r>:
 800d724:	b538      	push	{r3, r4, r5, lr}
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	4611      	mov	r1, r2
 800d72c:	2200      	movs	r2, #0
 800d72e:	4d05      	ldr	r5, [pc, #20]	@ (800d744 <_read_r+0x20>)
 800d730:	602a      	str	r2, [r5, #0]
 800d732:	461a      	mov	r2, r3
 800d734:	f7f4 fb1a 	bl	8001d6c <_read>
 800d738:	1c43      	adds	r3, r0, #1
 800d73a:	d102      	bne.n	800d742 <_read_r+0x1e>
 800d73c:	682b      	ldr	r3, [r5, #0]
 800d73e:	b103      	cbz	r3, 800d742 <_read_r+0x1e>
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	bd38      	pop	{r3, r4, r5, pc}
 800d744:	20002484 	.word	0x20002484

0800d748 <_write_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4604      	mov	r4, r0
 800d74c:	4608      	mov	r0, r1
 800d74e:	4611      	mov	r1, r2
 800d750:	2200      	movs	r2, #0
 800d752:	4d05      	ldr	r5, [pc, #20]	@ (800d768 <_write_r+0x20>)
 800d754:	602a      	str	r2, [r5, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	f7f4 fb25 	bl	8001da6 <_write>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d102      	bne.n	800d766 <_write_r+0x1e>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	b103      	cbz	r3, 800d766 <_write_r+0x1e>
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	bd38      	pop	{r3, r4, r5, pc}
 800d768:	20002484 	.word	0x20002484

0800d76c <__errno>:
 800d76c:	4b01      	ldr	r3, [pc, #4]	@ (800d774 <__errno+0x8>)
 800d76e:	6818      	ldr	r0, [r3, #0]
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop
 800d774:	200001ac 	.word	0x200001ac

0800d778 <__libc_init_array>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	2600      	movs	r6, #0
 800d77c:	4d0c      	ldr	r5, [pc, #48]	@ (800d7b0 <__libc_init_array+0x38>)
 800d77e:	4c0d      	ldr	r4, [pc, #52]	@ (800d7b4 <__libc_init_array+0x3c>)
 800d780:	1b64      	subs	r4, r4, r5
 800d782:	10a4      	asrs	r4, r4, #2
 800d784:	42a6      	cmp	r6, r4
 800d786:	d109      	bne.n	800d79c <__libc_init_array+0x24>
 800d788:	f002 f85e 	bl	800f848 <_init>
 800d78c:	2600      	movs	r6, #0
 800d78e:	4d0a      	ldr	r5, [pc, #40]	@ (800d7b8 <__libc_init_array+0x40>)
 800d790:	4c0a      	ldr	r4, [pc, #40]	@ (800d7bc <__libc_init_array+0x44>)
 800d792:	1b64      	subs	r4, r4, r5
 800d794:	10a4      	asrs	r4, r4, #2
 800d796:	42a6      	cmp	r6, r4
 800d798:	d105      	bne.n	800d7a6 <__libc_init_array+0x2e>
 800d79a:	bd70      	pop	{r4, r5, r6, pc}
 800d79c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7a0:	4798      	blx	r3
 800d7a2:	3601      	adds	r6, #1
 800d7a4:	e7ee      	b.n	800d784 <__libc_init_array+0xc>
 800d7a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7aa:	4798      	blx	r3
 800d7ac:	3601      	adds	r6, #1
 800d7ae:	e7f2      	b.n	800d796 <__libc_init_array+0x1e>
 800d7b0:	0800fd18 	.word	0x0800fd18
 800d7b4:	0800fd18 	.word	0x0800fd18
 800d7b8:	0800fd18 	.word	0x0800fd18
 800d7bc:	0800fd1c 	.word	0x0800fd1c

0800d7c0 <__retarget_lock_init_recursive>:
 800d7c0:	4770      	bx	lr

0800d7c2 <__retarget_lock_acquire_recursive>:
 800d7c2:	4770      	bx	lr

0800d7c4 <__retarget_lock_release_recursive>:
 800d7c4:	4770      	bx	lr

0800d7c6 <memchr>:
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	b2c9      	uxtb	r1, r1
 800d7cc:	4402      	add	r2, r0
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	d101      	bne.n	800d7d8 <memchr+0x12>
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	e003      	b.n	800d7e0 <memchr+0x1a>
 800d7d8:	7804      	ldrb	r4, [r0, #0]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	428c      	cmp	r4, r1
 800d7de:	d1f6      	bne.n	800d7ce <memchr+0x8>
 800d7e0:	bd10      	pop	{r4, pc}

0800d7e2 <memcpy>:
 800d7e2:	440a      	add	r2, r1
 800d7e4:	4291      	cmp	r1, r2
 800d7e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7ea:	d100      	bne.n	800d7ee <memcpy+0xc>
 800d7ec:	4770      	bx	lr
 800d7ee:	b510      	push	{r4, lr}
 800d7f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7f4:	4291      	cmp	r1, r2
 800d7f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7fa:	d1f9      	bne.n	800d7f0 <memcpy+0xe>
 800d7fc:	bd10      	pop	{r4, pc}

0800d7fe <quorem>:
 800d7fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d802:	6903      	ldr	r3, [r0, #16]
 800d804:	690c      	ldr	r4, [r1, #16]
 800d806:	4607      	mov	r7, r0
 800d808:	42a3      	cmp	r3, r4
 800d80a:	db7e      	blt.n	800d90a <quorem+0x10c>
 800d80c:	3c01      	subs	r4, #1
 800d80e:	00a3      	lsls	r3, r4, #2
 800d810:	f100 0514 	add.w	r5, r0, #20
 800d814:	f101 0814 	add.w	r8, r1, #20
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d828:	3301      	adds	r3, #1
 800d82a:	429a      	cmp	r2, r3
 800d82c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d834:	d32e      	bcc.n	800d894 <quorem+0x96>
 800d836:	f04f 0a00 	mov.w	sl, #0
 800d83a:	46c4      	mov	ip, r8
 800d83c:	46ae      	mov	lr, r5
 800d83e:	46d3      	mov	fp, sl
 800d840:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d844:	b298      	uxth	r0, r3
 800d846:	fb06 a000 	mla	r0, r6, r0, sl
 800d84a:	0c1b      	lsrs	r3, r3, #16
 800d84c:	0c02      	lsrs	r2, r0, #16
 800d84e:	fb06 2303 	mla	r3, r6, r3, r2
 800d852:	f8de 2000 	ldr.w	r2, [lr]
 800d856:	b280      	uxth	r0, r0
 800d858:	b292      	uxth	r2, r2
 800d85a:	1a12      	subs	r2, r2, r0
 800d85c:	445a      	add	r2, fp
 800d85e:	f8de 0000 	ldr.w	r0, [lr]
 800d862:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d866:	b29b      	uxth	r3, r3
 800d868:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d86c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d870:	b292      	uxth	r2, r2
 800d872:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d876:	45e1      	cmp	r9, ip
 800d878:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d87c:	f84e 2b04 	str.w	r2, [lr], #4
 800d880:	d2de      	bcs.n	800d840 <quorem+0x42>
 800d882:	9b00      	ldr	r3, [sp, #0]
 800d884:	58eb      	ldr	r3, [r5, r3]
 800d886:	b92b      	cbnz	r3, 800d894 <quorem+0x96>
 800d888:	9b01      	ldr	r3, [sp, #4]
 800d88a:	3b04      	subs	r3, #4
 800d88c:	429d      	cmp	r5, r3
 800d88e:	461a      	mov	r2, r3
 800d890:	d32f      	bcc.n	800d8f2 <quorem+0xf4>
 800d892:	613c      	str	r4, [r7, #16]
 800d894:	4638      	mov	r0, r7
 800d896:	f001 f991 	bl	800ebbc <__mcmp>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	db25      	blt.n	800d8ea <quorem+0xec>
 800d89e:	4629      	mov	r1, r5
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	f858 2b04 	ldr.w	r2, [r8], #4
 800d8a6:	f8d1 c000 	ldr.w	ip, [r1]
 800d8aa:	fa1f fe82 	uxth.w	lr, r2
 800d8ae:	fa1f f38c 	uxth.w	r3, ip
 800d8b2:	eba3 030e 	sub.w	r3, r3, lr
 800d8b6:	4403      	add	r3, r0
 800d8b8:	0c12      	lsrs	r2, r2, #16
 800d8ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d8be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8c8:	45c1      	cmp	r9, r8
 800d8ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d8ce:	f841 3b04 	str.w	r3, [r1], #4
 800d8d2:	d2e6      	bcs.n	800d8a2 <quorem+0xa4>
 800d8d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8dc:	b922      	cbnz	r2, 800d8e8 <quorem+0xea>
 800d8de:	3b04      	subs	r3, #4
 800d8e0:	429d      	cmp	r5, r3
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	d30b      	bcc.n	800d8fe <quorem+0x100>
 800d8e6:	613c      	str	r4, [r7, #16]
 800d8e8:	3601      	adds	r6, #1
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	b003      	add	sp, #12
 800d8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f2:	6812      	ldr	r2, [r2, #0]
 800d8f4:	3b04      	subs	r3, #4
 800d8f6:	2a00      	cmp	r2, #0
 800d8f8:	d1cb      	bne.n	800d892 <quorem+0x94>
 800d8fa:	3c01      	subs	r4, #1
 800d8fc:	e7c6      	b.n	800d88c <quorem+0x8e>
 800d8fe:	6812      	ldr	r2, [r2, #0]
 800d900:	3b04      	subs	r3, #4
 800d902:	2a00      	cmp	r2, #0
 800d904:	d1ef      	bne.n	800d8e6 <quorem+0xe8>
 800d906:	3c01      	subs	r4, #1
 800d908:	e7ea      	b.n	800d8e0 <quorem+0xe2>
 800d90a:	2000      	movs	r0, #0
 800d90c:	e7ee      	b.n	800d8ec <quorem+0xee>
	...

0800d910 <_dtoa_r>:
 800d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d914:	4614      	mov	r4, r2
 800d916:	461d      	mov	r5, r3
 800d918:	69c7      	ldr	r7, [r0, #28]
 800d91a:	b097      	sub	sp, #92	@ 0x5c
 800d91c:	4681      	mov	r9, r0
 800d91e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d922:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800d924:	b97f      	cbnz	r7, 800d946 <_dtoa_r+0x36>
 800d926:	2010      	movs	r0, #16
 800d928:	f000 fe0e 	bl	800e548 <malloc>
 800d92c:	4602      	mov	r2, r0
 800d92e:	f8c9 001c 	str.w	r0, [r9, #28]
 800d932:	b920      	cbnz	r0, 800d93e <_dtoa_r+0x2e>
 800d934:	21ef      	movs	r1, #239	@ 0xef
 800d936:	4bac      	ldr	r3, [pc, #688]	@ (800dbe8 <_dtoa_r+0x2d8>)
 800d938:	48ac      	ldr	r0, [pc, #688]	@ (800dbec <_dtoa_r+0x2dc>)
 800d93a:	f001 fd01 	bl	800f340 <__assert_func>
 800d93e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d942:	6007      	str	r7, [r0, #0]
 800d944:	60c7      	str	r7, [r0, #12]
 800d946:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d94a:	6819      	ldr	r1, [r3, #0]
 800d94c:	b159      	cbz	r1, 800d966 <_dtoa_r+0x56>
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	2301      	movs	r3, #1
 800d952:	4093      	lsls	r3, r2
 800d954:	604a      	str	r2, [r1, #4]
 800d956:	608b      	str	r3, [r1, #8]
 800d958:	4648      	mov	r0, r9
 800d95a:	f000 fefd 	bl	800e758 <_Bfree>
 800d95e:	2200      	movs	r2, #0
 800d960:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d964:	601a      	str	r2, [r3, #0]
 800d966:	1e2b      	subs	r3, r5, #0
 800d968:	bfaf      	iteee	ge
 800d96a:	2300      	movge	r3, #0
 800d96c:	2201      	movlt	r2, #1
 800d96e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d972:	9307      	strlt	r3, [sp, #28]
 800d974:	bfa8      	it	ge
 800d976:	6033      	strge	r3, [r6, #0]
 800d978:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800d97c:	4b9c      	ldr	r3, [pc, #624]	@ (800dbf0 <_dtoa_r+0x2e0>)
 800d97e:	bfb8      	it	lt
 800d980:	6032      	strlt	r2, [r6, #0]
 800d982:	ea33 0308 	bics.w	r3, r3, r8
 800d986:	d112      	bne.n	800d9ae <_dtoa_r+0x9e>
 800d988:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d98c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d994:	4323      	orrs	r3, r4
 800d996:	f000 855e 	beq.w	800e456 <_dtoa_r+0xb46>
 800d99a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d99c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dbf4 <_dtoa_r+0x2e4>
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 8560 	beq.w	800e466 <_dtoa_r+0xb56>
 800d9a6:	f10a 0303 	add.w	r3, sl, #3
 800d9aa:	f000 bd5a 	b.w	800e462 <_dtoa_r+0xb52>
 800d9ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d9b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f7f3 f863 	bl	8000a88 <__aeabi_dcmpeq>
 800d9c2:	4607      	mov	r7, r0
 800d9c4:	b158      	cbz	r0, 800d9de <_dtoa_r+0xce>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d9ca:	6013      	str	r3, [r2, #0]
 800d9cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d9ce:	b113      	cbz	r3, 800d9d6 <_dtoa_r+0xc6>
 800d9d0:	4b89      	ldr	r3, [pc, #548]	@ (800dbf8 <_dtoa_r+0x2e8>)
 800d9d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d9d4:	6013      	str	r3, [r2, #0]
 800d9d6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800dbfc <_dtoa_r+0x2ec>
 800d9da:	f000 bd44 	b.w	800e466 <_dtoa_r+0xb56>
 800d9de:	ab14      	add	r3, sp, #80	@ 0x50
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	ab15      	add	r3, sp, #84	@ 0x54
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	4648      	mov	r0, r9
 800d9e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d9ec:	f001 f996 	bl	800ed1c <__d2b>
 800d9f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800d9f4:	9003      	str	r0, [sp, #12]
 800d9f6:	2e00      	cmp	r6, #0
 800d9f8:	d078      	beq.n	800daec <_dtoa_r+0x1dc>
 800d9fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800da04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800da0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800da10:	9712      	str	r7, [sp, #72]	@ 0x48
 800da12:	4619      	mov	r1, r3
 800da14:	2200      	movs	r2, #0
 800da16:	4b7a      	ldr	r3, [pc, #488]	@ (800dc00 <_dtoa_r+0x2f0>)
 800da18:	f7f2 fc16 	bl	8000248 <__aeabi_dsub>
 800da1c:	a36c      	add	r3, pc, #432	@ (adr r3, 800dbd0 <_dtoa_r+0x2c0>)
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	f7f2 fdc9 	bl	80005b8 <__aeabi_dmul>
 800da26:	a36c      	add	r3, pc, #432	@ (adr r3, 800dbd8 <_dtoa_r+0x2c8>)
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f7f2 fc0e 	bl	800024c <__adddf3>
 800da30:	4604      	mov	r4, r0
 800da32:	4630      	mov	r0, r6
 800da34:	460d      	mov	r5, r1
 800da36:	f7f2 fd55 	bl	80004e4 <__aeabi_i2d>
 800da3a:	a369      	add	r3, pc, #420	@ (adr r3, 800dbe0 <_dtoa_r+0x2d0>)
 800da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da40:	f7f2 fdba 	bl	80005b8 <__aeabi_dmul>
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4620      	mov	r0, r4
 800da4a:	4629      	mov	r1, r5
 800da4c:	f7f2 fbfe 	bl	800024c <__adddf3>
 800da50:	4604      	mov	r4, r0
 800da52:	460d      	mov	r5, r1
 800da54:	f7f3 f860 	bl	8000b18 <__aeabi_d2iz>
 800da58:	2200      	movs	r2, #0
 800da5a:	4607      	mov	r7, r0
 800da5c:	2300      	movs	r3, #0
 800da5e:	4620      	mov	r0, r4
 800da60:	4629      	mov	r1, r5
 800da62:	f7f3 f81b 	bl	8000a9c <__aeabi_dcmplt>
 800da66:	b140      	cbz	r0, 800da7a <_dtoa_r+0x16a>
 800da68:	4638      	mov	r0, r7
 800da6a:	f7f2 fd3b 	bl	80004e4 <__aeabi_i2d>
 800da6e:	4622      	mov	r2, r4
 800da70:	462b      	mov	r3, r5
 800da72:	f7f3 f809 	bl	8000a88 <__aeabi_dcmpeq>
 800da76:	b900      	cbnz	r0, 800da7a <_dtoa_r+0x16a>
 800da78:	3f01      	subs	r7, #1
 800da7a:	2f16      	cmp	r7, #22
 800da7c:	d854      	bhi.n	800db28 <_dtoa_r+0x218>
 800da7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da82:	4b60      	ldr	r3, [pc, #384]	@ (800dc04 <_dtoa_r+0x2f4>)
 800da84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8c:	f7f3 f806 	bl	8000a9c <__aeabi_dcmplt>
 800da90:	2800      	cmp	r0, #0
 800da92:	d04b      	beq.n	800db2c <_dtoa_r+0x21c>
 800da94:	2300      	movs	r3, #0
 800da96:	3f01      	subs	r7, #1
 800da98:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da9c:	1b9b      	subs	r3, r3, r6
 800da9e:	1e5a      	subs	r2, r3, #1
 800daa0:	bf49      	itett	mi
 800daa2:	f1c3 0301 	rsbmi	r3, r3, #1
 800daa6:	2300      	movpl	r3, #0
 800daa8:	9304      	strmi	r3, [sp, #16]
 800daaa:	2300      	movmi	r3, #0
 800daac:	9209      	str	r2, [sp, #36]	@ 0x24
 800daae:	bf54      	ite	pl
 800dab0:	9304      	strpl	r3, [sp, #16]
 800dab2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800dab4:	2f00      	cmp	r7, #0
 800dab6:	db3b      	blt.n	800db30 <_dtoa_r+0x220>
 800dab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daba:	970e      	str	r7, [sp, #56]	@ 0x38
 800dabc:	443b      	add	r3, r7
 800dabe:	9309      	str	r3, [sp, #36]	@ 0x24
 800dac0:	2300      	movs	r3, #0
 800dac2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dac4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dac6:	2b09      	cmp	r3, #9
 800dac8:	d865      	bhi.n	800db96 <_dtoa_r+0x286>
 800daca:	2b05      	cmp	r3, #5
 800dacc:	bfc4      	itt	gt
 800dace:	3b04      	subgt	r3, #4
 800dad0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800dad2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dad4:	bfc8      	it	gt
 800dad6:	2400      	movgt	r4, #0
 800dad8:	f1a3 0302 	sub.w	r3, r3, #2
 800dadc:	bfd8      	it	le
 800dade:	2401      	movle	r4, #1
 800dae0:	2b03      	cmp	r3, #3
 800dae2:	d864      	bhi.n	800dbae <_dtoa_r+0x29e>
 800dae4:	e8df f003 	tbb	[pc, r3]
 800dae8:	2c385553 	.word	0x2c385553
 800daec:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800daf0:	441e      	add	r6, r3
 800daf2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800daf6:	2b20      	cmp	r3, #32
 800daf8:	bfc1      	itttt	gt
 800dafa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dafe:	fa08 f803 	lslgt.w	r8, r8, r3
 800db02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800db06:	fa24 f303 	lsrgt.w	r3, r4, r3
 800db0a:	bfd6      	itet	le
 800db0c:	f1c3 0320 	rsble	r3, r3, #32
 800db10:	ea48 0003 	orrgt.w	r0, r8, r3
 800db14:	fa04 f003 	lslle.w	r0, r4, r3
 800db18:	f7f2 fcd4 	bl	80004c4 <__aeabi_ui2d>
 800db1c:	2201      	movs	r2, #1
 800db1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800db22:	3e01      	subs	r6, #1
 800db24:	9212      	str	r2, [sp, #72]	@ 0x48
 800db26:	e774      	b.n	800da12 <_dtoa_r+0x102>
 800db28:	2301      	movs	r3, #1
 800db2a:	e7b5      	b.n	800da98 <_dtoa_r+0x188>
 800db2c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800db2e:	e7b4      	b.n	800da9a <_dtoa_r+0x18a>
 800db30:	9b04      	ldr	r3, [sp, #16]
 800db32:	1bdb      	subs	r3, r3, r7
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	427b      	negs	r3, r7
 800db38:	930a      	str	r3, [sp, #40]	@ 0x28
 800db3a:	2300      	movs	r3, #0
 800db3c:	930e      	str	r3, [sp, #56]	@ 0x38
 800db3e:	e7c1      	b.n	800dac4 <_dtoa_r+0x1b4>
 800db40:	2301      	movs	r3, #1
 800db42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800db46:	eb07 0b03 	add.w	fp, r7, r3
 800db4a:	f10b 0301 	add.w	r3, fp, #1
 800db4e:	2b01      	cmp	r3, #1
 800db50:	9308      	str	r3, [sp, #32]
 800db52:	bfb8      	it	lt
 800db54:	2301      	movlt	r3, #1
 800db56:	e006      	b.n	800db66 <_dtoa_r+0x256>
 800db58:	2301      	movs	r3, #1
 800db5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800db5e:	2b00      	cmp	r3, #0
 800db60:	dd28      	ble.n	800dbb4 <_dtoa_r+0x2a4>
 800db62:	469b      	mov	fp, r3
 800db64:	9308      	str	r3, [sp, #32]
 800db66:	2100      	movs	r1, #0
 800db68:	2204      	movs	r2, #4
 800db6a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800db6e:	f102 0514 	add.w	r5, r2, #20
 800db72:	429d      	cmp	r5, r3
 800db74:	d926      	bls.n	800dbc4 <_dtoa_r+0x2b4>
 800db76:	6041      	str	r1, [r0, #4]
 800db78:	4648      	mov	r0, r9
 800db7a:	f000 fdad 	bl	800e6d8 <_Balloc>
 800db7e:	4682      	mov	sl, r0
 800db80:	2800      	cmp	r0, #0
 800db82:	d143      	bne.n	800dc0c <_dtoa_r+0x2fc>
 800db84:	4602      	mov	r2, r0
 800db86:	f240 11af 	movw	r1, #431	@ 0x1af
 800db8a:	4b1f      	ldr	r3, [pc, #124]	@ (800dc08 <_dtoa_r+0x2f8>)
 800db8c:	e6d4      	b.n	800d938 <_dtoa_r+0x28>
 800db8e:	2300      	movs	r3, #0
 800db90:	e7e3      	b.n	800db5a <_dtoa_r+0x24a>
 800db92:	2300      	movs	r3, #0
 800db94:	e7d5      	b.n	800db42 <_dtoa_r+0x232>
 800db96:	2401      	movs	r4, #1
 800db98:	2300      	movs	r3, #0
 800db9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800db9c:	9320      	str	r3, [sp, #128]	@ 0x80
 800db9e:	f04f 3bff 	mov.w	fp, #4294967295
 800dba2:	2200      	movs	r2, #0
 800dba4:	2312      	movs	r3, #18
 800dba6:	f8cd b020 	str.w	fp, [sp, #32]
 800dbaa:	9221      	str	r2, [sp, #132]	@ 0x84
 800dbac:	e7db      	b.n	800db66 <_dtoa_r+0x256>
 800dbae:	2301      	movs	r3, #1
 800dbb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbb2:	e7f4      	b.n	800db9e <_dtoa_r+0x28e>
 800dbb4:	f04f 0b01 	mov.w	fp, #1
 800dbb8:	465b      	mov	r3, fp
 800dbba:	f8cd b020 	str.w	fp, [sp, #32]
 800dbbe:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800dbc2:	e7d0      	b.n	800db66 <_dtoa_r+0x256>
 800dbc4:	3101      	adds	r1, #1
 800dbc6:	0052      	lsls	r2, r2, #1
 800dbc8:	e7d1      	b.n	800db6e <_dtoa_r+0x25e>
 800dbca:	bf00      	nop
 800dbcc:	f3af 8000 	nop.w
 800dbd0:	636f4361 	.word	0x636f4361
 800dbd4:	3fd287a7 	.word	0x3fd287a7
 800dbd8:	8b60c8b3 	.word	0x8b60c8b3
 800dbdc:	3fc68a28 	.word	0x3fc68a28
 800dbe0:	509f79fb 	.word	0x509f79fb
 800dbe4:	3fd34413 	.word	0x3fd34413
 800dbe8:	0800faee 	.word	0x0800faee
 800dbec:	0800fb05 	.word	0x0800fb05
 800dbf0:	7ff00000 	.word	0x7ff00000
 800dbf4:	0800faea 	.word	0x0800faea
 800dbf8:	0800fab4 	.word	0x0800fab4
 800dbfc:	0800fab3 	.word	0x0800fab3
 800dc00:	3ff80000 	.word	0x3ff80000
 800dc04:	0800fc48 	.word	0x0800fc48
 800dc08:	0800fb5d 	.word	0x0800fb5d
 800dc0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc10:	6018      	str	r0, [r3, #0]
 800dc12:	9b08      	ldr	r3, [sp, #32]
 800dc14:	2b0e      	cmp	r3, #14
 800dc16:	f200 80a1 	bhi.w	800dd5c <_dtoa_r+0x44c>
 800dc1a:	2c00      	cmp	r4, #0
 800dc1c:	f000 809e 	beq.w	800dd5c <_dtoa_r+0x44c>
 800dc20:	2f00      	cmp	r7, #0
 800dc22:	dd33      	ble.n	800dc8c <_dtoa_r+0x37c>
 800dc24:	4b9c      	ldr	r3, [pc, #624]	@ (800de98 <_dtoa_r+0x588>)
 800dc26:	f007 020f 	and.w	r2, r7, #15
 800dc2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc2e:	05f8      	lsls	r0, r7, #23
 800dc30:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dc34:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800dc38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dc3c:	d516      	bpl.n	800dc6c <_dtoa_r+0x35c>
 800dc3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc42:	4b96      	ldr	r3, [pc, #600]	@ (800de9c <_dtoa_r+0x58c>)
 800dc44:	2603      	movs	r6, #3
 800dc46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc4a:	f7f2 fddf 	bl	800080c <__aeabi_ddiv>
 800dc4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dc52:	f004 040f 	and.w	r4, r4, #15
 800dc56:	4d91      	ldr	r5, [pc, #580]	@ (800de9c <_dtoa_r+0x58c>)
 800dc58:	b954      	cbnz	r4, 800dc70 <_dtoa_r+0x360>
 800dc5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dc5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc62:	f7f2 fdd3 	bl	800080c <__aeabi_ddiv>
 800dc66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dc6a:	e028      	b.n	800dcbe <_dtoa_r+0x3ae>
 800dc6c:	2602      	movs	r6, #2
 800dc6e:	e7f2      	b.n	800dc56 <_dtoa_r+0x346>
 800dc70:	07e1      	lsls	r1, r4, #31
 800dc72:	d508      	bpl.n	800dc86 <_dtoa_r+0x376>
 800dc74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dc78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc7c:	f7f2 fc9c 	bl	80005b8 <__aeabi_dmul>
 800dc80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dc84:	3601      	adds	r6, #1
 800dc86:	1064      	asrs	r4, r4, #1
 800dc88:	3508      	adds	r5, #8
 800dc8a:	e7e5      	b.n	800dc58 <_dtoa_r+0x348>
 800dc8c:	f000 80af 	beq.w	800ddee <_dtoa_r+0x4de>
 800dc90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc94:	427c      	negs	r4, r7
 800dc96:	4b80      	ldr	r3, [pc, #512]	@ (800de98 <_dtoa_r+0x588>)
 800dc98:	f004 020f 	and.w	r2, r4, #15
 800dc9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	f7f2 fc88 	bl	80005b8 <__aeabi_dmul>
 800dca8:	2602      	movs	r6, #2
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dcb0:	4d7a      	ldr	r5, [pc, #488]	@ (800de9c <_dtoa_r+0x58c>)
 800dcb2:	1124      	asrs	r4, r4, #4
 800dcb4:	2c00      	cmp	r4, #0
 800dcb6:	f040 808f 	bne.w	800ddd8 <_dtoa_r+0x4c8>
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1d3      	bne.n	800dc66 <_dtoa_r+0x356>
 800dcbe:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800dcc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f000 8094 	beq.w	800ddf2 <_dtoa_r+0x4e2>
 800dcca:	2200      	movs	r2, #0
 800dccc:	4620      	mov	r0, r4
 800dcce:	4629      	mov	r1, r5
 800dcd0:	4b73      	ldr	r3, [pc, #460]	@ (800dea0 <_dtoa_r+0x590>)
 800dcd2:	f7f2 fee3 	bl	8000a9c <__aeabi_dcmplt>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f000 808b 	beq.w	800ddf2 <_dtoa_r+0x4e2>
 800dcdc:	9b08      	ldr	r3, [sp, #32]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f000 8087 	beq.w	800ddf2 <_dtoa_r+0x4e2>
 800dce4:	f1bb 0f00 	cmp.w	fp, #0
 800dce8:	dd34      	ble.n	800dd54 <_dtoa_r+0x444>
 800dcea:	4620      	mov	r0, r4
 800dcec:	2200      	movs	r2, #0
 800dcee:	4629      	mov	r1, r5
 800dcf0:	4b6c      	ldr	r3, [pc, #432]	@ (800dea4 <_dtoa_r+0x594>)
 800dcf2:	f7f2 fc61 	bl	80005b8 <__aeabi_dmul>
 800dcf6:	465c      	mov	r4, fp
 800dcf8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dcfc:	f107 38ff 	add.w	r8, r7, #4294967295
 800dd00:	3601      	adds	r6, #1
 800dd02:	4630      	mov	r0, r6
 800dd04:	f7f2 fbee 	bl	80004e4 <__aeabi_i2d>
 800dd08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd0c:	f7f2 fc54 	bl	80005b8 <__aeabi_dmul>
 800dd10:	2200      	movs	r2, #0
 800dd12:	4b65      	ldr	r3, [pc, #404]	@ (800dea8 <_dtoa_r+0x598>)
 800dd14:	f7f2 fa9a 	bl	800024c <__adddf3>
 800dd18:	4605      	mov	r5, r0
 800dd1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dd1e:	2c00      	cmp	r4, #0
 800dd20:	d16a      	bne.n	800ddf8 <_dtoa_r+0x4e8>
 800dd22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd26:	2200      	movs	r2, #0
 800dd28:	4b60      	ldr	r3, [pc, #384]	@ (800deac <_dtoa_r+0x59c>)
 800dd2a:	f7f2 fa8d 	bl	8000248 <__aeabi_dsub>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dd36:	462a      	mov	r2, r5
 800dd38:	4633      	mov	r3, r6
 800dd3a:	f7f2 fecd 	bl	8000ad8 <__aeabi_dcmpgt>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f040 8298 	bne.w	800e274 <_dtoa_r+0x964>
 800dd44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd48:	462a      	mov	r2, r5
 800dd4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dd4e:	f7f2 fea5 	bl	8000a9c <__aeabi_dcmplt>
 800dd52:	bb38      	cbnz	r0, 800dda4 <_dtoa_r+0x494>
 800dd54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800dd58:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800dd5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	f2c0 8157 	blt.w	800e012 <_dtoa_r+0x702>
 800dd64:	2f0e      	cmp	r7, #14
 800dd66:	f300 8154 	bgt.w	800e012 <_dtoa_r+0x702>
 800dd6a:	4b4b      	ldr	r3, [pc, #300]	@ (800de98 <_dtoa_r+0x588>)
 800dd6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd70:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dd74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dd78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f280 80e5 	bge.w	800df4a <_dtoa_r+0x63a>
 800dd80:	9b08      	ldr	r3, [sp, #32]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f300 80e1 	bgt.w	800df4a <_dtoa_r+0x63a>
 800dd88:	d10c      	bne.n	800dda4 <_dtoa_r+0x494>
 800dd8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	4b46      	ldr	r3, [pc, #280]	@ (800deac <_dtoa_r+0x59c>)
 800dd92:	f7f2 fc11 	bl	80005b8 <__aeabi_dmul>
 800dd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd9a:	f7f2 fe93 	bl	8000ac4 <__aeabi_dcmpge>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	f000 8266 	beq.w	800e270 <_dtoa_r+0x960>
 800dda4:	2400      	movs	r4, #0
 800dda6:	4625      	mov	r5, r4
 800dda8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ddaa:	4656      	mov	r6, sl
 800ddac:	ea6f 0803 	mvn.w	r8, r3
 800ddb0:	2700      	movs	r7, #0
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	4648      	mov	r0, r9
 800ddb6:	f000 fccf 	bl	800e758 <_Bfree>
 800ddba:	2d00      	cmp	r5, #0
 800ddbc:	f000 80bd 	beq.w	800df3a <_dtoa_r+0x62a>
 800ddc0:	b12f      	cbz	r7, 800ddce <_dtoa_r+0x4be>
 800ddc2:	42af      	cmp	r7, r5
 800ddc4:	d003      	beq.n	800ddce <_dtoa_r+0x4be>
 800ddc6:	4639      	mov	r1, r7
 800ddc8:	4648      	mov	r0, r9
 800ddca:	f000 fcc5 	bl	800e758 <_Bfree>
 800ddce:	4629      	mov	r1, r5
 800ddd0:	4648      	mov	r0, r9
 800ddd2:	f000 fcc1 	bl	800e758 <_Bfree>
 800ddd6:	e0b0      	b.n	800df3a <_dtoa_r+0x62a>
 800ddd8:	07e2      	lsls	r2, r4, #31
 800ddda:	d505      	bpl.n	800dde8 <_dtoa_r+0x4d8>
 800dddc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dde0:	f7f2 fbea 	bl	80005b8 <__aeabi_dmul>
 800dde4:	2301      	movs	r3, #1
 800dde6:	3601      	adds	r6, #1
 800dde8:	1064      	asrs	r4, r4, #1
 800ddea:	3508      	adds	r5, #8
 800ddec:	e762      	b.n	800dcb4 <_dtoa_r+0x3a4>
 800ddee:	2602      	movs	r6, #2
 800ddf0:	e765      	b.n	800dcbe <_dtoa_r+0x3ae>
 800ddf2:	46b8      	mov	r8, r7
 800ddf4:	9c08      	ldr	r4, [sp, #32]
 800ddf6:	e784      	b.n	800dd02 <_dtoa_r+0x3f2>
 800ddf8:	4b27      	ldr	r3, [pc, #156]	@ (800de98 <_dtoa_r+0x588>)
 800ddfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ddfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de04:	4454      	add	r4, sl
 800de06:	2900      	cmp	r1, #0
 800de08:	d054      	beq.n	800deb4 <_dtoa_r+0x5a4>
 800de0a:	2000      	movs	r0, #0
 800de0c:	4928      	ldr	r1, [pc, #160]	@ (800deb0 <_dtoa_r+0x5a0>)
 800de0e:	f7f2 fcfd 	bl	800080c <__aeabi_ddiv>
 800de12:	4633      	mov	r3, r6
 800de14:	462a      	mov	r2, r5
 800de16:	f7f2 fa17 	bl	8000248 <__aeabi_dsub>
 800de1a:	4656      	mov	r6, sl
 800de1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800de20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de24:	f7f2 fe78 	bl	8000b18 <__aeabi_d2iz>
 800de28:	4605      	mov	r5, r0
 800de2a:	f7f2 fb5b 	bl	80004e4 <__aeabi_i2d>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de36:	f7f2 fa07 	bl	8000248 <__aeabi_dsub>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	3530      	adds	r5, #48	@ 0x30
 800de40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800de48:	f806 5b01 	strb.w	r5, [r6], #1
 800de4c:	f7f2 fe26 	bl	8000a9c <__aeabi_dcmplt>
 800de50:	2800      	cmp	r0, #0
 800de52:	d172      	bne.n	800df3a <_dtoa_r+0x62a>
 800de54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de58:	2000      	movs	r0, #0
 800de5a:	4911      	ldr	r1, [pc, #68]	@ (800dea0 <_dtoa_r+0x590>)
 800de5c:	f7f2 f9f4 	bl	8000248 <__aeabi_dsub>
 800de60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800de64:	f7f2 fe1a 	bl	8000a9c <__aeabi_dcmplt>
 800de68:	2800      	cmp	r0, #0
 800de6a:	f040 80b4 	bne.w	800dfd6 <_dtoa_r+0x6c6>
 800de6e:	42a6      	cmp	r6, r4
 800de70:	f43f af70 	beq.w	800dd54 <_dtoa_r+0x444>
 800de74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800de78:	2200      	movs	r2, #0
 800de7a:	4b0a      	ldr	r3, [pc, #40]	@ (800dea4 <_dtoa_r+0x594>)
 800de7c:	f7f2 fb9c 	bl	80005b8 <__aeabi_dmul>
 800de80:	2200      	movs	r2, #0
 800de82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800de86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de8a:	4b06      	ldr	r3, [pc, #24]	@ (800dea4 <_dtoa_r+0x594>)
 800de8c:	f7f2 fb94 	bl	80005b8 <__aeabi_dmul>
 800de90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800de94:	e7c4      	b.n	800de20 <_dtoa_r+0x510>
 800de96:	bf00      	nop
 800de98:	0800fc48 	.word	0x0800fc48
 800de9c:	0800fc20 	.word	0x0800fc20
 800dea0:	3ff00000 	.word	0x3ff00000
 800dea4:	40240000 	.word	0x40240000
 800dea8:	401c0000 	.word	0x401c0000
 800deac:	40140000 	.word	0x40140000
 800deb0:	3fe00000 	.word	0x3fe00000
 800deb4:	4631      	mov	r1, r6
 800deb6:	4628      	mov	r0, r5
 800deb8:	f7f2 fb7e 	bl	80005b8 <__aeabi_dmul>
 800debc:	4656      	mov	r6, sl
 800debe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dec2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dec8:	f7f2 fe26 	bl	8000b18 <__aeabi_d2iz>
 800decc:	4605      	mov	r5, r0
 800dece:	f7f2 fb09 	bl	80004e4 <__aeabi_i2d>
 800ded2:	4602      	mov	r2, r0
 800ded4:	460b      	mov	r3, r1
 800ded6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800deda:	f7f2 f9b5 	bl	8000248 <__aeabi_dsub>
 800dede:	4602      	mov	r2, r0
 800dee0:	460b      	mov	r3, r1
 800dee2:	3530      	adds	r5, #48	@ 0x30
 800dee4:	f806 5b01 	strb.w	r5, [r6], #1
 800dee8:	42a6      	cmp	r6, r4
 800deea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800deee:	f04f 0200 	mov.w	r2, #0
 800def2:	d124      	bne.n	800df3e <_dtoa_r+0x62e>
 800def4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800def8:	4bae      	ldr	r3, [pc, #696]	@ (800e1b4 <_dtoa_r+0x8a4>)
 800defa:	f7f2 f9a7 	bl	800024c <__adddf3>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df06:	f7f2 fde7 	bl	8000ad8 <__aeabi_dcmpgt>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d163      	bne.n	800dfd6 <_dtoa_r+0x6c6>
 800df0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800df12:	2000      	movs	r0, #0
 800df14:	49a7      	ldr	r1, [pc, #668]	@ (800e1b4 <_dtoa_r+0x8a4>)
 800df16:	f7f2 f997 	bl	8000248 <__aeabi_dsub>
 800df1a:	4602      	mov	r2, r0
 800df1c:	460b      	mov	r3, r1
 800df1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df22:	f7f2 fdbb 	bl	8000a9c <__aeabi_dcmplt>
 800df26:	2800      	cmp	r0, #0
 800df28:	f43f af14 	beq.w	800dd54 <_dtoa_r+0x444>
 800df2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800df2e:	1e73      	subs	r3, r6, #1
 800df30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df36:	2b30      	cmp	r3, #48	@ 0x30
 800df38:	d0f8      	beq.n	800df2c <_dtoa_r+0x61c>
 800df3a:	4647      	mov	r7, r8
 800df3c:	e03b      	b.n	800dfb6 <_dtoa_r+0x6a6>
 800df3e:	4b9e      	ldr	r3, [pc, #632]	@ (800e1b8 <_dtoa_r+0x8a8>)
 800df40:	f7f2 fb3a 	bl	80005b8 <__aeabi_dmul>
 800df44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800df48:	e7bc      	b.n	800dec4 <_dtoa_r+0x5b4>
 800df4a:	4656      	mov	r6, sl
 800df4c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800df50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df54:	4620      	mov	r0, r4
 800df56:	4629      	mov	r1, r5
 800df58:	f7f2 fc58 	bl	800080c <__aeabi_ddiv>
 800df5c:	f7f2 fddc 	bl	8000b18 <__aeabi_d2iz>
 800df60:	4680      	mov	r8, r0
 800df62:	f7f2 fabf 	bl	80004e4 <__aeabi_i2d>
 800df66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df6a:	f7f2 fb25 	bl	80005b8 <__aeabi_dmul>
 800df6e:	4602      	mov	r2, r0
 800df70:	460b      	mov	r3, r1
 800df72:	4620      	mov	r0, r4
 800df74:	4629      	mov	r1, r5
 800df76:	f7f2 f967 	bl	8000248 <__aeabi_dsub>
 800df7a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800df7e:	9d08      	ldr	r5, [sp, #32]
 800df80:	f806 4b01 	strb.w	r4, [r6], #1
 800df84:	eba6 040a 	sub.w	r4, r6, sl
 800df88:	42a5      	cmp	r5, r4
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	d133      	bne.n	800dff8 <_dtoa_r+0x6e8>
 800df90:	f7f2 f95c 	bl	800024c <__adddf3>
 800df94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df98:	4604      	mov	r4, r0
 800df9a:	460d      	mov	r5, r1
 800df9c:	f7f2 fd9c 	bl	8000ad8 <__aeabi_dcmpgt>
 800dfa0:	b9c0      	cbnz	r0, 800dfd4 <_dtoa_r+0x6c4>
 800dfa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	f7f2 fd6d 	bl	8000a88 <__aeabi_dcmpeq>
 800dfae:	b110      	cbz	r0, 800dfb6 <_dtoa_r+0x6a6>
 800dfb0:	f018 0f01 	tst.w	r8, #1
 800dfb4:	d10e      	bne.n	800dfd4 <_dtoa_r+0x6c4>
 800dfb6:	4648      	mov	r0, r9
 800dfb8:	9903      	ldr	r1, [sp, #12]
 800dfba:	f000 fbcd 	bl	800e758 <_Bfree>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	7033      	strb	r3, [r6, #0]
 800dfc2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dfc4:	3701      	adds	r7, #1
 800dfc6:	601f      	str	r7, [r3, #0]
 800dfc8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f000 824b 	beq.w	800e466 <_dtoa_r+0xb56>
 800dfd0:	601e      	str	r6, [r3, #0]
 800dfd2:	e248      	b.n	800e466 <_dtoa_r+0xb56>
 800dfd4:	46b8      	mov	r8, r7
 800dfd6:	4633      	mov	r3, r6
 800dfd8:	461e      	mov	r6, r3
 800dfda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfde:	2a39      	cmp	r2, #57	@ 0x39
 800dfe0:	d106      	bne.n	800dff0 <_dtoa_r+0x6e0>
 800dfe2:	459a      	cmp	sl, r3
 800dfe4:	d1f8      	bne.n	800dfd8 <_dtoa_r+0x6c8>
 800dfe6:	2230      	movs	r2, #48	@ 0x30
 800dfe8:	f108 0801 	add.w	r8, r8, #1
 800dfec:	f88a 2000 	strb.w	r2, [sl]
 800dff0:	781a      	ldrb	r2, [r3, #0]
 800dff2:	3201      	adds	r2, #1
 800dff4:	701a      	strb	r2, [r3, #0]
 800dff6:	e7a0      	b.n	800df3a <_dtoa_r+0x62a>
 800dff8:	2200      	movs	r2, #0
 800dffa:	4b6f      	ldr	r3, [pc, #444]	@ (800e1b8 <_dtoa_r+0x8a8>)
 800dffc:	f7f2 fadc 	bl	80005b8 <__aeabi_dmul>
 800e000:	2200      	movs	r2, #0
 800e002:	2300      	movs	r3, #0
 800e004:	4604      	mov	r4, r0
 800e006:	460d      	mov	r5, r1
 800e008:	f7f2 fd3e 	bl	8000a88 <__aeabi_dcmpeq>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d09f      	beq.n	800df50 <_dtoa_r+0x640>
 800e010:	e7d1      	b.n	800dfb6 <_dtoa_r+0x6a6>
 800e012:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e014:	2a00      	cmp	r2, #0
 800e016:	f000 80ea 	beq.w	800e1ee <_dtoa_r+0x8de>
 800e01a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e01c:	2a01      	cmp	r2, #1
 800e01e:	f300 80cd 	bgt.w	800e1bc <_dtoa_r+0x8ac>
 800e022:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e024:	2a00      	cmp	r2, #0
 800e026:	f000 80c1 	beq.w	800e1ac <_dtoa_r+0x89c>
 800e02a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e02e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e030:	9e04      	ldr	r6, [sp, #16]
 800e032:	9a04      	ldr	r2, [sp, #16]
 800e034:	2101      	movs	r1, #1
 800e036:	441a      	add	r2, r3
 800e038:	9204      	str	r2, [sp, #16]
 800e03a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e03c:	4648      	mov	r0, r9
 800e03e:	441a      	add	r2, r3
 800e040:	9209      	str	r2, [sp, #36]	@ 0x24
 800e042:	f000 fc3d 	bl	800e8c0 <__i2b>
 800e046:	4605      	mov	r5, r0
 800e048:	b166      	cbz	r6, 800e064 <_dtoa_r+0x754>
 800e04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	dd09      	ble.n	800e064 <_dtoa_r+0x754>
 800e050:	42b3      	cmp	r3, r6
 800e052:	bfa8      	it	ge
 800e054:	4633      	movge	r3, r6
 800e056:	9a04      	ldr	r2, [sp, #16]
 800e058:	1af6      	subs	r6, r6, r3
 800e05a:	1ad2      	subs	r2, r2, r3
 800e05c:	9204      	str	r2, [sp, #16]
 800e05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	9309      	str	r3, [sp, #36]	@ 0x24
 800e064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e066:	b30b      	cbz	r3, 800e0ac <_dtoa_r+0x79c>
 800e068:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f000 80c6 	beq.w	800e1fc <_dtoa_r+0x8ec>
 800e070:	2c00      	cmp	r4, #0
 800e072:	f000 80c0 	beq.w	800e1f6 <_dtoa_r+0x8e6>
 800e076:	4629      	mov	r1, r5
 800e078:	4622      	mov	r2, r4
 800e07a:	4648      	mov	r0, r9
 800e07c:	f000 fcd8 	bl	800ea30 <__pow5mult>
 800e080:	9a03      	ldr	r2, [sp, #12]
 800e082:	4601      	mov	r1, r0
 800e084:	4605      	mov	r5, r0
 800e086:	4648      	mov	r0, r9
 800e088:	f000 fc30 	bl	800e8ec <__multiply>
 800e08c:	9903      	ldr	r1, [sp, #12]
 800e08e:	4680      	mov	r8, r0
 800e090:	4648      	mov	r0, r9
 800e092:	f000 fb61 	bl	800e758 <_Bfree>
 800e096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e098:	1b1b      	subs	r3, r3, r4
 800e09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e09c:	f000 80b1 	beq.w	800e202 <_dtoa_r+0x8f2>
 800e0a0:	4641      	mov	r1, r8
 800e0a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0a4:	4648      	mov	r0, r9
 800e0a6:	f000 fcc3 	bl	800ea30 <__pow5mult>
 800e0aa:	9003      	str	r0, [sp, #12]
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	4648      	mov	r0, r9
 800e0b0:	f000 fc06 	bl	800e8c0 <__i2b>
 800e0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f000 81d8 	beq.w	800e46e <_dtoa_r+0xb5e>
 800e0be:	461a      	mov	r2, r3
 800e0c0:	4601      	mov	r1, r0
 800e0c2:	4648      	mov	r0, r9
 800e0c4:	f000 fcb4 	bl	800ea30 <__pow5mult>
 800e0c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	f300 809f 	bgt.w	800e210 <_dtoa_r+0x900>
 800e0d2:	9b06      	ldr	r3, [sp, #24]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f040 8097 	bne.w	800e208 <_dtoa_r+0x8f8>
 800e0da:	9b07      	ldr	r3, [sp, #28]
 800e0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f040 8093 	bne.w	800e20c <_dtoa_r+0x8fc>
 800e0e6:	9b07      	ldr	r3, [sp, #28]
 800e0e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e0ec:	0d1b      	lsrs	r3, r3, #20
 800e0ee:	051b      	lsls	r3, r3, #20
 800e0f0:	b133      	cbz	r3, 800e100 <_dtoa_r+0x7f0>
 800e0f2:	9b04      	ldr	r3, [sp, #16]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	9304      	str	r3, [sp, #16]
 800e0f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0fe:	2301      	movs	r3, #1
 800e100:	930a      	str	r3, [sp, #40]	@ 0x28
 800e102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 81b8 	beq.w	800e47a <_dtoa_r+0xb6a>
 800e10a:	6923      	ldr	r3, [r4, #16]
 800e10c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e110:	6918      	ldr	r0, [r3, #16]
 800e112:	f000 fb89 	bl	800e828 <__hi0bits>
 800e116:	f1c0 0020 	rsb	r0, r0, #32
 800e11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e11c:	4418      	add	r0, r3
 800e11e:	f010 001f 	ands.w	r0, r0, #31
 800e122:	f000 8082 	beq.w	800e22a <_dtoa_r+0x91a>
 800e126:	f1c0 0320 	rsb	r3, r0, #32
 800e12a:	2b04      	cmp	r3, #4
 800e12c:	dd73      	ble.n	800e216 <_dtoa_r+0x906>
 800e12e:	9b04      	ldr	r3, [sp, #16]
 800e130:	f1c0 001c 	rsb	r0, r0, #28
 800e134:	4403      	add	r3, r0
 800e136:	9304      	str	r3, [sp, #16]
 800e138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e13a:	4406      	add	r6, r0
 800e13c:	4403      	add	r3, r0
 800e13e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e140:	9b04      	ldr	r3, [sp, #16]
 800e142:	2b00      	cmp	r3, #0
 800e144:	dd05      	ble.n	800e152 <_dtoa_r+0x842>
 800e146:	461a      	mov	r2, r3
 800e148:	4648      	mov	r0, r9
 800e14a:	9903      	ldr	r1, [sp, #12]
 800e14c:	f000 fcca 	bl	800eae4 <__lshift>
 800e150:	9003      	str	r0, [sp, #12]
 800e152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e154:	2b00      	cmp	r3, #0
 800e156:	dd05      	ble.n	800e164 <_dtoa_r+0x854>
 800e158:	4621      	mov	r1, r4
 800e15a:	461a      	mov	r2, r3
 800e15c:	4648      	mov	r0, r9
 800e15e:	f000 fcc1 	bl	800eae4 <__lshift>
 800e162:	4604      	mov	r4, r0
 800e164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e166:	2b00      	cmp	r3, #0
 800e168:	d061      	beq.n	800e22e <_dtoa_r+0x91e>
 800e16a:	4621      	mov	r1, r4
 800e16c:	9803      	ldr	r0, [sp, #12]
 800e16e:	f000 fd25 	bl	800ebbc <__mcmp>
 800e172:	2800      	cmp	r0, #0
 800e174:	da5b      	bge.n	800e22e <_dtoa_r+0x91e>
 800e176:	2300      	movs	r3, #0
 800e178:	220a      	movs	r2, #10
 800e17a:	4648      	mov	r0, r9
 800e17c:	9903      	ldr	r1, [sp, #12]
 800e17e:	f000 fb0d 	bl	800e79c <__multadd>
 800e182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e184:	f107 38ff 	add.w	r8, r7, #4294967295
 800e188:	9003      	str	r0, [sp, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f000 8177 	beq.w	800e47e <_dtoa_r+0xb6e>
 800e190:	4629      	mov	r1, r5
 800e192:	2300      	movs	r3, #0
 800e194:	220a      	movs	r2, #10
 800e196:	4648      	mov	r0, r9
 800e198:	f000 fb00 	bl	800e79c <__multadd>
 800e19c:	f1bb 0f00 	cmp.w	fp, #0
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	dc6f      	bgt.n	800e284 <_dtoa_r+0x974>
 800e1a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	dc49      	bgt.n	800e23e <_dtoa_r+0x92e>
 800e1aa:	e06b      	b.n	800e284 <_dtoa_r+0x974>
 800e1ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e1ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e1b2:	e73c      	b.n	800e02e <_dtoa_r+0x71e>
 800e1b4:	3fe00000 	.word	0x3fe00000
 800e1b8:	40240000 	.word	0x40240000
 800e1bc:	9b08      	ldr	r3, [sp, #32]
 800e1be:	1e5c      	subs	r4, r3, #1
 800e1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1c2:	42a3      	cmp	r3, r4
 800e1c4:	db09      	blt.n	800e1da <_dtoa_r+0x8ca>
 800e1c6:	1b1c      	subs	r4, r3, r4
 800e1c8:	9b08      	ldr	r3, [sp, #32]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f6bf af30 	bge.w	800e030 <_dtoa_r+0x720>
 800e1d0:	9b04      	ldr	r3, [sp, #16]
 800e1d2:	9a08      	ldr	r2, [sp, #32]
 800e1d4:	1a9e      	subs	r6, r3, r2
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e72b      	b.n	800e032 <_dtoa_r+0x722>
 800e1da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1de:	1ae3      	subs	r3, r4, r3
 800e1e0:	441a      	add	r2, r3
 800e1e2:	940a      	str	r4, [sp, #40]	@ 0x28
 800e1e4:	9e04      	ldr	r6, [sp, #16]
 800e1e6:	2400      	movs	r4, #0
 800e1e8:	9b08      	ldr	r3, [sp, #32]
 800e1ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1ec:	e721      	b.n	800e032 <_dtoa_r+0x722>
 800e1ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e1f0:	9e04      	ldr	r6, [sp, #16]
 800e1f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e1f4:	e728      	b.n	800e048 <_dtoa_r+0x738>
 800e1f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e1fa:	e751      	b.n	800e0a0 <_dtoa_r+0x790>
 800e1fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1fe:	9903      	ldr	r1, [sp, #12]
 800e200:	e750      	b.n	800e0a4 <_dtoa_r+0x794>
 800e202:	f8cd 800c 	str.w	r8, [sp, #12]
 800e206:	e751      	b.n	800e0ac <_dtoa_r+0x79c>
 800e208:	2300      	movs	r3, #0
 800e20a:	e779      	b.n	800e100 <_dtoa_r+0x7f0>
 800e20c:	9b06      	ldr	r3, [sp, #24]
 800e20e:	e777      	b.n	800e100 <_dtoa_r+0x7f0>
 800e210:	2300      	movs	r3, #0
 800e212:	930a      	str	r3, [sp, #40]	@ 0x28
 800e214:	e779      	b.n	800e10a <_dtoa_r+0x7fa>
 800e216:	d093      	beq.n	800e140 <_dtoa_r+0x830>
 800e218:	9a04      	ldr	r2, [sp, #16]
 800e21a:	331c      	adds	r3, #28
 800e21c:	441a      	add	r2, r3
 800e21e:	9204      	str	r2, [sp, #16]
 800e220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e222:	441e      	add	r6, r3
 800e224:	441a      	add	r2, r3
 800e226:	9209      	str	r2, [sp, #36]	@ 0x24
 800e228:	e78a      	b.n	800e140 <_dtoa_r+0x830>
 800e22a:	4603      	mov	r3, r0
 800e22c:	e7f4      	b.n	800e218 <_dtoa_r+0x908>
 800e22e:	9b08      	ldr	r3, [sp, #32]
 800e230:	46b8      	mov	r8, r7
 800e232:	2b00      	cmp	r3, #0
 800e234:	dc20      	bgt.n	800e278 <_dtoa_r+0x968>
 800e236:	469b      	mov	fp, r3
 800e238:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	dd1e      	ble.n	800e27c <_dtoa_r+0x96c>
 800e23e:	f1bb 0f00 	cmp.w	fp, #0
 800e242:	f47f adb1 	bne.w	800dda8 <_dtoa_r+0x498>
 800e246:	4621      	mov	r1, r4
 800e248:	465b      	mov	r3, fp
 800e24a:	2205      	movs	r2, #5
 800e24c:	4648      	mov	r0, r9
 800e24e:	f000 faa5 	bl	800e79c <__multadd>
 800e252:	4601      	mov	r1, r0
 800e254:	4604      	mov	r4, r0
 800e256:	9803      	ldr	r0, [sp, #12]
 800e258:	f000 fcb0 	bl	800ebbc <__mcmp>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	f77f ada3 	ble.w	800dda8 <_dtoa_r+0x498>
 800e262:	4656      	mov	r6, sl
 800e264:	2331      	movs	r3, #49	@ 0x31
 800e266:	f108 0801 	add.w	r8, r8, #1
 800e26a:	f806 3b01 	strb.w	r3, [r6], #1
 800e26e:	e59f      	b.n	800ddb0 <_dtoa_r+0x4a0>
 800e270:	46b8      	mov	r8, r7
 800e272:	9c08      	ldr	r4, [sp, #32]
 800e274:	4625      	mov	r5, r4
 800e276:	e7f4      	b.n	800e262 <_dtoa_r+0x952>
 800e278:	f8dd b020 	ldr.w	fp, [sp, #32]
 800e27c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 8101 	beq.w	800e486 <_dtoa_r+0xb76>
 800e284:	2e00      	cmp	r6, #0
 800e286:	dd05      	ble.n	800e294 <_dtoa_r+0x984>
 800e288:	4629      	mov	r1, r5
 800e28a:	4632      	mov	r2, r6
 800e28c:	4648      	mov	r0, r9
 800e28e:	f000 fc29 	bl	800eae4 <__lshift>
 800e292:	4605      	mov	r5, r0
 800e294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e296:	2b00      	cmp	r3, #0
 800e298:	d05c      	beq.n	800e354 <_dtoa_r+0xa44>
 800e29a:	4648      	mov	r0, r9
 800e29c:	6869      	ldr	r1, [r5, #4]
 800e29e:	f000 fa1b 	bl	800e6d8 <_Balloc>
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	b928      	cbnz	r0, 800e2b2 <_dtoa_r+0x9a2>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e2ac:	4b80      	ldr	r3, [pc, #512]	@ (800e4b0 <_dtoa_r+0xba0>)
 800e2ae:	f7ff bb43 	b.w	800d938 <_dtoa_r+0x28>
 800e2b2:	692a      	ldr	r2, [r5, #16]
 800e2b4:	f105 010c 	add.w	r1, r5, #12
 800e2b8:	3202      	adds	r2, #2
 800e2ba:	0092      	lsls	r2, r2, #2
 800e2bc:	300c      	adds	r0, #12
 800e2be:	f7ff fa90 	bl	800d7e2 <memcpy>
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	4648      	mov	r0, r9
 800e2c8:	f000 fc0c 	bl	800eae4 <__lshift>
 800e2cc:	462f      	mov	r7, r5
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	f10a 0301 	add.w	r3, sl, #1
 800e2d4:	9304      	str	r3, [sp, #16]
 800e2d6:	eb0a 030b 	add.w	r3, sl, fp
 800e2da:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2dc:	9b06      	ldr	r3, [sp, #24]
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e4:	9b04      	ldr	r3, [sp, #16]
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	9803      	ldr	r0, [sp, #12]
 800e2ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800e2ee:	f7ff fa86 	bl	800d7fe <quorem>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	4639      	mov	r1, r7
 800e2f6:	3330      	adds	r3, #48	@ 0x30
 800e2f8:	9006      	str	r0, [sp, #24]
 800e2fa:	9803      	ldr	r0, [sp, #12]
 800e2fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2fe:	f000 fc5d 	bl	800ebbc <__mcmp>
 800e302:	462a      	mov	r2, r5
 800e304:	9008      	str	r0, [sp, #32]
 800e306:	4621      	mov	r1, r4
 800e308:	4648      	mov	r0, r9
 800e30a:	f000 fc73 	bl	800ebf4 <__mdiff>
 800e30e:	68c2      	ldr	r2, [r0, #12]
 800e310:	4606      	mov	r6, r0
 800e312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e314:	bb02      	cbnz	r2, 800e358 <_dtoa_r+0xa48>
 800e316:	4601      	mov	r1, r0
 800e318:	9803      	ldr	r0, [sp, #12]
 800e31a:	f000 fc4f 	bl	800ebbc <__mcmp>
 800e31e:	4602      	mov	r2, r0
 800e320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e322:	4631      	mov	r1, r6
 800e324:	4648      	mov	r0, r9
 800e326:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800e32a:	f000 fa15 	bl	800e758 <_Bfree>
 800e32e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e330:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e332:	9e04      	ldr	r6, [sp, #16]
 800e334:	ea42 0103 	orr.w	r1, r2, r3
 800e338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e33a:	4319      	orrs	r1, r3
 800e33c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e33e:	d10d      	bne.n	800e35c <_dtoa_r+0xa4c>
 800e340:	2b39      	cmp	r3, #57	@ 0x39
 800e342:	d027      	beq.n	800e394 <_dtoa_r+0xa84>
 800e344:	9a08      	ldr	r2, [sp, #32]
 800e346:	2a00      	cmp	r2, #0
 800e348:	dd01      	ble.n	800e34e <_dtoa_r+0xa3e>
 800e34a:	9b06      	ldr	r3, [sp, #24]
 800e34c:	3331      	adds	r3, #49	@ 0x31
 800e34e:	f88b 3000 	strb.w	r3, [fp]
 800e352:	e52e      	b.n	800ddb2 <_dtoa_r+0x4a2>
 800e354:	4628      	mov	r0, r5
 800e356:	e7b9      	b.n	800e2cc <_dtoa_r+0x9bc>
 800e358:	2201      	movs	r2, #1
 800e35a:	e7e2      	b.n	800e322 <_dtoa_r+0xa12>
 800e35c:	9908      	ldr	r1, [sp, #32]
 800e35e:	2900      	cmp	r1, #0
 800e360:	db04      	blt.n	800e36c <_dtoa_r+0xa5c>
 800e362:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800e364:	4301      	orrs	r1, r0
 800e366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e368:	4301      	orrs	r1, r0
 800e36a:	d120      	bne.n	800e3ae <_dtoa_r+0xa9e>
 800e36c:	2a00      	cmp	r2, #0
 800e36e:	ddee      	ble.n	800e34e <_dtoa_r+0xa3e>
 800e370:	2201      	movs	r2, #1
 800e372:	9903      	ldr	r1, [sp, #12]
 800e374:	4648      	mov	r0, r9
 800e376:	9304      	str	r3, [sp, #16]
 800e378:	f000 fbb4 	bl	800eae4 <__lshift>
 800e37c:	4621      	mov	r1, r4
 800e37e:	9003      	str	r0, [sp, #12]
 800e380:	f000 fc1c 	bl	800ebbc <__mcmp>
 800e384:	2800      	cmp	r0, #0
 800e386:	9b04      	ldr	r3, [sp, #16]
 800e388:	dc02      	bgt.n	800e390 <_dtoa_r+0xa80>
 800e38a:	d1e0      	bne.n	800e34e <_dtoa_r+0xa3e>
 800e38c:	07da      	lsls	r2, r3, #31
 800e38e:	d5de      	bpl.n	800e34e <_dtoa_r+0xa3e>
 800e390:	2b39      	cmp	r3, #57	@ 0x39
 800e392:	d1da      	bne.n	800e34a <_dtoa_r+0xa3a>
 800e394:	2339      	movs	r3, #57	@ 0x39
 800e396:	f88b 3000 	strb.w	r3, [fp]
 800e39a:	4633      	mov	r3, r6
 800e39c:	461e      	mov	r6, r3
 800e39e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	2a39      	cmp	r2, #57	@ 0x39
 800e3a6:	d04e      	beq.n	800e446 <_dtoa_r+0xb36>
 800e3a8:	3201      	adds	r2, #1
 800e3aa:	701a      	strb	r2, [r3, #0]
 800e3ac:	e501      	b.n	800ddb2 <_dtoa_r+0x4a2>
 800e3ae:	2a00      	cmp	r2, #0
 800e3b0:	dd03      	ble.n	800e3ba <_dtoa_r+0xaaa>
 800e3b2:	2b39      	cmp	r3, #57	@ 0x39
 800e3b4:	d0ee      	beq.n	800e394 <_dtoa_r+0xa84>
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	e7c9      	b.n	800e34e <_dtoa_r+0xa3e>
 800e3ba:	9a04      	ldr	r2, [sp, #16]
 800e3bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e3c2:	428a      	cmp	r2, r1
 800e3c4:	d028      	beq.n	800e418 <_dtoa_r+0xb08>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	220a      	movs	r2, #10
 800e3ca:	9903      	ldr	r1, [sp, #12]
 800e3cc:	4648      	mov	r0, r9
 800e3ce:	f000 f9e5 	bl	800e79c <__multadd>
 800e3d2:	42af      	cmp	r7, r5
 800e3d4:	9003      	str	r0, [sp, #12]
 800e3d6:	f04f 0300 	mov.w	r3, #0
 800e3da:	f04f 020a 	mov.w	r2, #10
 800e3de:	4639      	mov	r1, r7
 800e3e0:	4648      	mov	r0, r9
 800e3e2:	d107      	bne.n	800e3f4 <_dtoa_r+0xae4>
 800e3e4:	f000 f9da 	bl	800e79c <__multadd>
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	9b04      	ldr	r3, [sp, #16]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	9304      	str	r3, [sp, #16]
 800e3f2:	e777      	b.n	800e2e4 <_dtoa_r+0x9d4>
 800e3f4:	f000 f9d2 	bl	800e79c <__multadd>
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4607      	mov	r7, r0
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	220a      	movs	r2, #10
 800e400:	4648      	mov	r0, r9
 800e402:	f000 f9cb 	bl	800e79c <__multadd>
 800e406:	4605      	mov	r5, r0
 800e408:	e7f0      	b.n	800e3ec <_dtoa_r+0xadc>
 800e40a:	f1bb 0f00 	cmp.w	fp, #0
 800e40e:	bfcc      	ite	gt
 800e410:	465e      	movgt	r6, fp
 800e412:	2601      	movle	r6, #1
 800e414:	2700      	movs	r7, #0
 800e416:	4456      	add	r6, sl
 800e418:	2201      	movs	r2, #1
 800e41a:	9903      	ldr	r1, [sp, #12]
 800e41c:	4648      	mov	r0, r9
 800e41e:	9304      	str	r3, [sp, #16]
 800e420:	f000 fb60 	bl	800eae4 <__lshift>
 800e424:	4621      	mov	r1, r4
 800e426:	9003      	str	r0, [sp, #12]
 800e428:	f000 fbc8 	bl	800ebbc <__mcmp>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	dcb4      	bgt.n	800e39a <_dtoa_r+0xa8a>
 800e430:	d102      	bne.n	800e438 <_dtoa_r+0xb28>
 800e432:	9b04      	ldr	r3, [sp, #16]
 800e434:	07db      	lsls	r3, r3, #31
 800e436:	d4b0      	bmi.n	800e39a <_dtoa_r+0xa8a>
 800e438:	4633      	mov	r3, r6
 800e43a:	461e      	mov	r6, r3
 800e43c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e440:	2a30      	cmp	r2, #48	@ 0x30
 800e442:	d0fa      	beq.n	800e43a <_dtoa_r+0xb2a>
 800e444:	e4b5      	b.n	800ddb2 <_dtoa_r+0x4a2>
 800e446:	459a      	cmp	sl, r3
 800e448:	d1a8      	bne.n	800e39c <_dtoa_r+0xa8c>
 800e44a:	2331      	movs	r3, #49	@ 0x31
 800e44c:	f108 0801 	add.w	r8, r8, #1
 800e450:	f88a 3000 	strb.w	r3, [sl]
 800e454:	e4ad      	b.n	800ddb2 <_dtoa_r+0x4a2>
 800e456:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e458:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e4b4 <_dtoa_r+0xba4>
 800e45c:	b11b      	cbz	r3, 800e466 <_dtoa_r+0xb56>
 800e45e:	f10a 0308 	add.w	r3, sl, #8
 800e462:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e464:	6013      	str	r3, [r2, #0]
 800e466:	4650      	mov	r0, sl
 800e468:	b017      	add	sp, #92	@ 0x5c
 800e46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e46e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e470:	2b01      	cmp	r3, #1
 800e472:	f77f ae2e 	ble.w	800e0d2 <_dtoa_r+0x7c2>
 800e476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e478:	930a      	str	r3, [sp, #40]	@ 0x28
 800e47a:	2001      	movs	r0, #1
 800e47c:	e64d      	b.n	800e11a <_dtoa_r+0x80a>
 800e47e:	f1bb 0f00 	cmp.w	fp, #0
 800e482:	f77f aed9 	ble.w	800e238 <_dtoa_r+0x928>
 800e486:	4656      	mov	r6, sl
 800e488:	4621      	mov	r1, r4
 800e48a:	9803      	ldr	r0, [sp, #12]
 800e48c:	f7ff f9b7 	bl	800d7fe <quorem>
 800e490:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e494:	f806 3b01 	strb.w	r3, [r6], #1
 800e498:	eba6 020a 	sub.w	r2, r6, sl
 800e49c:	4593      	cmp	fp, r2
 800e49e:	ddb4      	ble.n	800e40a <_dtoa_r+0xafa>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	220a      	movs	r2, #10
 800e4a4:	4648      	mov	r0, r9
 800e4a6:	9903      	ldr	r1, [sp, #12]
 800e4a8:	f000 f978 	bl	800e79c <__multadd>
 800e4ac:	9003      	str	r0, [sp, #12]
 800e4ae:	e7eb      	b.n	800e488 <_dtoa_r+0xb78>
 800e4b0:	0800fb5d 	.word	0x0800fb5d
 800e4b4:	0800fae1 	.word	0x0800fae1

0800e4b8 <_free_r>:
 800e4b8:	b538      	push	{r3, r4, r5, lr}
 800e4ba:	4605      	mov	r5, r0
 800e4bc:	2900      	cmp	r1, #0
 800e4be:	d040      	beq.n	800e542 <_free_r+0x8a>
 800e4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4c4:	1f0c      	subs	r4, r1, #4
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	bfb8      	it	lt
 800e4ca:	18e4      	addlt	r4, r4, r3
 800e4cc:	f000 f8f8 	bl	800e6c0 <__malloc_lock>
 800e4d0:	4a1c      	ldr	r2, [pc, #112]	@ (800e544 <_free_r+0x8c>)
 800e4d2:	6813      	ldr	r3, [r2, #0]
 800e4d4:	b933      	cbnz	r3, 800e4e4 <_free_r+0x2c>
 800e4d6:	6063      	str	r3, [r4, #4]
 800e4d8:	6014      	str	r4, [r2, #0]
 800e4da:	4628      	mov	r0, r5
 800e4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4e0:	f000 b8f4 	b.w	800e6cc <__malloc_unlock>
 800e4e4:	42a3      	cmp	r3, r4
 800e4e6:	d908      	bls.n	800e4fa <_free_r+0x42>
 800e4e8:	6820      	ldr	r0, [r4, #0]
 800e4ea:	1821      	adds	r1, r4, r0
 800e4ec:	428b      	cmp	r3, r1
 800e4ee:	bf01      	itttt	eq
 800e4f0:	6819      	ldreq	r1, [r3, #0]
 800e4f2:	685b      	ldreq	r3, [r3, #4]
 800e4f4:	1809      	addeq	r1, r1, r0
 800e4f6:	6021      	streq	r1, [r4, #0]
 800e4f8:	e7ed      	b.n	800e4d6 <_free_r+0x1e>
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	b10b      	cbz	r3, 800e504 <_free_r+0x4c>
 800e500:	42a3      	cmp	r3, r4
 800e502:	d9fa      	bls.n	800e4fa <_free_r+0x42>
 800e504:	6811      	ldr	r1, [r2, #0]
 800e506:	1850      	adds	r0, r2, r1
 800e508:	42a0      	cmp	r0, r4
 800e50a:	d10b      	bne.n	800e524 <_free_r+0x6c>
 800e50c:	6820      	ldr	r0, [r4, #0]
 800e50e:	4401      	add	r1, r0
 800e510:	1850      	adds	r0, r2, r1
 800e512:	4283      	cmp	r3, r0
 800e514:	6011      	str	r1, [r2, #0]
 800e516:	d1e0      	bne.n	800e4da <_free_r+0x22>
 800e518:	6818      	ldr	r0, [r3, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	4408      	add	r0, r1
 800e51e:	6010      	str	r0, [r2, #0]
 800e520:	6053      	str	r3, [r2, #4]
 800e522:	e7da      	b.n	800e4da <_free_r+0x22>
 800e524:	d902      	bls.n	800e52c <_free_r+0x74>
 800e526:	230c      	movs	r3, #12
 800e528:	602b      	str	r3, [r5, #0]
 800e52a:	e7d6      	b.n	800e4da <_free_r+0x22>
 800e52c:	6820      	ldr	r0, [r4, #0]
 800e52e:	1821      	adds	r1, r4, r0
 800e530:	428b      	cmp	r3, r1
 800e532:	bf01      	itttt	eq
 800e534:	6819      	ldreq	r1, [r3, #0]
 800e536:	685b      	ldreq	r3, [r3, #4]
 800e538:	1809      	addeq	r1, r1, r0
 800e53a:	6021      	streq	r1, [r4, #0]
 800e53c:	6063      	str	r3, [r4, #4]
 800e53e:	6054      	str	r4, [r2, #4]
 800e540:	e7cb      	b.n	800e4da <_free_r+0x22>
 800e542:	bd38      	pop	{r3, r4, r5, pc}
 800e544:	20002490 	.word	0x20002490

0800e548 <malloc>:
 800e548:	4b02      	ldr	r3, [pc, #8]	@ (800e554 <malloc+0xc>)
 800e54a:	4601      	mov	r1, r0
 800e54c:	6818      	ldr	r0, [r3, #0]
 800e54e:	f000 b825 	b.w	800e59c <_malloc_r>
 800e552:	bf00      	nop
 800e554:	200001ac 	.word	0x200001ac

0800e558 <sbrk_aligned>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	4e0f      	ldr	r6, [pc, #60]	@ (800e598 <sbrk_aligned+0x40>)
 800e55c:	460c      	mov	r4, r1
 800e55e:	6831      	ldr	r1, [r6, #0]
 800e560:	4605      	mov	r5, r0
 800e562:	b911      	cbnz	r1, 800e56a <sbrk_aligned+0x12>
 800e564:	f000 fedc 	bl	800f320 <_sbrk_r>
 800e568:	6030      	str	r0, [r6, #0]
 800e56a:	4621      	mov	r1, r4
 800e56c:	4628      	mov	r0, r5
 800e56e:	f000 fed7 	bl	800f320 <_sbrk_r>
 800e572:	1c43      	adds	r3, r0, #1
 800e574:	d103      	bne.n	800e57e <sbrk_aligned+0x26>
 800e576:	f04f 34ff 	mov.w	r4, #4294967295
 800e57a:	4620      	mov	r0, r4
 800e57c:	bd70      	pop	{r4, r5, r6, pc}
 800e57e:	1cc4      	adds	r4, r0, #3
 800e580:	f024 0403 	bic.w	r4, r4, #3
 800e584:	42a0      	cmp	r0, r4
 800e586:	d0f8      	beq.n	800e57a <sbrk_aligned+0x22>
 800e588:	1a21      	subs	r1, r4, r0
 800e58a:	4628      	mov	r0, r5
 800e58c:	f000 fec8 	bl	800f320 <_sbrk_r>
 800e590:	3001      	adds	r0, #1
 800e592:	d1f2      	bne.n	800e57a <sbrk_aligned+0x22>
 800e594:	e7ef      	b.n	800e576 <sbrk_aligned+0x1e>
 800e596:	bf00      	nop
 800e598:	2000248c 	.word	0x2000248c

0800e59c <_malloc_r>:
 800e59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5a0:	1ccd      	adds	r5, r1, #3
 800e5a2:	f025 0503 	bic.w	r5, r5, #3
 800e5a6:	3508      	adds	r5, #8
 800e5a8:	2d0c      	cmp	r5, #12
 800e5aa:	bf38      	it	cc
 800e5ac:	250c      	movcc	r5, #12
 800e5ae:	2d00      	cmp	r5, #0
 800e5b0:	4606      	mov	r6, r0
 800e5b2:	db01      	blt.n	800e5b8 <_malloc_r+0x1c>
 800e5b4:	42a9      	cmp	r1, r5
 800e5b6:	d904      	bls.n	800e5c2 <_malloc_r+0x26>
 800e5b8:	230c      	movs	r3, #12
 800e5ba:	6033      	str	r3, [r6, #0]
 800e5bc:	2000      	movs	r0, #0
 800e5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e698 <_malloc_r+0xfc>
 800e5c6:	f000 f87b 	bl	800e6c0 <__malloc_lock>
 800e5ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e5ce:	461c      	mov	r4, r3
 800e5d0:	bb44      	cbnz	r4, 800e624 <_malloc_r+0x88>
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f7ff ffbf 	bl	800e558 <sbrk_aligned>
 800e5da:	1c43      	adds	r3, r0, #1
 800e5dc:	4604      	mov	r4, r0
 800e5de:	d158      	bne.n	800e692 <_malloc_r+0xf6>
 800e5e0:	f8d8 4000 	ldr.w	r4, [r8]
 800e5e4:	4627      	mov	r7, r4
 800e5e6:	2f00      	cmp	r7, #0
 800e5e8:	d143      	bne.n	800e672 <_malloc_r+0xd6>
 800e5ea:	2c00      	cmp	r4, #0
 800e5ec:	d04b      	beq.n	800e686 <_malloc_r+0xea>
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	4639      	mov	r1, r7
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	eb04 0903 	add.w	r9, r4, r3
 800e5f8:	f000 fe92 	bl	800f320 <_sbrk_r>
 800e5fc:	4581      	cmp	r9, r0
 800e5fe:	d142      	bne.n	800e686 <_malloc_r+0xea>
 800e600:	6821      	ldr	r1, [r4, #0]
 800e602:	4630      	mov	r0, r6
 800e604:	1a6d      	subs	r5, r5, r1
 800e606:	4629      	mov	r1, r5
 800e608:	f7ff ffa6 	bl	800e558 <sbrk_aligned>
 800e60c:	3001      	adds	r0, #1
 800e60e:	d03a      	beq.n	800e686 <_malloc_r+0xea>
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	442b      	add	r3, r5
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	f8d8 3000 	ldr.w	r3, [r8]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	bb62      	cbnz	r2, 800e678 <_malloc_r+0xdc>
 800e61e:	f8c8 7000 	str.w	r7, [r8]
 800e622:	e00f      	b.n	800e644 <_malloc_r+0xa8>
 800e624:	6822      	ldr	r2, [r4, #0]
 800e626:	1b52      	subs	r2, r2, r5
 800e628:	d420      	bmi.n	800e66c <_malloc_r+0xd0>
 800e62a:	2a0b      	cmp	r2, #11
 800e62c:	d917      	bls.n	800e65e <_malloc_r+0xc2>
 800e62e:	1961      	adds	r1, r4, r5
 800e630:	42a3      	cmp	r3, r4
 800e632:	6025      	str	r5, [r4, #0]
 800e634:	bf18      	it	ne
 800e636:	6059      	strne	r1, [r3, #4]
 800e638:	6863      	ldr	r3, [r4, #4]
 800e63a:	bf08      	it	eq
 800e63c:	f8c8 1000 	streq.w	r1, [r8]
 800e640:	5162      	str	r2, [r4, r5]
 800e642:	604b      	str	r3, [r1, #4]
 800e644:	4630      	mov	r0, r6
 800e646:	f000 f841 	bl	800e6cc <__malloc_unlock>
 800e64a:	f104 000b 	add.w	r0, r4, #11
 800e64e:	1d23      	adds	r3, r4, #4
 800e650:	f020 0007 	bic.w	r0, r0, #7
 800e654:	1ac2      	subs	r2, r0, r3
 800e656:	bf1c      	itt	ne
 800e658:	1a1b      	subne	r3, r3, r0
 800e65a:	50a3      	strne	r3, [r4, r2]
 800e65c:	e7af      	b.n	800e5be <_malloc_r+0x22>
 800e65e:	6862      	ldr	r2, [r4, #4]
 800e660:	42a3      	cmp	r3, r4
 800e662:	bf0c      	ite	eq
 800e664:	f8c8 2000 	streq.w	r2, [r8]
 800e668:	605a      	strne	r2, [r3, #4]
 800e66a:	e7eb      	b.n	800e644 <_malloc_r+0xa8>
 800e66c:	4623      	mov	r3, r4
 800e66e:	6864      	ldr	r4, [r4, #4]
 800e670:	e7ae      	b.n	800e5d0 <_malloc_r+0x34>
 800e672:	463c      	mov	r4, r7
 800e674:	687f      	ldr	r7, [r7, #4]
 800e676:	e7b6      	b.n	800e5e6 <_malloc_r+0x4a>
 800e678:	461a      	mov	r2, r3
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	42a3      	cmp	r3, r4
 800e67e:	d1fb      	bne.n	800e678 <_malloc_r+0xdc>
 800e680:	2300      	movs	r3, #0
 800e682:	6053      	str	r3, [r2, #4]
 800e684:	e7de      	b.n	800e644 <_malloc_r+0xa8>
 800e686:	230c      	movs	r3, #12
 800e688:	4630      	mov	r0, r6
 800e68a:	6033      	str	r3, [r6, #0]
 800e68c:	f000 f81e 	bl	800e6cc <__malloc_unlock>
 800e690:	e794      	b.n	800e5bc <_malloc_r+0x20>
 800e692:	6005      	str	r5, [r0, #0]
 800e694:	e7d6      	b.n	800e644 <_malloc_r+0xa8>
 800e696:	bf00      	nop
 800e698:	20002490 	.word	0x20002490

0800e69c <__ascii_mbtowc>:
 800e69c:	b082      	sub	sp, #8
 800e69e:	b901      	cbnz	r1, 800e6a2 <__ascii_mbtowc+0x6>
 800e6a0:	a901      	add	r1, sp, #4
 800e6a2:	b142      	cbz	r2, 800e6b6 <__ascii_mbtowc+0x1a>
 800e6a4:	b14b      	cbz	r3, 800e6ba <__ascii_mbtowc+0x1e>
 800e6a6:	7813      	ldrb	r3, [r2, #0]
 800e6a8:	600b      	str	r3, [r1, #0]
 800e6aa:	7812      	ldrb	r2, [r2, #0]
 800e6ac:	1e10      	subs	r0, r2, #0
 800e6ae:	bf18      	it	ne
 800e6b0:	2001      	movne	r0, #1
 800e6b2:	b002      	add	sp, #8
 800e6b4:	4770      	bx	lr
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	e7fb      	b.n	800e6b2 <__ascii_mbtowc+0x16>
 800e6ba:	f06f 0001 	mvn.w	r0, #1
 800e6be:	e7f8      	b.n	800e6b2 <__ascii_mbtowc+0x16>

0800e6c0 <__malloc_lock>:
 800e6c0:	4801      	ldr	r0, [pc, #4]	@ (800e6c8 <__malloc_lock+0x8>)
 800e6c2:	f7ff b87e 	b.w	800d7c2 <__retarget_lock_acquire_recursive>
 800e6c6:	bf00      	nop
 800e6c8:	20002488 	.word	0x20002488

0800e6cc <__malloc_unlock>:
 800e6cc:	4801      	ldr	r0, [pc, #4]	@ (800e6d4 <__malloc_unlock+0x8>)
 800e6ce:	f7ff b879 	b.w	800d7c4 <__retarget_lock_release_recursive>
 800e6d2:	bf00      	nop
 800e6d4:	20002488 	.word	0x20002488

0800e6d8 <_Balloc>:
 800e6d8:	b570      	push	{r4, r5, r6, lr}
 800e6da:	69c6      	ldr	r6, [r0, #28]
 800e6dc:	4604      	mov	r4, r0
 800e6de:	460d      	mov	r5, r1
 800e6e0:	b976      	cbnz	r6, 800e700 <_Balloc+0x28>
 800e6e2:	2010      	movs	r0, #16
 800e6e4:	f7ff ff30 	bl	800e548 <malloc>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	61e0      	str	r0, [r4, #28]
 800e6ec:	b920      	cbnz	r0, 800e6f8 <_Balloc+0x20>
 800e6ee:	216b      	movs	r1, #107	@ 0x6b
 800e6f0:	4b17      	ldr	r3, [pc, #92]	@ (800e750 <_Balloc+0x78>)
 800e6f2:	4818      	ldr	r0, [pc, #96]	@ (800e754 <_Balloc+0x7c>)
 800e6f4:	f000 fe24 	bl	800f340 <__assert_func>
 800e6f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6fc:	6006      	str	r6, [r0, #0]
 800e6fe:	60c6      	str	r6, [r0, #12]
 800e700:	69e6      	ldr	r6, [r4, #28]
 800e702:	68f3      	ldr	r3, [r6, #12]
 800e704:	b183      	cbz	r3, 800e728 <_Balloc+0x50>
 800e706:	69e3      	ldr	r3, [r4, #28]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e70e:	b9b8      	cbnz	r0, 800e740 <_Balloc+0x68>
 800e710:	2101      	movs	r1, #1
 800e712:	fa01 f605 	lsl.w	r6, r1, r5
 800e716:	1d72      	adds	r2, r6, #5
 800e718:	4620      	mov	r0, r4
 800e71a:	0092      	lsls	r2, r2, #2
 800e71c:	f000 fe2e 	bl	800f37c <_calloc_r>
 800e720:	b160      	cbz	r0, 800e73c <_Balloc+0x64>
 800e722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e726:	e00e      	b.n	800e746 <_Balloc+0x6e>
 800e728:	2221      	movs	r2, #33	@ 0x21
 800e72a:	2104      	movs	r1, #4
 800e72c:	4620      	mov	r0, r4
 800e72e:	f000 fe25 	bl	800f37c <_calloc_r>
 800e732:	69e3      	ldr	r3, [r4, #28]
 800e734:	60f0      	str	r0, [r6, #12]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1e4      	bne.n	800e706 <_Balloc+0x2e>
 800e73c:	2000      	movs	r0, #0
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	6802      	ldr	r2, [r0, #0]
 800e742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e746:	2300      	movs	r3, #0
 800e748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e74c:	e7f7      	b.n	800e73e <_Balloc+0x66>
 800e74e:	bf00      	nop
 800e750:	0800faee 	.word	0x0800faee
 800e754:	0800fb6e 	.word	0x0800fb6e

0800e758 <_Bfree>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	69c6      	ldr	r6, [r0, #28]
 800e75c:	4605      	mov	r5, r0
 800e75e:	460c      	mov	r4, r1
 800e760:	b976      	cbnz	r6, 800e780 <_Bfree+0x28>
 800e762:	2010      	movs	r0, #16
 800e764:	f7ff fef0 	bl	800e548 <malloc>
 800e768:	4602      	mov	r2, r0
 800e76a:	61e8      	str	r0, [r5, #28]
 800e76c:	b920      	cbnz	r0, 800e778 <_Bfree+0x20>
 800e76e:	218f      	movs	r1, #143	@ 0x8f
 800e770:	4b08      	ldr	r3, [pc, #32]	@ (800e794 <_Bfree+0x3c>)
 800e772:	4809      	ldr	r0, [pc, #36]	@ (800e798 <_Bfree+0x40>)
 800e774:	f000 fde4 	bl	800f340 <__assert_func>
 800e778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e77c:	6006      	str	r6, [r0, #0]
 800e77e:	60c6      	str	r6, [r0, #12]
 800e780:	b13c      	cbz	r4, 800e792 <_Bfree+0x3a>
 800e782:	69eb      	ldr	r3, [r5, #28]
 800e784:	6862      	ldr	r2, [r4, #4]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e78c:	6021      	str	r1, [r4, #0]
 800e78e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	0800faee 	.word	0x0800faee
 800e798:	0800fb6e 	.word	0x0800fb6e

0800e79c <__multadd>:
 800e79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a0:	4607      	mov	r7, r0
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	461e      	mov	r6, r3
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	690d      	ldr	r5, [r1, #16]
 800e7aa:	f101 0c14 	add.w	ip, r1, #20
 800e7ae:	f8dc 3000 	ldr.w	r3, [ip]
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	b299      	uxth	r1, r3
 800e7b6:	fb02 6101 	mla	r1, r2, r1, r6
 800e7ba:	0c1e      	lsrs	r6, r3, #16
 800e7bc:	0c0b      	lsrs	r3, r1, #16
 800e7be:	fb02 3306 	mla	r3, r2, r6, r3
 800e7c2:	b289      	uxth	r1, r1
 800e7c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e7c8:	4285      	cmp	r5, r0
 800e7ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e7ce:	f84c 1b04 	str.w	r1, [ip], #4
 800e7d2:	dcec      	bgt.n	800e7ae <__multadd+0x12>
 800e7d4:	b30e      	cbz	r6, 800e81a <__multadd+0x7e>
 800e7d6:	68a3      	ldr	r3, [r4, #8]
 800e7d8:	42ab      	cmp	r3, r5
 800e7da:	dc19      	bgt.n	800e810 <__multadd+0x74>
 800e7dc:	6861      	ldr	r1, [r4, #4]
 800e7de:	4638      	mov	r0, r7
 800e7e0:	3101      	adds	r1, #1
 800e7e2:	f7ff ff79 	bl	800e6d8 <_Balloc>
 800e7e6:	4680      	mov	r8, r0
 800e7e8:	b928      	cbnz	r0, 800e7f6 <__multadd+0x5a>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	21ba      	movs	r1, #186	@ 0xba
 800e7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e820 <__multadd+0x84>)
 800e7f0:	480c      	ldr	r0, [pc, #48]	@ (800e824 <__multadd+0x88>)
 800e7f2:	f000 fda5 	bl	800f340 <__assert_func>
 800e7f6:	6922      	ldr	r2, [r4, #16]
 800e7f8:	f104 010c 	add.w	r1, r4, #12
 800e7fc:	3202      	adds	r2, #2
 800e7fe:	0092      	lsls	r2, r2, #2
 800e800:	300c      	adds	r0, #12
 800e802:	f7fe ffee 	bl	800d7e2 <memcpy>
 800e806:	4621      	mov	r1, r4
 800e808:	4638      	mov	r0, r7
 800e80a:	f7ff ffa5 	bl	800e758 <_Bfree>
 800e80e:	4644      	mov	r4, r8
 800e810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e814:	3501      	adds	r5, #1
 800e816:	615e      	str	r6, [r3, #20]
 800e818:	6125      	str	r5, [r4, #16]
 800e81a:	4620      	mov	r0, r4
 800e81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e820:	0800fb5d 	.word	0x0800fb5d
 800e824:	0800fb6e 	.word	0x0800fb6e

0800e828 <__hi0bits>:
 800e828:	4603      	mov	r3, r0
 800e82a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e82e:	bf3a      	itte	cc
 800e830:	0403      	lslcc	r3, r0, #16
 800e832:	2010      	movcc	r0, #16
 800e834:	2000      	movcs	r0, #0
 800e836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e83a:	bf3c      	itt	cc
 800e83c:	021b      	lslcc	r3, r3, #8
 800e83e:	3008      	addcc	r0, #8
 800e840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e844:	bf3c      	itt	cc
 800e846:	011b      	lslcc	r3, r3, #4
 800e848:	3004      	addcc	r0, #4
 800e84a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e84e:	bf3c      	itt	cc
 800e850:	009b      	lslcc	r3, r3, #2
 800e852:	3002      	addcc	r0, #2
 800e854:	2b00      	cmp	r3, #0
 800e856:	db05      	blt.n	800e864 <__hi0bits+0x3c>
 800e858:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e85c:	f100 0001 	add.w	r0, r0, #1
 800e860:	bf08      	it	eq
 800e862:	2020      	moveq	r0, #32
 800e864:	4770      	bx	lr

0800e866 <__lo0bits>:
 800e866:	6803      	ldr	r3, [r0, #0]
 800e868:	4602      	mov	r2, r0
 800e86a:	f013 0007 	ands.w	r0, r3, #7
 800e86e:	d00b      	beq.n	800e888 <__lo0bits+0x22>
 800e870:	07d9      	lsls	r1, r3, #31
 800e872:	d421      	bmi.n	800e8b8 <__lo0bits+0x52>
 800e874:	0798      	lsls	r0, r3, #30
 800e876:	bf49      	itett	mi
 800e878:	085b      	lsrmi	r3, r3, #1
 800e87a:	089b      	lsrpl	r3, r3, #2
 800e87c:	2001      	movmi	r0, #1
 800e87e:	6013      	strmi	r3, [r2, #0]
 800e880:	bf5c      	itt	pl
 800e882:	2002      	movpl	r0, #2
 800e884:	6013      	strpl	r3, [r2, #0]
 800e886:	4770      	bx	lr
 800e888:	b299      	uxth	r1, r3
 800e88a:	b909      	cbnz	r1, 800e890 <__lo0bits+0x2a>
 800e88c:	2010      	movs	r0, #16
 800e88e:	0c1b      	lsrs	r3, r3, #16
 800e890:	b2d9      	uxtb	r1, r3
 800e892:	b909      	cbnz	r1, 800e898 <__lo0bits+0x32>
 800e894:	3008      	adds	r0, #8
 800e896:	0a1b      	lsrs	r3, r3, #8
 800e898:	0719      	lsls	r1, r3, #28
 800e89a:	bf04      	itt	eq
 800e89c:	091b      	lsreq	r3, r3, #4
 800e89e:	3004      	addeq	r0, #4
 800e8a0:	0799      	lsls	r1, r3, #30
 800e8a2:	bf04      	itt	eq
 800e8a4:	089b      	lsreq	r3, r3, #2
 800e8a6:	3002      	addeq	r0, #2
 800e8a8:	07d9      	lsls	r1, r3, #31
 800e8aa:	d403      	bmi.n	800e8b4 <__lo0bits+0x4e>
 800e8ac:	085b      	lsrs	r3, r3, #1
 800e8ae:	f100 0001 	add.w	r0, r0, #1
 800e8b2:	d003      	beq.n	800e8bc <__lo0bits+0x56>
 800e8b4:	6013      	str	r3, [r2, #0]
 800e8b6:	4770      	bx	lr
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	4770      	bx	lr
 800e8bc:	2020      	movs	r0, #32
 800e8be:	4770      	bx	lr

0800e8c0 <__i2b>:
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	460c      	mov	r4, r1
 800e8c4:	2101      	movs	r1, #1
 800e8c6:	f7ff ff07 	bl	800e6d8 <_Balloc>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	b928      	cbnz	r0, 800e8da <__i2b+0x1a>
 800e8ce:	f240 1145 	movw	r1, #325	@ 0x145
 800e8d2:	4b04      	ldr	r3, [pc, #16]	@ (800e8e4 <__i2b+0x24>)
 800e8d4:	4804      	ldr	r0, [pc, #16]	@ (800e8e8 <__i2b+0x28>)
 800e8d6:	f000 fd33 	bl	800f340 <__assert_func>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	6144      	str	r4, [r0, #20]
 800e8de:	6103      	str	r3, [r0, #16]
 800e8e0:	bd10      	pop	{r4, pc}
 800e8e2:	bf00      	nop
 800e8e4:	0800fb5d 	.word	0x0800fb5d
 800e8e8:	0800fb6e 	.word	0x0800fb6e

0800e8ec <__multiply>:
 800e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f0:	4617      	mov	r7, r2
 800e8f2:	690a      	ldr	r2, [r1, #16]
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	4689      	mov	r9, r1
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	bfa2      	ittt	ge
 800e8fc:	463b      	movge	r3, r7
 800e8fe:	460f      	movge	r7, r1
 800e900:	4699      	movge	r9, r3
 800e902:	693d      	ldr	r5, [r7, #16]
 800e904:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	6879      	ldr	r1, [r7, #4]
 800e90c:	eb05 060a 	add.w	r6, r5, sl
 800e910:	42b3      	cmp	r3, r6
 800e912:	b085      	sub	sp, #20
 800e914:	bfb8      	it	lt
 800e916:	3101      	addlt	r1, #1
 800e918:	f7ff fede 	bl	800e6d8 <_Balloc>
 800e91c:	b930      	cbnz	r0, 800e92c <__multiply+0x40>
 800e91e:	4602      	mov	r2, r0
 800e920:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e924:	4b40      	ldr	r3, [pc, #256]	@ (800ea28 <__multiply+0x13c>)
 800e926:	4841      	ldr	r0, [pc, #260]	@ (800ea2c <__multiply+0x140>)
 800e928:	f000 fd0a 	bl	800f340 <__assert_func>
 800e92c:	f100 0414 	add.w	r4, r0, #20
 800e930:	4623      	mov	r3, r4
 800e932:	2200      	movs	r2, #0
 800e934:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e938:	4573      	cmp	r3, lr
 800e93a:	d320      	bcc.n	800e97e <__multiply+0x92>
 800e93c:	f107 0814 	add.w	r8, r7, #20
 800e940:	f109 0114 	add.w	r1, r9, #20
 800e944:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e948:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e94c:	9302      	str	r3, [sp, #8]
 800e94e:	1beb      	subs	r3, r5, r7
 800e950:	3b15      	subs	r3, #21
 800e952:	f023 0303 	bic.w	r3, r3, #3
 800e956:	3304      	adds	r3, #4
 800e958:	3715      	adds	r7, #21
 800e95a:	42bd      	cmp	r5, r7
 800e95c:	bf38      	it	cc
 800e95e:	2304      	movcc	r3, #4
 800e960:	9301      	str	r3, [sp, #4]
 800e962:	9b02      	ldr	r3, [sp, #8]
 800e964:	9103      	str	r1, [sp, #12]
 800e966:	428b      	cmp	r3, r1
 800e968:	d80c      	bhi.n	800e984 <__multiply+0x98>
 800e96a:	2e00      	cmp	r6, #0
 800e96c:	dd03      	ble.n	800e976 <__multiply+0x8a>
 800e96e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e972:	2b00      	cmp	r3, #0
 800e974:	d055      	beq.n	800ea22 <__multiply+0x136>
 800e976:	6106      	str	r6, [r0, #16]
 800e978:	b005      	add	sp, #20
 800e97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97e:	f843 2b04 	str.w	r2, [r3], #4
 800e982:	e7d9      	b.n	800e938 <__multiply+0x4c>
 800e984:	f8b1 a000 	ldrh.w	sl, [r1]
 800e988:	f1ba 0f00 	cmp.w	sl, #0
 800e98c:	d01f      	beq.n	800e9ce <__multiply+0xe2>
 800e98e:	46c4      	mov	ip, r8
 800e990:	46a1      	mov	r9, r4
 800e992:	2700      	movs	r7, #0
 800e994:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e998:	f8d9 3000 	ldr.w	r3, [r9]
 800e99c:	fa1f fb82 	uxth.w	fp, r2
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	fb0a 330b 	mla	r3, sl, fp, r3
 800e9a6:	443b      	add	r3, r7
 800e9a8:	f8d9 7000 	ldr.w	r7, [r9]
 800e9ac:	0c12      	lsrs	r2, r2, #16
 800e9ae:	0c3f      	lsrs	r7, r7, #16
 800e9b0:	fb0a 7202 	mla	r2, sl, r2, r7
 800e9b4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9be:	4565      	cmp	r5, ip
 800e9c0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e9c4:	f849 3b04 	str.w	r3, [r9], #4
 800e9c8:	d8e4      	bhi.n	800e994 <__multiply+0xa8>
 800e9ca:	9b01      	ldr	r3, [sp, #4]
 800e9cc:	50e7      	str	r7, [r4, r3]
 800e9ce:	9b03      	ldr	r3, [sp, #12]
 800e9d0:	3104      	adds	r1, #4
 800e9d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e9d6:	f1b9 0f00 	cmp.w	r9, #0
 800e9da:	d020      	beq.n	800ea1e <__multiply+0x132>
 800e9dc:	4647      	mov	r7, r8
 800e9de:	46a4      	mov	ip, r4
 800e9e0:	f04f 0a00 	mov.w	sl, #0
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	f8b7 b000 	ldrh.w	fp, [r7]
 800e9ea:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	fb09 220b 	mla	r2, r9, fp, r2
 800e9f4:	4452      	add	r2, sl
 800e9f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9fa:	f84c 3b04 	str.w	r3, [ip], #4
 800e9fe:	f857 3b04 	ldr.w	r3, [r7], #4
 800ea02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea06:	f8bc 3000 	ldrh.w	r3, [ip]
 800ea0a:	42bd      	cmp	r5, r7
 800ea0c:	fb09 330a 	mla	r3, r9, sl, r3
 800ea10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ea14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea18:	d8e5      	bhi.n	800e9e6 <__multiply+0xfa>
 800ea1a:	9a01      	ldr	r2, [sp, #4]
 800ea1c:	50a3      	str	r3, [r4, r2]
 800ea1e:	3404      	adds	r4, #4
 800ea20:	e79f      	b.n	800e962 <__multiply+0x76>
 800ea22:	3e01      	subs	r6, #1
 800ea24:	e7a1      	b.n	800e96a <__multiply+0x7e>
 800ea26:	bf00      	nop
 800ea28:	0800fb5d 	.word	0x0800fb5d
 800ea2c:	0800fb6e 	.word	0x0800fb6e

0800ea30 <__pow5mult>:
 800ea30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea34:	4615      	mov	r5, r2
 800ea36:	f012 0203 	ands.w	r2, r2, #3
 800ea3a:	4607      	mov	r7, r0
 800ea3c:	460e      	mov	r6, r1
 800ea3e:	d007      	beq.n	800ea50 <__pow5mult+0x20>
 800ea40:	4c25      	ldr	r4, [pc, #148]	@ (800ead8 <__pow5mult+0xa8>)
 800ea42:	3a01      	subs	r2, #1
 800ea44:	2300      	movs	r3, #0
 800ea46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea4a:	f7ff fea7 	bl	800e79c <__multadd>
 800ea4e:	4606      	mov	r6, r0
 800ea50:	10ad      	asrs	r5, r5, #2
 800ea52:	d03d      	beq.n	800ead0 <__pow5mult+0xa0>
 800ea54:	69fc      	ldr	r4, [r7, #28]
 800ea56:	b97c      	cbnz	r4, 800ea78 <__pow5mult+0x48>
 800ea58:	2010      	movs	r0, #16
 800ea5a:	f7ff fd75 	bl	800e548 <malloc>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	61f8      	str	r0, [r7, #28]
 800ea62:	b928      	cbnz	r0, 800ea70 <__pow5mult+0x40>
 800ea64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ea68:	4b1c      	ldr	r3, [pc, #112]	@ (800eadc <__pow5mult+0xac>)
 800ea6a:	481d      	ldr	r0, [pc, #116]	@ (800eae0 <__pow5mult+0xb0>)
 800ea6c:	f000 fc68 	bl	800f340 <__assert_func>
 800ea70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea74:	6004      	str	r4, [r0, #0]
 800ea76:	60c4      	str	r4, [r0, #12]
 800ea78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ea7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea80:	b94c      	cbnz	r4, 800ea96 <__pow5mult+0x66>
 800ea82:	f240 2171 	movw	r1, #625	@ 0x271
 800ea86:	4638      	mov	r0, r7
 800ea88:	f7ff ff1a 	bl	800e8c0 <__i2b>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea94:	6003      	str	r3, [r0, #0]
 800ea96:	f04f 0900 	mov.w	r9, #0
 800ea9a:	07eb      	lsls	r3, r5, #31
 800ea9c:	d50a      	bpl.n	800eab4 <__pow5mult+0x84>
 800ea9e:	4631      	mov	r1, r6
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	4638      	mov	r0, r7
 800eaa4:	f7ff ff22 	bl	800e8ec <__multiply>
 800eaa8:	4680      	mov	r8, r0
 800eaaa:	4631      	mov	r1, r6
 800eaac:	4638      	mov	r0, r7
 800eaae:	f7ff fe53 	bl	800e758 <_Bfree>
 800eab2:	4646      	mov	r6, r8
 800eab4:	106d      	asrs	r5, r5, #1
 800eab6:	d00b      	beq.n	800ead0 <__pow5mult+0xa0>
 800eab8:	6820      	ldr	r0, [r4, #0]
 800eaba:	b938      	cbnz	r0, 800eacc <__pow5mult+0x9c>
 800eabc:	4622      	mov	r2, r4
 800eabe:	4621      	mov	r1, r4
 800eac0:	4638      	mov	r0, r7
 800eac2:	f7ff ff13 	bl	800e8ec <__multiply>
 800eac6:	6020      	str	r0, [r4, #0]
 800eac8:	f8c0 9000 	str.w	r9, [r0]
 800eacc:	4604      	mov	r4, r0
 800eace:	e7e4      	b.n	800ea9a <__pow5mult+0x6a>
 800ead0:	4630      	mov	r0, r6
 800ead2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ead6:	bf00      	nop
 800ead8:	0800fc14 	.word	0x0800fc14
 800eadc:	0800faee 	.word	0x0800faee
 800eae0:	0800fb6e 	.word	0x0800fb6e

0800eae4 <__lshift>:
 800eae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae8:	460c      	mov	r4, r1
 800eaea:	4607      	mov	r7, r0
 800eaec:	4691      	mov	r9, r2
 800eaee:	6923      	ldr	r3, [r4, #16]
 800eaf0:	6849      	ldr	r1, [r1, #4]
 800eaf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eaf6:	68a3      	ldr	r3, [r4, #8]
 800eaf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eafc:	f108 0601 	add.w	r6, r8, #1
 800eb00:	42b3      	cmp	r3, r6
 800eb02:	db0b      	blt.n	800eb1c <__lshift+0x38>
 800eb04:	4638      	mov	r0, r7
 800eb06:	f7ff fde7 	bl	800e6d8 <_Balloc>
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	b948      	cbnz	r0, 800eb22 <__lshift+0x3e>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eb14:	4b27      	ldr	r3, [pc, #156]	@ (800ebb4 <__lshift+0xd0>)
 800eb16:	4828      	ldr	r0, [pc, #160]	@ (800ebb8 <__lshift+0xd4>)
 800eb18:	f000 fc12 	bl	800f340 <__assert_func>
 800eb1c:	3101      	adds	r1, #1
 800eb1e:	005b      	lsls	r3, r3, #1
 800eb20:	e7ee      	b.n	800eb00 <__lshift+0x1c>
 800eb22:	2300      	movs	r3, #0
 800eb24:	f100 0114 	add.w	r1, r0, #20
 800eb28:	f100 0210 	add.w	r2, r0, #16
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	4553      	cmp	r3, sl
 800eb30:	db33      	blt.n	800eb9a <__lshift+0xb6>
 800eb32:	6920      	ldr	r0, [r4, #16]
 800eb34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb38:	f104 0314 	add.w	r3, r4, #20
 800eb3c:	f019 091f 	ands.w	r9, r9, #31
 800eb40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb48:	d02b      	beq.n	800eba2 <__lshift+0xbe>
 800eb4a:	468a      	mov	sl, r1
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f1c9 0e20 	rsb	lr, r9, #32
 800eb52:	6818      	ldr	r0, [r3, #0]
 800eb54:	fa00 f009 	lsl.w	r0, r0, r9
 800eb58:	4310      	orrs	r0, r2
 800eb5a:	f84a 0b04 	str.w	r0, [sl], #4
 800eb5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb62:	459c      	cmp	ip, r3
 800eb64:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb68:	d8f3      	bhi.n	800eb52 <__lshift+0x6e>
 800eb6a:	ebac 0304 	sub.w	r3, ip, r4
 800eb6e:	3b15      	subs	r3, #21
 800eb70:	f023 0303 	bic.w	r3, r3, #3
 800eb74:	3304      	adds	r3, #4
 800eb76:	f104 0015 	add.w	r0, r4, #21
 800eb7a:	4560      	cmp	r0, ip
 800eb7c:	bf88      	it	hi
 800eb7e:	2304      	movhi	r3, #4
 800eb80:	50ca      	str	r2, [r1, r3]
 800eb82:	b10a      	cbz	r2, 800eb88 <__lshift+0xa4>
 800eb84:	f108 0602 	add.w	r6, r8, #2
 800eb88:	3e01      	subs	r6, #1
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	4621      	mov	r1, r4
 800eb8e:	612e      	str	r6, [r5, #16]
 800eb90:	f7ff fde2 	bl	800e758 <_Bfree>
 800eb94:	4628      	mov	r0, r5
 800eb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb9e:	3301      	adds	r3, #1
 800eba0:	e7c5      	b.n	800eb2e <__lshift+0x4a>
 800eba2:	3904      	subs	r1, #4
 800eba4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba8:	459c      	cmp	ip, r3
 800ebaa:	f841 2f04 	str.w	r2, [r1, #4]!
 800ebae:	d8f9      	bhi.n	800eba4 <__lshift+0xc0>
 800ebb0:	e7ea      	b.n	800eb88 <__lshift+0xa4>
 800ebb2:	bf00      	nop
 800ebb4:	0800fb5d 	.word	0x0800fb5d
 800ebb8:	0800fb6e 	.word	0x0800fb6e

0800ebbc <__mcmp>:
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	690a      	ldr	r2, [r1, #16]
 800ebc0:	6900      	ldr	r0, [r0, #16]
 800ebc2:	b530      	push	{r4, r5, lr}
 800ebc4:	1a80      	subs	r0, r0, r2
 800ebc6:	d10e      	bne.n	800ebe6 <__mcmp+0x2a>
 800ebc8:	3314      	adds	r3, #20
 800ebca:	3114      	adds	r1, #20
 800ebcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ebd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ebd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ebd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ebdc:	4295      	cmp	r5, r2
 800ebde:	d003      	beq.n	800ebe8 <__mcmp+0x2c>
 800ebe0:	d205      	bcs.n	800ebee <__mcmp+0x32>
 800ebe2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe6:	bd30      	pop	{r4, r5, pc}
 800ebe8:	42a3      	cmp	r3, r4
 800ebea:	d3f3      	bcc.n	800ebd4 <__mcmp+0x18>
 800ebec:	e7fb      	b.n	800ebe6 <__mcmp+0x2a>
 800ebee:	2001      	movs	r0, #1
 800ebf0:	e7f9      	b.n	800ebe6 <__mcmp+0x2a>
	...

0800ebf4 <__mdiff>:
 800ebf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf8:	4689      	mov	r9, r1
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	4648      	mov	r0, r9
 800ec00:	4614      	mov	r4, r2
 800ec02:	f7ff ffdb 	bl	800ebbc <__mcmp>
 800ec06:	1e05      	subs	r5, r0, #0
 800ec08:	d112      	bne.n	800ec30 <__mdiff+0x3c>
 800ec0a:	4629      	mov	r1, r5
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	f7ff fd63 	bl	800e6d8 <_Balloc>
 800ec12:	4602      	mov	r2, r0
 800ec14:	b928      	cbnz	r0, 800ec22 <__mdiff+0x2e>
 800ec16:	f240 2137 	movw	r1, #567	@ 0x237
 800ec1a:	4b3e      	ldr	r3, [pc, #248]	@ (800ed14 <__mdiff+0x120>)
 800ec1c:	483e      	ldr	r0, [pc, #248]	@ (800ed18 <__mdiff+0x124>)
 800ec1e:	f000 fb8f 	bl	800f340 <__assert_func>
 800ec22:	2301      	movs	r3, #1
 800ec24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec28:	4610      	mov	r0, r2
 800ec2a:	b003      	add	sp, #12
 800ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec30:	bfbc      	itt	lt
 800ec32:	464b      	movlt	r3, r9
 800ec34:	46a1      	movlt	r9, r4
 800ec36:	4630      	mov	r0, r6
 800ec38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ec3c:	bfba      	itte	lt
 800ec3e:	461c      	movlt	r4, r3
 800ec40:	2501      	movlt	r5, #1
 800ec42:	2500      	movge	r5, #0
 800ec44:	f7ff fd48 	bl	800e6d8 <_Balloc>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	b918      	cbnz	r0, 800ec54 <__mdiff+0x60>
 800ec4c:	f240 2145 	movw	r1, #581	@ 0x245
 800ec50:	4b30      	ldr	r3, [pc, #192]	@ (800ed14 <__mdiff+0x120>)
 800ec52:	e7e3      	b.n	800ec1c <__mdiff+0x28>
 800ec54:	f100 0b14 	add.w	fp, r0, #20
 800ec58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ec5c:	f109 0310 	add.w	r3, r9, #16
 800ec60:	60c5      	str	r5, [r0, #12]
 800ec62:	f04f 0c00 	mov.w	ip, #0
 800ec66:	f109 0514 	add.w	r5, r9, #20
 800ec6a:	46d9      	mov	r9, fp
 800ec6c:	6926      	ldr	r6, [r4, #16]
 800ec6e:	f104 0e14 	add.w	lr, r4, #20
 800ec72:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ec76:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	9b01      	ldr	r3, [sp, #4]
 800ec7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ec82:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ec86:	b281      	uxth	r1, r0
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	fa1f f38a 	uxth.w	r3, sl
 800ec8e:	1a5b      	subs	r3, r3, r1
 800ec90:	0c00      	lsrs	r0, r0, #16
 800ec92:	4463      	add	r3, ip
 800ec94:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ec98:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eca2:	4576      	cmp	r6, lr
 800eca4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eca8:	f849 3b04 	str.w	r3, [r9], #4
 800ecac:	d8e6      	bhi.n	800ec7c <__mdiff+0x88>
 800ecae:	1b33      	subs	r3, r6, r4
 800ecb0:	3b15      	subs	r3, #21
 800ecb2:	f023 0303 	bic.w	r3, r3, #3
 800ecb6:	3415      	adds	r4, #21
 800ecb8:	3304      	adds	r3, #4
 800ecba:	42a6      	cmp	r6, r4
 800ecbc:	bf38      	it	cc
 800ecbe:	2304      	movcc	r3, #4
 800ecc0:	441d      	add	r5, r3
 800ecc2:	445b      	add	r3, fp
 800ecc4:	461e      	mov	r6, r3
 800ecc6:	462c      	mov	r4, r5
 800ecc8:	4544      	cmp	r4, r8
 800ecca:	d30e      	bcc.n	800ecea <__mdiff+0xf6>
 800eccc:	f108 0103 	add.w	r1, r8, #3
 800ecd0:	1b49      	subs	r1, r1, r5
 800ecd2:	f021 0103 	bic.w	r1, r1, #3
 800ecd6:	3d03      	subs	r5, #3
 800ecd8:	45a8      	cmp	r8, r5
 800ecda:	bf38      	it	cc
 800ecdc:	2100      	movcc	r1, #0
 800ecde:	440b      	add	r3, r1
 800ece0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ece4:	b199      	cbz	r1, 800ed0e <__mdiff+0x11a>
 800ece6:	6117      	str	r7, [r2, #16]
 800ece8:	e79e      	b.n	800ec28 <__mdiff+0x34>
 800ecea:	46e6      	mov	lr, ip
 800ecec:	f854 1b04 	ldr.w	r1, [r4], #4
 800ecf0:	fa1f fc81 	uxth.w	ip, r1
 800ecf4:	44f4      	add	ip, lr
 800ecf6:	0c08      	lsrs	r0, r1, #16
 800ecf8:	4471      	add	r1, lr
 800ecfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ecfe:	b289      	uxth	r1, r1
 800ed00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ed04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed08:	f846 1b04 	str.w	r1, [r6], #4
 800ed0c:	e7dc      	b.n	800ecc8 <__mdiff+0xd4>
 800ed0e:	3f01      	subs	r7, #1
 800ed10:	e7e6      	b.n	800ece0 <__mdiff+0xec>
 800ed12:	bf00      	nop
 800ed14:	0800fb5d 	.word	0x0800fb5d
 800ed18:	0800fb6e 	.word	0x0800fb6e

0800ed1c <__d2b>:
 800ed1c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ed20:	2101      	movs	r1, #1
 800ed22:	4690      	mov	r8, r2
 800ed24:	4699      	mov	r9, r3
 800ed26:	9e08      	ldr	r6, [sp, #32]
 800ed28:	f7ff fcd6 	bl	800e6d8 <_Balloc>
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	b930      	cbnz	r0, 800ed3e <__d2b+0x22>
 800ed30:	4602      	mov	r2, r0
 800ed32:	f240 310f 	movw	r1, #783	@ 0x30f
 800ed36:	4b23      	ldr	r3, [pc, #140]	@ (800edc4 <__d2b+0xa8>)
 800ed38:	4823      	ldr	r0, [pc, #140]	@ (800edc8 <__d2b+0xac>)
 800ed3a:	f000 fb01 	bl	800f340 <__assert_func>
 800ed3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed46:	b10d      	cbz	r5, 800ed4c <__d2b+0x30>
 800ed48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed4c:	9301      	str	r3, [sp, #4]
 800ed4e:	f1b8 0300 	subs.w	r3, r8, #0
 800ed52:	d024      	beq.n	800ed9e <__d2b+0x82>
 800ed54:	4668      	mov	r0, sp
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	f7ff fd85 	bl	800e866 <__lo0bits>
 800ed5c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed60:	b1d8      	cbz	r0, 800ed9a <__d2b+0x7e>
 800ed62:	f1c0 0320 	rsb	r3, r0, #32
 800ed66:	fa02 f303 	lsl.w	r3, r2, r3
 800ed6a:	430b      	orrs	r3, r1
 800ed6c:	40c2      	lsrs	r2, r0
 800ed6e:	6163      	str	r3, [r4, #20]
 800ed70:	9201      	str	r2, [sp, #4]
 800ed72:	9b01      	ldr	r3, [sp, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	bf0c      	ite	eq
 800ed78:	2201      	moveq	r2, #1
 800ed7a:	2202      	movne	r2, #2
 800ed7c:	61a3      	str	r3, [r4, #24]
 800ed7e:	6122      	str	r2, [r4, #16]
 800ed80:	b1ad      	cbz	r5, 800edae <__d2b+0x92>
 800ed82:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed86:	4405      	add	r5, r0
 800ed88:	6035      	str	r5, [r6, #0]
 800ed8a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed90:	6018      	str	r0, [r3, #0]
 800ed92:	4620      	mov	r0, r4
 800ed94:	b002      	add	sp, #8
 800ed96:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ed9a:	6161      	str	r1, [r4, #20]
 800ed9c:	e7e9      	b.n	800ed72 <__d2b+0x56>
 800ed9e:	a801      	add	r0, sp, #4
 800eda0:	f7ff fd61 	bl	800e866 <__lo0bits>
 800eda4:	9b01      	ldr	r3, [sp, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	6163      	str	r3, [r4, #20]
 800edaa:	3020      	adds	r0, #32
 800edac:	e7e7      	b.n	800ed7e <__d2b+0x62>
 800edae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800edb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800edb6:	6030      	str	r0, [r6, #0]
 800edb8:	6918      	ldr	r0, [r3, #16]
 800edba:	f7ff fd35 	bl	800e828 <__hi0bits>
 800edbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800edc2:	e7e4      	b.n	800ed8e <__d2b+0x72>
 800edc4:	0800fb5d 	.word	0x0800fb5d
 800edc8:	0800fb6e 	.word	0x0800fb6e

0800edcc <__ascii_wctomb>:
 800edcc:	4603      	mov	r3, r0
 800edce:	4608      	mov	r0, r1
 800edd0:	b141      	cbz	r1, 800ede4 <__ascii_wctomb+0x18>
 800edd2:	2aff      	cmp	r2, #255	@ 0xff
 800edd4:	d904      	bls.n	800ede0 <__ascii_wctomb+0x14>
 800edd6:	228a      	movs	r2, #138	@ 0x8a
 800edd8:	f04f 30ff 	mov.w	r0, #4294967295
 800eddc:	601a      	str	r2, [r3, #0]
 800edde:	4770      	bx	lr
 800ede0:	2001      	movs	r0, #1
 800ede2:	700a      	strb	r2, [r1, #0]
 800ede4:	4770      	bx	lr

0800ede6 <__ssputs_r>:
 800ede6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edea:	461f      	mov	r7, r3
 800edec:	688e      	ldr	r6, [r1, #8]
 800edee:	4682      	mov	sl, r0
 800edf0:	42be      	cmp	r6, r7
 800edf2:	460c      	mov	r4, r1
 800edf4:	4690      	mov	r8, r2
 800edf6:	680b      	ldr	r3, [r1, #0]
 800edf8:	d82d      	bhi.n	800ee56 <__ssputs_r+0x70>
 800edfa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edfe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ee02:	d026      	beq.n	800ee52 <__ssputs_r+0x6c>
 800ee04:	6965      	ldr	r5, [r4, #20]
 800ee06:	6909      	ldr	r1, [r1, #16]
 800ee08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee0c:	eba3 0901 	sub.w	r9, r3, r1
 800ee10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee14:	1c7b      	adds	r3, r7, #1
 800ee16:	444b      	add	r3, r9
 800ee18:	106d      	asrs	r5, r5, #1
 800ee1a:	429d      	cmp	r5, r3
 800ee1c:	bf38      	it	cc
 800ee1e:	461d      	movcc	r5, r3
 800ee20:	0553      	lsls	r3, r2, #21
 800ee22:	d527      	bpl.n	800ee74 <__ssputs_r+0x8e>
 800ee24:	4629      	mov	r1, r5
 800ee26:	f7ff fbb9 	bl	800e59c <_malloc_r>
 800ee2a:	4606      	mov	r6, r0
 800ee2c:	b360      	cbz	r0, 800ee88 <__ssputs_r+0xa2>
 800ee2e:	464a      	mov	r2, r9
 800ee30:	6921      	ldr	r1, [r4, #16]
 800ee32:	f7fe fcd6 	bl	800d7e2 <memcpy>
 800ee36:	89a3      	ldrh	r3, [r4, #12]
 800ee38:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ee3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee40:	81a3      	strh	r3, [r4, #12]
 800ee42:	6126      	str	r6, [r4, #16]
 800ee44:	444e      	add	r6, r9
 800ee46:	6026      	str	r6, [r4, #0]
 800ee48:	463e      	mov	r6, r7
 800ee4a:	6165      	str	r5, [r4, #20]
 800ee4c:	eba5 0509 	sub.w	r5, r5, r9
 800ee50:	60a5      	str	r5, [r4, #8]
 800ee52:	42be      	cmp	r6, r7
 800ee54:	d900      	bls.n	800ee58 <__ssputs_r+0x72>
 800ee56:	463e      	mov	r6, r7
 800ee58:	4632      	mov	r2, r6
 800ee5a:	4641      	mov	r1, r8
 800ee5c:	6820      	ldr	r0, [r4, #0]
 800ee5e:	f000 fa22 	bl	800f2a6 <memmove>
 800ee62:	2000      	movs	r0, #0
 800ee64:	68a3      	ldr	r3, [r4, #8]
 800ee66:	1b9b      	subs	r3, r3, r6
 800ee68:	60a3      	str	r3, [r4, #8]
 800ee6a:	6823      	ldr	r3, [r4, #0]
 800ee6c:	4433      	add	r3, r6
 800ee6e:	6023      	str	r3, [r4, #0]
 800ee70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee74:	462a      	mov	r2, r5
 800ee76:	f000 fa95 	bl	800f3a4 <_realloc_r>
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d1e0      	bne.n	800ee42 <__ssputs_r+0x5c>
 800ee80:	4650      	mov	r0, sl
 800ee82:	6921      	ldr	r1, [r4, #16]
 800ee84:	f7ff fb18 	bl	800e4b8 <_free_r>
 800ee88:	230c      	movs	r3, #12
 800ee8a:	f8ca 3000 	str.w	r3, [sl]
 800ee8e:	89a3      	ldrh	r3, [r4, #12]
 800ee90:	f04f 30ff 	mov.w	r0, #4294967295
 800ee94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee98:	81a3      	strh	r3, [r4, #12]
 800ee9a:	e7e9      	b.n	800ee70 <__ssputs_r+0x8a>

0800ee9c <_svfiprintf_r>:
 800ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	4698      	mov	r8, r3
 800eea2:	898b      	ldrh	r3, [r1, #12]
 800eea4:	4607      	mov	r7, r0
 800eea6:	061b      	lsls	r3, r3, #24
 800eea8:	460d      	mov	r5, r1
 800eeaa:	4614      	mov	r4, r2
 800eeac:	b09d      	sub	sp, #116	@ 0x74
 800eeae:	d510      	bpl.n	800eed2 <_svfiprintf_r+0x36>
 800eeb0:	690b      	ldr	r3, [r1, #16]
 800eeb2:	b973      	cbnz	r3, 800eed2 <_svfiprintf_r+0x36>
 800eeb4:	2140      	movs	r1, #64	@ 0x40
 800eeb6:	f7ff fb71 	bl	800e59c <_malloc_r>
 800eeba:	6028      	str	r0, [r5, #0]
 800eebc:	6128      	str	r0, [r5, #16]
 800eebe:	b930      	cbnz	r0, 800eece <_svfiprintf_r+0x32>
 800eec0:	230c      	movs	r3, #12
 800eec2:	603b      	str	r3, [r7, #0]
 800eec4:	f04f 30ff 	mov.w	r0, #4294967295
 800eec8:	b01d      	add	sp, #116	@ 0x74
 800eeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eece:	2340      	movs	r3, #64	@ 0x40
 800eed0:	616b      	str	r3, [r5, #20]
 800eed2:	2300      	movs	r3, #0
 800eed4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eed6:	2320      	movs	r3, #32
 800eed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eedc:	2330      	movs	r3, #48	@ 0x30
 800eede:	f04f 0901 	mov.w	r9, #1
 800eee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eee6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800f080 <_svfiprintf_r+0x1e4>
 800eeea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eeee:	4623      	mov	r3, r4
 800eef0:	469a      	mov	sl, r3
 800eef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eef6:	b10a      	cbz	r2, 800eefc <_svfiprintf_r+0x60>
 800eef8:	2a25      	cmp	r2, #37	@ 0x25
 800eefa:	d1f9      	bne.n	800eef0 <_svfiprintf_r+0x54>
 800eefc:	ebba 0b04 	subs.w	fp, sl, r4
 800ef00:	d00b      	beq.n	800ef1a <_svfiprintf_r+0x7e>
 800ef02:	465b      	mov	r3, fp
 800ef04:	4622      	mov	r2, r4
 800ef06:	4629      	mov	r1, r5
 800ef08:	4638      	mov	r0, r7
 800ef0a:	f7ff ff6c 	bl	800ede6 <__ssputs_r>
 800ef0e:	3001      	adds	r0, #1
 800ef10:	f000 80a7 	beq.w	800f062 <_svfiprintf_r+0x1c6>
 800ef14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef16:	445a      	add	r2, fp
 800ef18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f000 809f 	beq.w	800f062 <_svfiprintf_r+0x1c6>
 800ef24:	2300      	movs	r3, #0
 800ef26:	f04f 32ff 	mov.w	r2, #4294967295
 800ef2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef2e:	f10a 0a01 	add.w	sl, sl, #1
 800ef32:	9304      	str	r3, [sp, #16]
 800ef34:	9307      	str	r3, [sp, #28]
 800ef36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef3c:	4654      	mov	r4, sl
 800ef3e:	2205      	movs	r2, #5
 800ef40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef44:	484e      	ldr	r0, [pc, #312]	@ (800f080 <_svfiprintf_r+0x1e4>)
 800ef46:	f7fe fc3e 	bl	800d7c6 <memchr>
 800ef4a:	9a04      	ldr	r2, [sp, #16]
 800ef4c:	b9d8      	cbnz	r0, 800ef86 <_svfiprintf_r+0xea>
 800ef4e:	06d0      	lsls	r0, r2, #27
 800ef50:	bf44      	itt	mi
 800ef52:	2320      	movmi	r3, #32
 800ef54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef58:	0711      	lsls	r1, r2, #28
 800ef5a:	bf44      	itt	mi
 800ef5c:	232b      	movmi	r3, #43	@ 0x2b
 800ef5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef62:	f89a 3000 	ldrb.w	r3, [sl]
 800ef66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef68:	d015      	beq.n	800ef96 <_svfiprintf_r+0xfa>
 800ef6a:	4654      	mov	r4, sl
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	f04f 0c0a 	mov.w	ip, #10
 800ef72:	9a07      	ldr	r2, [sp, #28]
 800ef74:	4621      	mov	r1, r4
 800ef76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef7a:	3b30      	subs	r3, #48	@ 0x30
 800ef7c:	2b09      	cmp	r3, #9
 800ef7e:	d94b      	bls.n	800f018 <_svfiprintf_r+0x17c>
 800ef80:	b1b0      	cbz	r0, 800efb0 <_svfiprintf_r+0x114>
 800ef82:	9207      	str	r2, [sp, #28]
 800ef84:	e014      	b.n	800efb0 <_svfiprintf_r+0x114>
 800ef86:	eba0 0308 	sub.w	r3, r0, r8
 800ef8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	46a2      	mov	sl, r4
 800ef92:	9304      	str	r3, [sp, #16]
 800ef94:	e7d2      	b.n	800ef3c <_svfiprintf_r+0xa0>
 800ef96:	9b03      	ldr	r3, [sp, #12]
 800ef98:	1d19      	adds	r1, r3, #4
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	9103      	str	r1, [sp, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	bfbb      	ittet	lt
 800efa2:	425b      	neglt	r3, r3
 800efa4:	f042 0202 	orrlt.w	r2, r2, #2
 800efa8:	9307      	strge	r3, [sp, #28]
 800efaa:	9307      	strlt	r3, [sp, #28]
 800efac:	bfb8      	it	lt
 800efae:	9204      	strlt	r2, [sp, #16]
 800efb0:	7823      	ldrb	r3, [r4, #0]
 800efb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800efb4:	d10a      	bne.n	800efcc <_svfiprintf_r+0x130>
 800efb6:	7863      	ldrb	r3, [r4, #1]
 800efb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800efba:	d132      	bne.n	800f022 <_svfiprintf_r+0x186>
 800efbc:	9b03      	ldr	r3, [sp, #12]
 800efbe:	3402      	adds	r4, #2
 800efc0:	1d1a      	adds	r2, r3, #4
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	9203      	str	r2, [sp, #12]
 800efc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800efca:	9305      	str	r3, [sp, #20]
 800efcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800f084 <_svfiprintf_r+0x1e8>
 800efd0:	2203      	movs	r2, #3
 800efd2:	4650      	mov	r0, sl
 800efd4:	7821      	ldrb	r1, [r4, #0]
 800efd6:	f7fe fbf6 	bl	800d7c6 <memchr>
 800efda:	b138      	cbz	r0, 800efec <_svfiprintf_r+0x150>
 800efdc:	2240      	movs	r2, #64	@ 0x40
 800efde:	9b04      	ldr	r3, [sp, #16]
 800efe0:	eba0 000a 	sub.w	r0, r0, sl
 800efe4:	4082      	lsls	r2, r0
 800efe6:	4313      	orrs	r3, r2
 800efe8:	3401      	adds	r4, #1
 800efea:	9304      	str	r3, [sp, #16]
 800efec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eff0:	2206      	movs	r2, #6
 800eff2:	4825      	ldr	r0, [pc, #148]	@ (800f088 <_svfiprintf_r+0x1ec>)
 800eff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eff8:	f7fe fbe5 	bl	800d7c6 <memchr>
 800effc:	2800      	cmp	r0, #0
 800effe:	d036      	beq.n	800f06e <_svfiprintf_r+0x1d2>
 800f000:	4b22      	ldr	r3, [pc, #136]	@ (800f08c <_svfiprintf_r+0x1f0>)
 800f002:	bb1b      	cbnz	r3, 800f04c <_svfiprintf_r+0x1b0>
 800f004:	9b03      	ldr	r3, [sp, #12]
 800f006:	3307      	adds	r3, #7
 800f008:	f023 0307 	bic.w	r3, r3, #7
 800f00c:	3308      	adds	r3, #8
 800f00e:	9303      	str	r3, [sp, #12]
 800f010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f012:	4433      	add	r3, r6
 800f014:	9309      	str	r3, [sp, #36]	@ 0x24
 800f016:	e76a      	b.n	800eeee <_svfiprintf_r+0x52>
 800f018:	460c      	mov	r4, r1
 800f01a:	2001      	movs	r0, #1
 800f01c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f020:	e7a8      	b.n	800ef74 <_svfiprintf_r+0xd8>
 800f022:	2300      	movs	r3, #0
 800f024:	f04f 0c0a 	mov.w	ip, #10
 800f028:	4619      	mov	r1, r3
 800f02a:	3401      	adds	r4, #1
 800f02c:	9305      	str	r3, [sp, #20]
 800f02e:	4620      	mov	r0, r4
 800f030:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f034:	3a30      	subs	r2, #48	@ 0x30
 800f036:	2a09      	cmp	r2, #9
 800f038:	d903      	bls.n	800f042 <_svfiprintf_r+0x1a6>
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d0c6      	beq.n	800efcc <_svfiprintf_r+0x130>
 800f03e:	9105      	str	r1, [sp, #20]
 800f040:	e7c4      	b.n	800efcc <_svfiprintf_r+0x130>
 800f042:	4604      	mov	r4, r0
 800f044:	2301      	movs	r3, #1
 800f046:	fb0c 2101 	mla	r1, ip, r1, r2
 800f04a:	e7f0      	b.n	800f02e <_svfiprintf_r+0x192>
 800f04c:	ab03      	add	r3, sp, #12
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	462a      	mov	r2, r5
 800f052:	4638      	mov	r0, r7
 800f054:	4b0e      	ldr	r3, [pc, #56]	@ (800f090 <_svfiprintf_r+0x1f4>)
 800f056:	a904      	add	r1, sp, #16
 800f058:	f7fd fd4c 	bl	800caf4 <_printf_float>
 800f05c:	1c42      	adds	r2, r0, #1
 800f05e:	4606      	mov	r6, r0
 800f060:	d1d6      	bne.n	800f010 <_svfiprintf_r+0x174>
 800f062:	89ab      	ldrh	r3, [r5, #12]
 800f064:	065b      	lsls	r3, r3, #25
 800f066:	f53f af2d 	bmi.w	800eec4 <_svfiprintf_r+0x28>
 800f06a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f06c:	e72c      	b.n	800eec8 <_svfiprintf_r+0x2c>
 800f06e:	ab03      	add	r3, sp, #12
 800f070:	9300      	str	r3, [sp, #0]
 800f072:	462a      	mov	r2, r5
 800f074:	4638      	mov	r0, r7
 800f076:	4b06      	ldr	r3, [pc, #24]	@ (800f090 <_svfiprintf_r+0x1f4>)
 800f078:	a904      	add	r1, sp, #16
 800f07a:	f7fd ffd9 	bl	800d030 <_printf_i>
 800f07e:	e7ed      	b.n	800f05c <_svfiprintf_r+0x1c0>
 800f080:	0800fbc7 	.word	0x0800fbc7
 800f084:	0800fbcd 	.word	0x0800fbcd
 800f088:	0800fbd1 	.word	0x0800fbd1
 800f08c:	0800caf5 	.word	0x0800caf5
 800f090:	0800ede7 	.word	0x0800ede7

0800f094 <__sflush_r>:
 800f094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09a:	0716      	lsls	r6, r2, #28
 800f09c:	4605      	mov	r5, r0
 800f09e:	460c      	mov	r4, r1
 800f0a0:	d454      	bmi.n	800f14c <__sflush_r+0xb8>
 800f0a2:	684b      	ldr	r3, [r1, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	dc02      	bgt.n	800f0ae <__sflush_r+0x1a>
 800f0a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	dd48      	ble.n	800f140 <__sflush_r+0xac>
 800f0ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0b0:	2e00      	cmp	r6, #0
 800f0b2:	d045      	beq.n	800f140 <__sflush_r+0xac>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f0ba:	682f      	ldr	r7, [r5, #0]
 800f0bc:	6a21      	ldr	r1, [r4, #32]
 800f0be:	602b      	str	r3, [r5, #0]
 800f0c0:	d030      	beq.n	800f124 <__sflush_r+0x90>
 800f0c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0c4:	89a3      	ldrh	r3, [r4, #12]
 800f0c6:	0759      	lsls	r1, r3, #29
 800f0c8:	d505      	bpl.n	800f0d6 <__sflush_r+0x42>
 800f0ca:	6863      	ldr	r3, [r4, #4]
 800f0cc:	1ad2      	subs	r2, r2, r3
 800f0ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0d0:	b10b      	cbz	r3, 800f0d6 <__sflush_r+0x42>
 800f0d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0d4:	1ad2      	subs	r2, r2, r3
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	4628      	mov	r0, r5
 800f0da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0dc:	6a21      	ldr	r1, [r4, #32]
 800f0de:	47b0      	blx	r6
 800f0e0:	1c43      	adds	r3, r0, #1
 800f0e2:	89a3      	ldrh	r3, [r4, #12]
 800f0e4:	d106      	bne.n	800f0f4 <__sflush_r+0x60>
 800f0e6:	6829      	ldr	r1, [r5, #0]
 800f0e8:	291d      	cmp	r1, #29
 800f0ea:	d82b      	bhi.n	800f144 <__sflush_r+0xb0>
 800f0ec:	4a28      	ldr	r2, [pc, #160]	@ (800f190 <__sflush_r+0xfc>)
 800f0ee:	40ca      	lsrs	r2, r1
 800f0f0:	07d6      	lsls	r6, r2, #31
 800f0f2:	d527      	bpl.n	800f144 <__sflush_r+0xb0>
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	6062      	str	r2, [r4, #4]
 800f0f8:	6922      	ldr	r2, [r4, #16]
 800f0fa:	04d9      	lsls	r1, r3, #19
 800f0fc:	6022      	str	r2, [r4, #0]
 800f0fe:	d504      	bpl.n	800f10a <__sflush_r+0x76>
 800f100:	1c42      	adds	r2, r0, #1
 800f102:	d101      	bne.n	800f108 <__sflush_r+0x74>
 800f104:	682b      	ldr	r3, [r5, #0]
 800f106:	b903      	cbnz	r3, 800f10a <__sflush_r+0x76>
 800f108:	6560      	str	r0, [r4, #84]	@ 0x54
 800f10a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f10c:	602f      	str	r7, [r5, #0]
 800f10e:	b1b9      	cbz	r1, 800f140 <__sflush_r+0xac>
 800f110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f114:	4299      	cmp	r1, r3
 800f116:	d002      	beq.n	800f11e <__sflush_r+0x8a>
 800f118:	4628      	mov	r0, r5
 800f11a:	f7ff f9cd 	bl	800e4b8 <_free_r>
 800f11e:	2300      	movs	r3, #0
 800f120:	6363      	str	r3, [r4, #52]	@ 0x34
 800f122:	e00d      	b.n	800f140 <__sflush_r+0xac>
 800f124:	2301      	movs	r3, #1
 800f126:	4628      	mov	r0, r5
 800f128:	47b0      	blx	r6
 800f12a:	4602      	mov	r2, r0
 800f12c:	1c50      	adds	r0, r2, #1
 800f12e:	d1c9      	bne.n	800f0c4 <__sflush_r+0x30>
 800f130:	682b      	ldr	r3, [r5, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d0c6      	beq.n	800f0c4 <__sflush_r+0x30>
 800f136:	2b1d      	cmp	r3, #29
 800f138:	d001      	beq.n	800f13e <__sflush_r+0xaa>
 800f13a:	2b16      	cmp	r3, #22
 800f13c:	d11d      	bne.n	800f17a <__sflush_r+0xe6>
 800f13e:	602f      	str	r7, [r5, #0]
 800f140:	2000      	movs	r0, #0
 800f142:	e021      	b.n	800f188 <__sflush_r+0xf4>
 800f144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f148:	b21b      	sxth	r3, r3
 800f14a:	e01a      	b.n	800f182 <__sflush_r+0xee>
 800f14c:	690f      	ldr	r7, [r1, #16]
 800f14e:	2f00      	cmp	r7, #0
 800f150:	d0f6      	beq.n	800f140 <__sflush_r+0xac>
 800f152:	0793      	lsls	r3, r2, #30
 800f154:	bf18      	it	ne
 800f156:	2300      	movne	r3, #0
 800f158:	680e      	ldr	r6, [r1, #0]
 800f15a:	bf08      	it	eq
 800f15c:	694b      	ldreq	r3, [r1, #20]
 800f15e:	1bf6      	subs	r6, r6, r7
 800f160:	600f      	str	r7, [r1, #0]
 800f162:	608b      	str	r3, [r1, #8]
 800f164:	2e00      	cmp	r6, #0
 800f166:	ddeb      	ble.n	800f140 <__sflush_r+0xac>
 800f168:	4633      	mov	r3, r6
 800f16a:	463a      	mov	r2, r7
 800f16c:	4628      	mov	r0, r5
 800f16e:	6a21      	ldr	r1, [r4, #32]
 800f170:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800f174:	47e0      	blx	ip
 800f176:	2800      	cmp	r0, #0
 800f178:	dc07      	bgt.n	800f18a <__sflush_r+0xf6>
 800f17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f182:	f04f 30ff 	mov.w	r0, #4294967295
 800f186:	81a3      	strh	r3, [r4, #12]
 800f188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f18a:	4407      	add	r7, r0
 800f18c:	1a36      	subs	r6, r6, r0
 800f18e:	e7e9      	b.n	800f164 <__sflush_r+0xd0>
 800f190:	20400001 	.word	0x20400001

0800f194 <_fflush_r>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	690b      	ldr	r3, [r1, #16]
 800f198:	4605      	mov	r5, r0
 800f19a:	460c      	mov	r4, r1
 800f19c:	b913      	cbnz	r3, 800f1a4 <_fflush_r+0x10>
 800f19e:	2500      	movs	r5, #0
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	bd38      	pop	{r3, r4, r5, pc}
 800f1a4:	b118      	cbz	r0, 800f1ae <_fflush_r+0x1a>
 800f1a6:	6a03      	ldr	r3, [r0, #32]
 800f1a8:	b90b      	cbnz	r3, 800f1ae <_fflush_r+0x1a>
 800f1aa:	f7fe f8eb 	bl	800d384 <__sinit>
 800f1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d0f3      	beq.n	800f19e <_fflush_r+0xa>
 800f1b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f1b8:	07d0      	lsls	r0, r2, #31
 800f1ba:	d404      	bmi.n	800f1c6 <_fflush_r+0x32>
 800f1bc:	0599      	lsls	r1, r3, #22
 800f1be:	d402      	bmi.n	800f1c6 <_fflush_r+0x32>
 800f1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1c2:	f7fe fafe 	bl	800d7c2 <__retarget_lock_acquire_recursive>
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	4621      	mov	r1, r4
 800f1ca:	f7ff ff63 	bl	800f094 <__sflush_r>
 800f1ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1d0:	4605      	mov	r5, r0
 800f1d2:	07da      	lsls	r2, r3, #31
 800f1d4:	d4e4      	bmi.n	800f1a0 <_fflush_r+0xc>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	059b      	lsls	r3, r3, #22
 800f1da:	d4e1      	bmi.n	800f1a0 <_fflush_r+0xc>
 800f1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1de:	f7fe faf1 	bl	800d7c4 <__retarget_lock_release_recursive>
 800f1e2:	e7dd      	b.n	800f1a0 <_fflush_r+0xc>

0800f1e4 <__swhatbuf_r>:
 800f1e4:	b570      	push	{r4, r5, r6, lr}
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ec:	4615      	mov	r5, r2
 800f1ee:	2900      	cmp	r1, #0
 800f1f0:	461e      	mov	r6, r3
 800f1f2:	b096      	sub	sp, #88	@ 0x58
 800f1f4:	da0c      	bge.n	800f210 <__swhatbuf_r+0x2c>
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1fe:	bf14      	ite	ne
 800f200:	2340      	movne	r3, #64	@ 0x40
 800f202:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f206:	2000      	movs	r0, #0
 800f208:	6031      	str	r1, [r6, #0]
 800f20a:	602b      	str	r3, [r5, #0]
 800f20c:	b016      	add	sp, #88	@ 0x58
 800f20e:	bd70      	pop	{r4, r5, r6, pc}
 800f210:	466a      	mov	r2, sp
 800f212:	f000 f863 	bl	800f2dc <_fstat_r>
 800f216:	2800      	cmp	r0, #0
 800f218:	dbed      	blt.n	800f1f6 <__swhatbuf_r+0x12>
 800f21a:	9901      	ldr	r1, [sp, #4]
 800f21c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f220:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f224:	4259      	negs	r1, r3
 800f226:	4159      	adcs	r1, r3
 800f228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f22c:	e7eb      	b.n	800f206 <__swhatbuf_r+0x22>

0800f22e <__smakebuf_r>:
 800f22e:	898b      	ldrh	r3, [r1, #12]
 800f230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f232:	079d      	lsls	r5, r3, #30
 800f234:	4606      	mov	r6, r0
 800f236:	460c      	mov	r4, r1
 800f238:	d507      	bpl.n	800f24a <__smakebuf_r+0x1c>
 800f23a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f23e:	6023      	str	r3, [r4, #0]
 800f240:	6123      	str	r3, [r4, #16]
 800f242:	2301      	movs	r3, #1
 800f244:	6163      	str	r3, [r4, #20]
 800f246:	b003      	add	sp, #12
 800f248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f24a:	466a      	mov	r2, sp
 800f24c:	ab01      	add	r3, sp, #4
 800f24e:	f7ff ffc9 	bl	800f1e4 <__swhatbuf_r>
 800f252:	9f00      	ldr	r7, [sp, #0]
 800f254:	4605      	mov	r5, r0
 800f256:	4639      	mov	r1, r7
 800f258:	4630      	mov	r0, r6
 800f25a:	f7ff f99f 	bl	800e59c <_malloc_r>
 800f25e:	b948      	cbnz	r0, 800f274 <__smakebuf_r+0x46>
 800f260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f264:	059a      	lsls	r2, r3, #22
 800f266:	d4ee      	bmi.n	800f246 <__smakebuf_r+0x18>
 800f268:	f023 0303 	bic.w	r3, r3, #3
 800f26c:	f043 0302 	orr.w	r3, r3, #2
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	e7e2      	b.n	800f23a <__smakebuf_r+0xc>
 800f274:	89a3      	ldrh	r3, [r4, #12]
 800f276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f27e:	81a3      	strh	r3, [r4, #12]
 800f280:	9b01      	ldr	r3, [sp, #4]
 800f282:	6020      	str	r0, [r4, #0]
 800f284:	b15b      	cbz	r3, 800f29e <__smakebuf_r+0x70>
 800f286:	4630      	mov	r0, r6
 800f288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f28c:	f000 f838 	bl	800f300 <_isatty_r>
 800f290:	b128      	cbz	r0, 800f29e <__smakebuf_r+0x70>
 800f292:	89a3      	ldrh	r3, [r4, #12]
 800f294:	f023 0303 	bic.w	r3, r3, #3
 800f298:	f043 0301 	orr.w	r3, r3, #1
 800f29c:	81a3      	strh	r3, [r4, #12]
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	431d      	orrs	r5, r3
 800f2a2:	81a5      	strh	r5, [r4, #12]
 800f2a4:	e7cf      	b.n	800f246 <__smakebuf_r+0x18>

0800f2a6 <memmove>:
 800f2a6:	4288      	cmp	r0, r1
 800f2a8:	b510      	push	{r4, lr}
 800f2aa:	eb01 0402 	add.w	r4, r1, r2
 800f2ae:	d902      	bls.n	800f2b6 <memmove+0x10>
 800f2b0:	4284      	cmp	r4, r0
 800f2b2:	4623      	mov	r3, r4
 800f2b4:	d807      	bhi.n	800f2c6 <memmove+0x20>
 800f2b6:	1e43      	subs	r3, r0, #1
 800f2b8:	42a1      	cmp	r1, r4
 800f2ba:	d008      	beq.n	800f2ce <memmove+0x28>
 800f2bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2c4:	e7f8      	b.n	800f2b8 <memmove+0x12>
 800f2c6:	4601      	mov	r1, r0
 800f2c8:	4402      	add	r2, r0
 800f2ca:	428a      	cmp	r2, r1
 800f2cc:	d100      	bne.n	800f2d0 <memmove+0x2a>
 800f2ce:	bd10      	pop	{r4, pc}
 800f2d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2d8:	e7f7      	b.n	800f2ca <memmove+0x24>
	...

0800f2dc <_fstat_r>:
 800f2dc:	b538      	push	{r3, r4, r5, lr}
 800f2de:	2300      	movs	r3, #0
 800f2e0:	4d06      	ldr	r5, [pc, #24]	@ (800f2fc <_fstat_r+0x20>)
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	4608      	mov	r0, r1
 800f2e6:	4611      	mov	r1, r2
 800f2e8:	602b      	str	r3, [r5, #0]
 800f2ea:	f7f2 fd83 	bl	8001df4 <_fstat>
 800f2ee:	1c43      	adds	r3, r0, #1
 800f2f0:	d102      	bne.n	800f2f8 <_fstat_r+0x1c>
 800f2f2:	682b      	ldr	r3, [r5, #0]
 800f2f4:	b103      	cbz	r3, 800f2f8 <_fstat_r+0x1c>
 800f2f6:	6023      	str	r3, [r4, #0]
 800f2f8:	bd38      	pop	{r3, r4, r5, pc}
 800f2fa:	bf00      	nop
 800f2fc:	20002484 	.word	0x20002484

0800f300 <_isatty_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	2300      	movs	r3, #0
 800f304:	4d05      	ldr	r5, [pc, #20]	@ (800f31c <_isatty_r+0x1c>)
 800f306:	4604      	mov	r4, r0
 800f308:	4608      	mov	r0, r1
 800f30a:	602b      	str	r3, [r5, #0]
 800f30c:	f7f2 fd81 	bl	8001e12 <_isatty>
 800f310:	1c43      	adds	r3, r0, #1
 800f312:	d102      	bne.n	800f31a <_isatty_r+0x1a>
 800f314:	682b      	ldr	r3, [r5, #0]
 800f316:	b103      	cbz	r3, 800f31a <_isatty_r+0x1a>
 800f318:	6023      	str	r3, [r4, #0]
 800f31a:	bd38      	pop	{r3, r4, r5, pc}
 800f31c:	20002484 	.word	0x20002484

0800f320 <_sbrk_r>:
 800f320:	b538      	push	{r3, r4, r5, lr}
 800f322:	2300      	movs	r3, #0
 800f324:	4d05      	ldr	r5, [pc, #20]	@ (800f33c <_sbrk_r+0x1c>)
 800f326:	4604      	mov	r4, r0
 800f328:	4608      	mov	r0, r1
 800f32a:	602b      	str	r3, [r5, #0]
 800f32c:	f7f2 fd88 	bl	8001e40 <_sbrk>
 800f330:	1c43      	adds	r3, r0, #1
 800f332:	d102      	bne.n	800f33a <_sbrk_r+0x1a>
 800f334:	682b      	ldr	r3, [r5, #0]
 800f336:	b103      	cbz	r3, 800f33a <_sbrk_r+0x1a>
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	bd38      	pop	{r3, r4, r5, pc}
 800f33c:	20002484 	.word	0x20002484

0800f340 <__assert_func>:
 800f340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f342:	4614      	mov	r4, r2
 800f344:	461a      	mov	r2, r3
 800f346:	4b09      	ldr	r3, [pc, #36]	@ (800f36c <__assert_func+0x2c>)
 800f348:	4605      	mov	r5, r0
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	68d8      	ldr	r0, [r3, #12]
 800f34e:	b14c      	cbz	r4, 800f364 <__assert_func+0x24>
 800f350:	4b07      	ldr	r3, [pc, #28]	@ (800f370 <__assert_func+0x30>)
 800f352:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f356:	9100      	str	r1, [sp, #0]
 800f358:	462b      	mov	r3, r5
 800f35a:	4906      	ldr	r1, [pc, #24]	@ (800f374 <__assert_func+0x34>)
 800f35c:	f000 f850 	bl	800f400 <fiprintf>
 800f360:	f000 f860 	bl	800f424 <abort>
 800f364:	4b04      	ldr	r3, [pc, #16]	@ (800f378 <__assert_func+0x38>)
 800f366:	461c      	mov	r4, r3
 800f368:	e7f3      	b.n	800f352 <__assert_func+0x12>
 800f36a:	bf00      	nop
 800f36c:	200001ac 	.word	0x200001ac
 800f370:	0800fbd8 	.word	0x0800fbd8
 800f374:	0800fbe5 	.word	0x0800fbe5
 800f378:	0800fc13 	.word	0x0800fc13

0800f37c <_calloc_r>:
 800f37c:	b570      	push	{r4, r5, r6, lr}
 800f37e:	fba1 5402 	umull	r5, r4, r1, r2
 800f382:	b934      	cbnz	r4, 800f392 <_calloc_r+0x16>
 800f384:	4629      	mov	r1, r5
 800f386:	f7ff f909 	bl	800e59c <_malloc_r>
 800f38a:	4606      	mov	r6, r0
 800f38c:	b928      	cbnz	r0, 800f39a <_calloc_r+0x1e>
 800f38e:	4630      	mov	r0, r6
 800f390:	bd70      	pop	{r4, r5, r6, pc}
 800f392:	220c      	movs	r2, #12
 800f394:	2600      	movs	r6, #0
 800f396:	6002      	str	r2, [r0, #0]
 800f398:	e7f9      	b.n	800f38e <_calloc_r+0x12>
 800f39a:	462a      	mov	r2, r5
 800f39c:	4621      	mov	r1, r4
 800f39e:	f7fe f97f 	bl	800d6a0 <memset>
 800f3a2:	e7f4      	b.n	800f38e <_calloc_r+0x12>

0800f3a4 <_realloc_r>:
 800f3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a8:	4607      	mov	r7, r0
 800f3aa:	4614      	mov	r4, r2
 800f3ac:	460d      	mov	r5, r1
 800f3ae:	b921      	cbnz	r1, 800f3ba <_realloc_r+0x16>
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b6:	f7ff b8f1 	b.w	800e59c <_malloc_r>
 800f3ba:	b92a      	cbnz	r2, 800f3c8 <_realloc_r+0x24>
 800f3bc:	f7ff f87c 	bl	800e4b8 <_free_r>
 800f3c0:	4625      	mov	r5, r4
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c8:	f000 f833 	bl	800f432 <_malloc_usable_size_r>
 800f3cc:	4284      	cmp	r4, r0
 800f3ce:	4606      	mov	r6, r0
 800f3d0:	d802      	bhi.n	800f3d8 <_realloc_r+0x34>
 800f3d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f3d6:	d8f4      	bhi.n	800f3c2 <_realloc_r+0x1e>
 800f3d8:	4621      	mov	r1, r4
 800f3da:	4638      	mov	r0, r7
 800f3dc:	f7ff f8de 	bl	800e59c <_malloc_r>
 800f3e0:	4680      	mov	r8, r0
 800f3e2:	b908      	cbnz	r0, 800f3e8 <_realloc_r+0x44>
 800f3e4:	4645      	mov	r5, r8
 800f3e6:	e7ec      	b.n	800f3c2 <_realloc_r+0x1e>
 800f3e8:	42b4      	cmp	r4, r6
 800f3ea:	4622      	mov	r2, r4
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	bf28      	it	cs
 800f3f0:	4632      	movcs	r2, r6
 800f3f2:	f7fe f9f6 	bl	800d7e2 <memcpy>
 800f3f6:	4629      	mov	r1, r5
 800f3f8:	4638      	mov	r0, r7
 800f3fa:	f7ff f85d 	bl	800e4b8 <_free_r>
 800f3fe:	e7f1      	b.n	800f3e4 <_realloc_r+0x40>

0800f400 <fiprintf>:
 800f400:	b40e      	push	{r1, r2, r3}
 800f402:	b503      	push	{r0, r1, lr}
 800f404:	4601      	mov	r1, r0
 800f406:	ab03      	add	r3, sp, #12
 800f408:	4805      	ldr	r0, [pc, #20]	@ (800f420 <fiprintf+0x20>)
 800f40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f40e:	6800      	ldr	r0, [r0, #0]
 800f410:	9301      	str	r3, [sp, #4]
 800f412:	f000 f83d 	bl	800f490 <_vfiprintf_r>
 800f416:	b002      	add	sp, #8
 800f418:	f85d eb04 	ldr.w	lr, [sp], #4
 800f41c:	b003      	add	sp, #12
 800f41e:	4770      	bx	lr
 800f420:	200001ac 	.word	0x200001ac

0800f424 <abort>:
 800f424:	2006      	movs	r0, #6
 800f426:	b508      	push	{r3, lr}
 800f428:	f000 f972 	bl	800f710 <raise>
 800f42c:	2001      	movs	r0, #1
 800f42e:	f7f2 fc92 	bl	8001d56 <_exit>

0800f432 <_malloc_usable_size_r>:
 800f432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f436:	1f18      	subs	r0, r3, #4
 800f438:	2b00      	cmp	r3, #0
 800f43a:	bfbc      	itt	lt
 800f43c:	580b      	ldrlt	r3, [r1, r0]
 800f43e:	18c0      	addlt	r0, r0, r3
 800f440:	4770      	bx	lr

0800f442 <__sfputc_r>:
 800f442:	6893      	ldr	r3, [r2, #8]
 800f444:	b410      	push	{r4}
 800f446:	3b01      	subs	r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	6093      	str	r3, [r2, #8]
 800f44c:	da07      	bge.n	800f45e <__sfputc_r+0x1c>
 800f44e:	6994      	ldr	r4, [r2, #24]
 800f450:	42a3      	cmp	r3, r4
 800f452:	db01      	blt.n	800f458 <__sfputc_r+0x16>
 800f454:	290a      	cmp	r1, #10
 800f456:	d102      	bne.n	800f45e <__sfputc_r+0x1c>
 800f458:	bc10      	pop	{r4}
 800f45a:	f7fe b88c 	b.w	800d576 <__swbuf_r>
 800f45e:	6813      	ldr	r3, [r2, #0]
 800f460:	1c58      	adds	r0, r3, #1
 800f462:	6010      	str	r0, [r2, #0]
 800f464:	7019      	strb	r1, [r3, #0]
 800f466:	4608      	mov	r0, r1
 800f468:	bc10      	pop	{r4}
 800f46a:	4770      	bx	lr

0800f46c <__sfputs_r>:
 800f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46e:	4606      	mov	r6, r0
 800f470:	460f      	mov	r7, r1
 800f472:	4614      	mov	r4, r2
 800f474:	18d5      	adds	r5, r2, r3
 800f476:	42ac      	cmp	r4, r5
 800f478:	d101      	bne.n	800f47e <__sfputs_r+0x12>
 800f47a:	2000      	movs	r0, #0
 800f47c:	e007      	b.n	800f48e <__sfputs_r+0x22>
 800f47e:	463a      	mov	r2, r7
 800f480:	4630      	mov	r0, r6
 800f482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f486:	f7ff ffdc 	bl	800f442 <__sfputc_r>
 800f48a:	1c43      	adds	r3, r0, #1
 800f48c:	d1f3      	bne.n	800f476 <__sfputs_r+0xa>
 800f48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f490 <_vfiprintf_r>:
 800f490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f494:	460d      	mov	r5, r1
 800f496:	4614      	mov	r4, r2
 800f498:	4698      	mov	r8, r3
 800f49a:	4606      	mov	r6, r0
 800f49c:	b09d      	sub	sp, #116	@ 0x74
 800f49e:	b118      	cbz	r0, 800f4a8 <_vfiprintf_r+0x18>
 800f4a0:	6a03      	ldr	r3, [r0, #32]
 800f4a2:	b90b      	cbnz	r3, 800f4a8 <_vfiprintf_r+0x18>
 800f4a4:	f7fd ff6e 	bl	800d384 <__sinit>
 800f4a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4aa:	07d9      	lsls	r1, r3, #31
 800f4ac:	d405      	bmi.n	800f4ba <_vfiprintf_r+0x2a>
 800f4ae:	89ab      	ldrh	r3, [r5, #12]
 800f4b0:	059a      	lsls	r2, r3, #22
 800f4b2:	d402      	bmi.n	800f4ba <_vfiprintf_r+0x2a>
 800f4b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4b6:	f7fe f984 	bl	800d7c2 <__retarget_lock_acquire_recursive>
 800f4ba:	89ab      	ldrh	r3, [r5, #12]
 800f4bc:	071b      	lsls	r3, r3, #28
 800f4be:	d501      	bpl.n	800f4c4 <_vfiprintf_r+0x34>
 800f4c0:	692b      	ldr	r3, [r5, #16]
 800f4c2:	b99b      	cbnz	r3, 800f4ec <_vfiprintf_r+0x5c>
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f7fe f894 	bl	800d5f4 <__swsetup_r>
 800f4cc:	b170      	cbz	r0, 800f4ec <_vfiprintf_r+0x5c>
 800f4ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4d0:	07dc      	lsls	r4, r3, #31
 800f4d2:	d504      	bpl.n	800f4de <_vfiprintf_r+0x4e>
 800f4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d8:	b01d      	add	sp, #116	@ 0x74
 800f4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4de:	89ab      	ldrh	r3, [r5, #12]
 800f4e0:	0598      	lsls	r0, r3, #22
 800f4e2:	d4f7      	bmi.n	800f4d4 <_vfiprintf_r+0x44>
 800f4e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4e6:	f7fe f96d 	bl	800d7c4 <__retarget_lock_release_recursive>
 800f4ea:	e7f3      	b.n	800f4d4 <_vfiprintf_r+0x44>
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4f0:	2320      	movs	r3, #32
 800f4f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4f6:	2330      	movs	r3, #48	@ 0x30
 800f4f8:	f04f 0901 	mov.w	r9, #1
 800f4fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f500:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800f6ac <_vfiprintf_r+0x21c>
 800f504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f508:	4623      	mov	r3, r4
 800f50a:	469a      	mov	sl, r3
 800f50c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f510:	b10a      	cbz	r2, 800f516 <_vfiprintf_r+0x86>
 800f512:	2a25      	cmp	r2, #37	@ 0x25
 800f514:	d1f9      	bne.n	800f50a <_vfiprintf_r+0x7a>
 800f516:	ebba 0b04 	subs.w	fp, sl, r4
 800f51a:	d00b      	beq.n	800f534 <_vfiprintf_r+0xa4>
 800f51c:	465b      	mov	r3, fp
 800f51e:	4622      	mov	r2, r4
 800f520:	4629      	mov	r1, r5
 800f522:	4630      	mov	r0, r6
 800f524:	f7ff ffa2 	bl	800f46c <__sfputs_r>
 800f528:	3001      	adds	r0, #1
 800f52a:	f000 80a7 	beq.w	800f67c <_vfiprintf_r+0x1ec>
 800f52e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f530:	445a      	add	r2, fp
 800f532:	9209      	str	r2, [sp, #36]	@ 0x24
 800f534:	f89a 3000 	ldrb.w	r3, [sl]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 809f 	beq.w	800f67c <_vfiprintf_r+0x1ec>
 800f53e:	2300      	movs	r3, #0
 800f540:	f04f 32ff 	mov.w	r2, #4294967295
 800f544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f548:	f10a 0a01 	add.w	sl, sl, #1
 800f54c:	9304      	str	r3, [sp, #16]
 800f54e:	9307      	str	r3, [sp, #28]
 800f550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f554:	931a      	str	r3, [sp, #104]	@ 0x68
 800f556:	4654      	mov	r4, sl
 800f558:	2205      	movs	r2, #5
 800f55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f55e:	4853      	ldr	r0, [pc, #332]	@ (800f6ac <_vfiprintf_r+0x21c>)
 800f560:	f7fe f931 	bl	800d7c6 <memchr>
 800f564:	9a04      	ldr	r2, [sp, #16]
 800f566:	b9d8      	cbnz	r0, 800f5a0 <_vfiprintf_r+0x110>
 800f568:	06d1      	lsls	r1, r2, #27
 800f56a:	bf44      	itt	mi
 800f56c:	2320      	movmi	r3, #32
 800f56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f572:	0713      	lsls	r3, r2, #28
 800f574:	bf44      	itt	mi
 800f576:	232b      	movmi	r3, #43	@ 0x2b
 800f578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f57c:	f89a 3000 	ldrb.w	r3, [sl]
 800f580:	2b2a      	cmp	r3, #42	@ 0x2a
 800f582:	d015      	beq.n	800f5b0 <_vfiprintf_r+0x120>
 800f584:	4654      	mov	r4, sl
 800f586:	2000      	movs	r0, #0
 800f588:	f04f 0c0a 	mov.w	ip, #10
 800f58c:	9a07      	ldr	r2, [sp, #28]
 800f58e:	4621      	mov	r1, r4
 800f590:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f594:	3b30      	subs	r3, #48	@ 0x30
 800f596:	2b09      	cmp	r3, #9
 800f598:	d94b      	bls.n	800f632 <_vfiprintf_r+0x1a2>
 800f59a:	b1b0      	cbz	r0, 800f5ca <_vfiprintf_r+0x13a>
 800f59c:	9207      	str	r2, [sp, #28]
 800f59e:	e014      	b.n	800f5ca <_vfiprintf_r+0x13a>
 800f5a0:	eba0 0308 	sub.w	r3, r0, r8
 800f5a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	46a2      	mov	sl, r4
 800f5ac:	9304      	str	r3, [sp, #16]
 800f5ae:	e7d2      	b.n	800f556 <_vfiprintf_r+0xc6>
 800f5b0:	9b03      	ldr	r3, [sp, #12]
 800f5b2:	1d19      	adds	r1, r3, #4
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	9103      	str	r1, [sp, #12]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	bfbb      	ittet	lt
 800f5bc:	425b      	neglt	r3, r3
 800f5be:	f042 0202 	orrlt.w	r2, r2, #2
 800f5c2:	9307      	strge	r3, [sp, #28]
 800f5c4:	9307      	strlt	r3, [sp, #28]
 800f5c6:	bfb8      	it	lt
 800f5c8:	9204      	strlt	r2, [sp, #16]
 800f5ca:	7823      	ldrb	r3, [r4, #0]
 800f5cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5ce:	d10a      	bne.n	800f5e6 <_vfiprintf_r+0x156>
 800f5d0:	7863      	ldrb	r3, [r4, #1]
 800f5d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5d4:	d132      	bne.n	800f63c <_vfiprintf_r+0x1ac>
 800f5d6:	9b03      	ldr	r3, [sp, #12]
 800f5d8:	3402      	adds	r4, #2
 800f5da:	1d1a      	adds	r2, r3, #4
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	9203      	str	r2, [sp, #12]
 800f5e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f5e4:	9305      	str	r3, [sp, #20]
 800f5e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f6b0 <_vfiprintf_r+0x220>
 800f5ea:	2203      	movs	r2, #3
 800f5ec:	4650      	mov	r0, sl
 800f5ee:	7821      	ldrb	r1, [r4, #0]
 800f5f0:	f7fe f8e9 	bl	800d7c6 <memchr>
 800f5f4:	b138      	cbz	r0, 800f606 <_vfiprintf_r+0x176>
 800f5f6:	2240      	movs	r2, #64	@ 0x40
 800f5f8:	9b04      	ldr	r3, [sp, #16]
 800f5fa:	eba0 000a 	sub.w	r0, r0, sl
 800f5fe:	4082      	lsls	r2, r0
 800f600:	4313      	orrs	r3, r2
 800f602:	3401      	adds	r4, #1
 800f604:	9304      	str	r3, [sp, #16]
 800f606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f60a:	2206      	movs	r2, #6
 800f60c:	4829      	ldr	r0, [pc, #164]	@ (800f6b4 <_vfiprintf_r+0x224>)
 800f60e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f612:	f7fe f8d8 	bl	800d7c6 <memchr>
 800f616:	2800      	cmp	r0, #0
 800f618:	d03f      	beq.n	800f69a <_vfiprintf_r+0x20a>
 800f61a:	4b27      	ldr	r3, [pc, #156]	@ (800f6b8 <_vfiprintf_r+0x228>)
 800f61c:	bb1b      	cbnz	r3, 800f666 <_vfiprintf_r+0x1d6>
 800f61e:	9b03      	ldr	r3, [sp, #12]
 800f620:	3307      	adds	r3, #7
 800f622:	f023 0307 	bic.w	r3, r3, #7
 800f626:	3308      	adds	r3, #8
 800f628:	9303      	str	r3, [sp, #12]
 800f62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f62c:	443b      	add	r3, r7
 800f62e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f630:	e76a      	b.n	800f508 <_vfiprintf_r+0x78>
 800f632:	460c      	mov	r4, r1
 800f634:	2001      	movs	r0, #1
 800f636:	fb0c 3202 	mla	r2, ip, r2, r3
 800f63a:	e7a8      	b.n	800f58e <_vfiprintf_r+0xfe>
 800f63c:	2300      	movs	r3, #0
 800f63e:	f04f 0c0a 	mov.w	ip, #10
 800f642:	4619      	mov	r1, r3
 800f644:	3401      	adds	r4, #1
 800f646:	9305      	str	r3, [sp, #20]
 800f648:	4620      	mov	r0, r4
 800f64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f64e:	3a30      	subs	r2, #48	@ 0x30
 800f650:	2a09      	cmp	r2, #9
 800f652:	d903      	bls.n	800f65c <_vfiprintf_r+0x1cc>
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0c6      	beq.n	800f5e6 <_vfiprintf_r+0x156>
 800f658:	9105      	str	r1, [sp, #20]
 800f65a:	e7c4      	b.n	800f5e6 <_vfiprintf_r+0x156>
 800f65c:	4604      	mov	r4, r0
 800f65e:	2301      	movs	r3, #1
 800f660:	fb0c 2101 	mla	r1, ip, r1, r2
 800f664:	e7f0      	b.n	800f648 <_vfiprintf_r+0x1b8>
 800f666:	ab03      	add	r3, sp, #12
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	462a      	mov	r2, r5
 800f66c:	4630      	mov	r0, r6
 800f66e:	4b13      	ldr	r3, [pc, #76]	@ (800f6bc <_vfiprintf_r+0x22c>)
 800f670:	a904      	add	r1, sp, #16
 800f672:	f7fd fa3f 	bl	800caf4 <_printf_float>
 800f676:	4607      	mov	r7, r0
 800f678:	1c78      	adds	r0, r7, #1
 800f67a:	d1d6      	bne.n	800f62a <_vfiprintf_r+0x19a>
 800f67c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f67e:	07d9      	lsls	r1, r3, #31
 800f680:	d405      	bmi.n	800f68e <_vfiprintf_r+0x1fe>
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	059a      	lsls	r2, r3, #22
 800f686:	d402      	bmi.n	800f68e <_vfiprintf_r+0x1fe>
 800f688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f68a:	f7fe f89b 	bl	800d7c4 <__retarget_lock_release_recursive>
 800f68e:	89ab      	ldrh	r3, [r5, #12]
 800f690:	065b      	lsls	r3, r3, #25
 800f692:	f53f af1f 	bmi.w	800f4d4 <_vfiprintf_r+0x44>
 800f696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f698:	e71e      	b.n	800f4d8 <_vfiprintf_r+0x48>
 800f69a:	ab03      	add	r3, sp, #12
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	462a      	mov	r2, r5
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	4b06      	ldr	r3, [pc, #24]	@ (800f6bc <_vfiprintf_r+0x22c>)
 800f6a4:	a904      	add	r1, sp, #16
 800f6a6:	f7fd fcc3 	bl	800d030 <_printf_i>
 800f6aa:	e7e4      	b.n	800f676 <_vfiprintf_r+0x1e6>
 800f6ac:	0800fbc7 	.word	0x0800fbc7
 800f6b0:	0800fbcd 	.word	0x0800fbcd
 800f6b4:	0800fbd1 	.word	0x0800fbd1
 800f6b8:	0800caf5 	.word	0x0800caf5
 800f6bc:	0800f46d 	.word	0x0800f46d

0800f6c0 <_raise_r>:
 800f6c0:	291f      	cmp	r1, #31
 800f6c2:	b538      	push	{r3, r4, r5, lr}
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	d904      	bls.n	800f6d4 <_raise_r+0x14>
 800f6ca:	2316      	movs	r3, #22
 800f6cc:	6003      	str	r3, [r0, #0]
 800f6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d2:	bd38      	pop	{r3, r4, r5, pc}
 800f6d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f6d6:	b112      	cbz	r2, 800f6de <_raise_r+0x1e>
 800f6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6dc:	b94b      	cbnz	r3, 800f6f2 <_raise_r+0x32>
 800f6de:	4628      	mov	r0, r5
 800f6e0:	f000 f830 	bl	800f744 <_getpid_r>
 800f6e4:	4622      	mov	r2, r4
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6ee:	f000 b817 	b.w	800f720 <_kill_r>
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	d00a      	beq.n	800f70c <_raise_r+0x4c>
 800f6f6:	1c59      	adds	r1, r3, #1
 800f6f8:	d103      	bne.n	800f702 <_raise_r+0x42>
 800f6fa:	2316      	movs	r3, #22
 800f6fc:	6003      	str	r3, [r0, #0]
 800f6fe:	2001      	movs	r0, #1
 800f700:	e7e7      	b.n	800f6d2 <_raise_r+0x12>
 800f702:	2100      	movs	r1, #0
 800f704:	4620      	mov	r0, r4
 800f706:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f70a:	4798      	blx	r3
 800f70c:	2000      	movs	r0, #0
 800f70e:	e7e0      	b.n	800f6d2 <_raise_r+0x12>

0800f710 <raise>:
 800f710:	4b02      	ldr	r3, [pc, #8]	@ (800f71c <raise+0xc>)
 800f712:	4601      	mov	r1, r0
 800f714:	6818      	ldr	r0, [r3, #0]
 800f716:	f7ff bfd3 	b.w	800f6c0 <_raise_r>
 800f71a:	bf00      	nop
 800f71c:	200001ac 	.word	0x200001ac

0800f720 <_kill_r>:
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	2300      	movs	r3, #0
 800f724:	4d06      	ldr	r5, [pc, #24]	@ (800f740 <_kill_r+0x20>)
 800f726:	4604      	mov	r4, r0
 800f728:	4608      	mov	r0, r1
 800f72a:	4611      	mov	r1, r2
 800f72c:	602b      	str	r3, [r5, #0]
 800f72e:	f7f2 fb02 	bl	8001d36 <_kill>
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	d102      	bne.n	800f73c <_kill_r+0x1c>
 800f736:	682b      	ldr	r3, [r5, #0]
 800f738:	b103      	cbz	r3, 800f73c <_kill_r+0x1c>
 800f73a:	6023      	str	r3, [r4, #0]
 800f73c:	bd38      	pop	{r3, r4, r5, pc}
 800f73e:	bf00      	nop
 800f740:	20002484 	.word	0x20002484

0800f744 <_getpid_r>:
 800f744:	f7f2 baf0 	b.w	8001d28 <_getpid>

0800f748 <floor>:
 800f748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f74c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f750:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800f754:	2e13      	cmp	r6, #19
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	460c      	mov	r4, r1
 800f75c:	4605      	mov	r5, r0
 800f75e:	4680      	mov	r8, r0
 800f760:	dc35      	bgt.n	800f7ce <floor+0x86>
 800f762:	2e00      	cmp	r6, #0
 800f764:	da17      	bge.n	800f796 <floor+0x4e>
 800f766:	a334      	add	r3, pc, #208	@ (adr r3, 800f838 <floor+0xf0>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	f7f0 fd6e 	bl	800024c <__adddf3>
 800f770:	2200      	movs	r2, #0
 800f772:	2300      	movs	r3, #0
 800f774:	f7f1 f9b0 	bl	8000ad8 <__aeabi_dcmpgt>
 800f778:	b150      	cbz	r0, 800f790 <floor+0x48>
 800f77a:	2c00      	cmp	r4, #0
 800f77c:	da57      	bge.n	800f82e <floor+0xe6>
 800f77e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f782:	432c      	orrs	r4, r5
 800f784:	2500      	movs	r5, #0
 800f786:	42ac      	cmp	r4, r5
 800f788:	4c2d      	ldr	r4, [pc, #180]	@ (800f840 <floor+0xf8>)
 800f78a:	bf08      	it	eq
 800f78c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f790:	4623      	mov	r3, r4
 800f792:	462a      	mov	r2, r5
 800f794:	e024      	b.n	800f7e0 <floor+0x98>
 800f796:	4f2b      	ldr	r7, [pc, #172]	@ (800f844 <floor+0xfc>)
 800f798:	4137      	asrs	r7, r6
 800f79a:	ea01 0c07 	and.w	ip, r1, r7
 800f79e:	ea5c 0c00 	orrs.w	ip, ip, r0
 800f7a2:	d01d      	beq.n	800f7e0 <floor+0x98>
 800f7a4:	a324      	add	r3, pc, #144	@ (adr r3, 800f838 <floor+0xf0>)
 800f7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7aa:	f7f0 fd4f 	bl	800024c <__adddf3>
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	f7f1 f991 	bl	8000ad8 <__aeabi_dcmpgt>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d0ea      	beq.n	800f790 <floor+0x48>
 800f7ba:	2c00      	cmp	r4, #0
 800f7bc:	bfbe      	ittt	lt
 800f7be:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f7c2:	4133      	asrlt	r3, r6
 800f7c4:	18e4      	addlt	r4, r4, r3
 800f7c6:	2500      	movs	r5, #0
 800f7c8:	ea24 0407 	bic.w	r4, r4, r7
 800f7cc:	e7e0      	b.n	800f790 <floor+0x48>
 800f7ce:	2e33      	cmp	r6, #51	@ 0x33
 800f7d0:	dd0a      	ble.n	800f7e8 <floor+0xa0>
 800f7d2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f7d6:	d103      	bne.n	800f7e0 <floor+0x98>
 800f7d8:	f7f0 fd38 	bl	800024c <__adddf3>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	460b      	mov	r3, r1
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7e8:	f04f 3cff 	mov.w	ip, #4294967295
 800f7ec:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800f7f0:	fa2c f707 	lsr.w	r7, ip, r7
 800f7f4:	4207      	tst	r7, r0
 800f7f6:	d0f3      	beq.n	800f7e0 <floor+0x98>
 800f7f8:	a30f      	add	r3, pc, #60	@ (adr r3, 800f838 <floor+0xf0>)
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	f7f0 fd25 	bl	800024c <__adddf3>
 800f802:	2200      	movs	r2, #0
 800f804:	2300      	movs	r3, #0
 800f806:	f7f1 f967 	bl	8000ad8 <__aeabi_dcmpgt>
 800f80a:	2800      	cmp	r0, #0
 800f80c:	d0c0      	beq.n	800f790 <floor+0x48>
 800f80e:	2c00      	cmp	r4, #0
 800f810:	da0a      	bge.n	800f828 <floor+0xe0>
 800f812:	2e14      	cmp	r6, #20
 800f814:	d101      	bne.n	800f81a <floor+0xd2>
 800f816:	3401      	adds	r4, #1
 800f818:	e006      	b.n	800f828 <floor+0xe0>
 800f81a:	2301      	movs	r3, #1
 800f81c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f820:	40b3      	lsls	r3, r6
 800f822:	441d      	add	r5, r3
 800f824:	4545      	cmp	r5, r8
 800f826:	d3f6      	bcc.n	800f816 <floor+0xce>
 800f828:	ea25 0507 	bic.w	r5, r5, r7
 800f82c:	e7b0      	b.n	800f790 <floor+0x48>
 800f82e:	2500      	movs	r5, #0
 800f830:	462c      	mov	r4, r5
 800f832:	e7ad      	b.n	800f790 <floor+0x48>
 800f834:	f3af 8000 	nop.w
 800f838:	8800759c 	.word	0x8800759c
 800f83c:	7e37e43c 	.word	0x7e37e43c
 800f840:	bff00000 	.word	0xbff00000
 800f844:	000fffff 	.word	0x000fffff

0800f848 <_init>:
 800f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84a:	bf00      	nop
 800f84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84e:	bc08      	pop	{r3}
 800f850:	469e      	mov	lr, r3
 800f852:	4770      	bx	lr

0800f854 <_fini>:
 800f854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f856:	bf00      	nop
 800f858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f85a:	bc08      	pop	{r3}
 800f85c:	469e      	mov	lr, r3
 800f85e:	4770      	bx	lr
